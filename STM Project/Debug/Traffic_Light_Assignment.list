
Traffic_Light_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000458c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004698  08004698  00014698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004704  08004704  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08004704  08004704  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004704  08004704  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004704  08004704  00014704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004708  08004708  00014708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800470c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000094  080047a0  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  080047a0  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd4a  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ff  00000000  00000000  0002ce07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  0002f208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  0002ff98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fe3  00000000  00000000  00030c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbff  00000000  00000000  00048beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad30  00000000  00000000  000587ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e351a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a08  00000000  00000000  000e356c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08004680 	.word	0x08004680

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08004680 	.word	0x08004680

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <button_reading>:
//we define counter for the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

//read 3 button and modify flag buffer when button is pressed
//this function is called in timer interupt
void button_reading(){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS; i ++){
 8000162:	2300      	movs	r3, #0
 8000164:	607b      	str	r3, [r7, #4]
 8000166:	e0a7      	b.n	80002b8 <button_reading+0x15c>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000168:	4a58      	ldr	r2, [pc, #352]	; (80002cc <button_reading+0x170>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	4413      	add	r3, r2
 800016e:	7819      	ldrb	r1, [r3, #0]
 8000170:	4a57      	ldr	r2, [pc, #348]	; (80002d0 <button_reading+0x174>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	4413      	add	r3, r2
 8000176:	460a      	mov	r2, r1
 8000178:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 800017a:	4a56      	ldr	r2, [pc, #344]	; (80002d4 <button_reading+0x178>)
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	4413      	add	r3, r2
 8000180:	7819      	ldrb	r1, [r3, #0]
 8000182:	4a52      	ldr	r2, [pc, #328]	; (80002cc <button_reading+0x170>)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	4413      	add	r3, r2
 8000188:	460a      	mov	r2, r1
 800018a:	701a      	strb	r2, [r3, #0]
		//read raw button to buffer0
		if(i == 0){
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d10b      	bne.n	80001aa <button_reading+0x4e>
			debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000192:	2102      	movs	r1, #2
 8000194:	4850      	ldr	r0, [pc, #320]	; (80002d8 <button_reading+0x17c>)
 8000196:	f001 fd2f 	bl	8001bf8 <HAL_GPIO_ReadPin>
 800019a:	4603      	mov	r3, r0
 800019c:	4619      	mov	r1, r3
 800019e:	4a4d      	ldr	r2, [pc, #308]	; (80002d4 <button_reading+0x178>)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	4413      	add	r3, r2
 80001a4:	460a      	mov	r2, r1
 80001a6:	701a      	strb	r2, [r3, #0]
 80001a8:	e02b      	b.n	8000202 <button_reading+0xa6>
		}
		else if(i == 1){
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2b01      	cmp	r3, #1
 80001ae:	d10b      	bne.n	80001c8 <button_reading+0x6c>
			debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80001b0:	2110      	movs	r1, #16
 80001b2:	4849      	ldr	r0, [pc, #292]	; (80002d8 <button_reading+0x17c>)
 80001b4:	f001 fd20 	bl	8001bf8 <HAL_GPIO_ReadPin>
 80001b8:	4603      	mov	r3, r0
 80001ba:	4619      	mov	r1, r3
 80001bc:	4a45      	ldr	r2, [pc, #276]	; (80002d4 <button_reading+0x178>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	4413      	add	r3, r2
 80001c2:	460a      	mov	r2, r1
 80001c4:	701a      	strb	r2, [r3, #0]
 80001c6:	e01c      	b.n	8000202 <button_reading+0xa6>
		}
		else if(i == 2){
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	2b02      	cmp	r3, #2
 80001cc:	d10b      	bne.n	80001e6 <button_reading+0x8a>
			debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 80001ce:	2101      	movs	r1, #1
 80001d0:	4842      	ldr	r0, [pc, #264]	; (80002dc <button_reading+0x180>)
 80001d2:	f001 fd11 	bl	8001bf8 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	4619      	mov	r1, r3
 80001da:	4a3e      	ldr	r2, [pc, #248]	; (80002d4 <button_reading+0x178>)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4413      	add	r3, r2
 80001e0:	460a      	mov	r2, r1
 80001e2:	701a      	strb	r2, [r3, #0]
 80001e4:	e00d      	b.n	8000202 <button_reading+0xa6>
		}
		else if(i == 3){
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	2b03      	cmp	r3, #3
 80001ea:	d10a      	bne.n	8000202 <button_reading+0xa6>
			debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(PEDE_BUTTON_GPIO_Port, PEDE_BUTTON_Pin);
 80001ec:	2101      	movs	r1, #1
 80001ee:	483a      	ldr	r0, [pc, #232]	; (80002d8 <button_reading+0x17c>)
 80001f0:	f001 fd02 	bl	8001bf8 <HAL_GPIO_ReadPin>
 80001f4:	4603      	mov	r3, r0
 80001f6:	4619      	mov	r1, r3
 80001f8:	4a36      	ldr	r2, [pc, #216]	; (80002d4 <button_reading+0x178>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4413      	add	r3, r2
 80001fe:	460a      	mov	r2, r1
 8000200:	701a      	strb	r2, [r3, #0]
		}
		//if input is stable: 3 recently input is equal
		if(debounceButtonBuffer0[i] == debounceButtonBuffer1[i] &&
 8000202:	4a34      	ldr	r2, [pc, #208]	; (80002d4 <button_reading+0x178>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4413      	add	r3, r2
 8000208:	781a      	ldrb	r2, [r3, #0]
 800020a:	4930      	ldr	r1, [pc, #192]	; (80002cc <button_reading+0x170>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	440b      	add	r3, r1
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	429a      	cmp	r2, r3
 8000214:	d14d      	bne.n	80002b2 <button_reading+0x156>
				debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000216:	4a2d      	ldr	r2, [pc, #180]	; (80002cc <button_reading+0x170>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4413      	add	r3, r2
 800021c:	781a      	ldrb	r2, [r3, #0]
 800021e:	492c      	ldr	r1, [pc, #176]	; (80002d0 <button_reading+0x174>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	440b      	add	r3, r1
 8000224:	781b      	ldrb	r3, [r3, #0]
		if(debounceButtonBuffer0[i] == debounceButtonBuffer1[i] &&
 8000226:	429a      	cmp	r2, r3
 8000228:	d143      	bne.n	80002b2 <button_reading+0x156>
			//if input stable at present different from previous
			if(buttonBuffer[i] != debounceButtonBuffer2[i]){
 800022a:	4a2d      	ldr	r2, [pc, #180]	; (80002e0 <button_reading+0x184>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4413      	add	r3, r2
 8000230:	781a      	ldrb	r2, [r3, #0]
 8000232:	4927      	ldr	r1, [pc, #156]	; (80002d0 <button_reading+0x174>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	440b      	add	r3, r1
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	429a      	cmp	r2, r3
 800023c:	d019      	beq.n	8000272 <button_reading+0x116>
				//update input to buffer
				buttonBuffer[i] = debounceButtonBuffer2[i];
 800023e:	4a24      	ldr	r2, [pc, #144]	; (80002d0 <button_reading+0x174>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4413      	add	r3, r2
 8000244:	7819      	ldrb	r1, [r3, #0]
 8000246:	4a26      	ldr	r2, [pc, #152]	; (80002e0 <button_reading+0x184>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4413      	add	r3, r2
 800024c:	460a      	mov	r2, r1
 800024e:	701a      	strb	r2, [r3, #0]
				//if input is pressed
				if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000250:	4a23      	ldr	r2, [pc, #140]	; (80002e0 <button_reading+0x184>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4413      	add	r3, r2
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d12a      	bne.n	80002b2 <button_reading+0x156>
					//turn flag on
					flagForButtonPress[i] = 1;
 800025c:	4a21      	ldr	r2, [pc, #132]	; (80002e4 <button_reading+0x188>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4413      	add	r3, r2
 8000262:	2201      	movs	r2, #1
 8000264:	701a      	strb	r2, [r3, #0]
					//set counter
					counterForButtonPress1s[i] = DURATION_FOR_PRESSED;
 8000266:	4a20      	ldr	r2, [pc, #128]	; (80002e8 <button_reading+0x18c>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2164      	movs	r1, #100	; 0x64
 800026c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000270:	e01f      	b.n	80002b2 <button_reading+0x156>
				}
			}
			//if input is stable and no change (present = previous)
			else{
				//decrease counter
				counterForButtonPress1s[i]--;
 8000272:	4a1d      	ldr	r2, [pc, #116]	; (80002e8 <button_reading+0x18c>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800027a:	3b01      	subs	r3, #1
 800027c:	b299      	uxth	r1, r3
 800027e:	4a1a      	ldr	r2, [pc, #104]	; (80002e8 <button_reading+0x18c>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				//when counter is 0, reset counter
				//and if button is press -> turn flag1s on
				if(counterForButtonPress1s[i] == 0){
 8000286:	4a18      	ldr	r2, [pc, #96]	; (80002e8 <button_reading+0x18c>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d10f      	bne.n	80002b2 <button_reading+0x156>
					if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000292:	4a13      	ldr	r2, [pc, #76]	; (80002e0 <button_reading+0x184>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4413      	add	r3, r2
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d104      	bne.n	80002a8 <button_reading+0x14c>
						flagForButtonPress1s[i] = 1;
 800029e:	4a13      	ldr	r2, [pc, #76]	; (80002ec <button_reading+0x190>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	4413      	add	r3, r2
 80002a4:	2201      	movs	r2, #1
 80002a6:	701a      	strb	r2, [r3, #0]
					}
					counterForButtonPress1s[i] = DURATION_FOR_PRESSED;
 80002a8:	4a0f      	ldr	r2, [pc, #60]	; (80002e8 <button_reading+0x18c>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2164      	movs	r1, #100	; 0x64
 80002ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < N0_OF_BUTTONS; i ++){
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	3301      	adds	r3, #1
 80002b6:	607b      	str	r3, [r7, #4]
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b03      	cmp	r3, #3
 80002bc:	f77f af54 	ble.w	8000168 <button_reading+0xc>
				}
			}
		}
	}
}
 80002c0:	bf00      	nop
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	200000b8 	.word	0x200000b8
 80002d0:	200000bc 	.word	0x200000bc
 80002d4:	200000b4 	.word	0x200000b4
 80002d8:	40010800 	.word	0x40010800
 80002dc:	40010c00 	.word	0x40010c00
 80002e0:	200000b0 	.word	0x200000b0
 80002e4:	200000c4 	.word	0x200000c4
 80002e8:	200000c8 	.word	0x200000c8
 80002ec:	200000c0 	.word	0x200000c0

080002f0 <is_button1_pressed>:

//this function check if Mode_select_button is pressed or not
//and reset its flag
int is_button1_pressed()
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	if(flagForButtonPress[0] == 1){
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <is_button1_pressed+0x20>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d104      	bne.n	8000306 <is_button1_pressed+0x16>
		flagForButtonPress[0] = 0;
 80002fc:	4b04      	ldr	r3, [pc, #16]	; (8000310 <is_button1_pressed+0x20>)
 80002fe:	2200      	movs	r2, #0
 8000300:	701a      	strb	r2, [r3, #0]
		return 1;
 8000302:	2301      	movs	r3, #1
 8000304:	e000      	b.n	8000308 <is_button1_pressed+0x18>
	}
	return 0;
 8000306:	2300      	movs	r3, #0
}
 8000308:	4618      	mov	r0, r3
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr
 8000310:	200000c4 	.word	0x200000c4

08000314 <is_button2_pressed>:

//this fuction check if time_adjust_button is pressed or not
//and reset its flag
int is_button2_pressed()
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
	if(flagForButtonPress[1] == 1){
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <is_button2_pressed+0x20>)
 800031a:	785b      	ldrb	r3, [r3, #1]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d104      	bne.n	800032a <is_button2_pressed+0x16>
		flagForButtonPress[1] = 0;
 8000320:	4b04      	ldr	r3, [pc, #16]	; (8000334 <is_button2_pressed+0x20>)
 8000322:	2200      	movs	r2, #0
 8000324:	705a      	strb	r2, [r3, #1]
		return 1;
 8000326:	2301      	movs	r3, #1
 8000328:	e000      	b.n	800032c <is_button2_pressed+0x18>
	}
	return 0;
 800032a:	2300      	movs	r3, #0
}
 800032c:	4618      	mov	r0, r3
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	200000c4 	.word	0x200000c4

08000338 <is_button3_pressed>:

//this function check if set_button is pressed or not
//and reset its flag
int is_button3_pressed()
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
	if(flagForButtonPress[2] == 1){
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <is_button3_pressed+0x20>)
 800033e:	789b      	ldrb	r3, [r3, #2]
 8000340:	2b01      	cmp	r3, #1
 8000342:	d104      	bne.n	800034e <is_button3_pressed+0x16>
		flagForButtonPress[2] = 0;
 8000344:	4b04      	ldr	r3, [pc, #16]	; (8000358 <is_button3_pressed+0x20>)
 8000346:	2200      	movs	r2, #0
 8000348:	709a      	strb	r2, [r3, #2]
		return 1;
 800034a:	2301      	movs	r3, #1
 800034c:	e000      	b.n	8000350 <is_button3_pressed+0x18>
	}
	return 0;
 800034e:	2300      	movs	r3, #0
}
 8000350:	4618      	mov	r0, r3
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	200000c4 	.word	0x200000c4

0800035c <is_pede_button_pressed>:

//the function check if pedestrian button is pressed or not
//and reset its flag
int is_pede_button_pressed()
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
	if(flagForButtonPress[3] == 1){
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <is_pede_button_pressed+0x20>)
 8000362:	78db      	ldrb	r3, [r3, #3]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d104      	bne.n	8000372 <is_pede_button_pressed+0x16>
		flagForButtonPress[3] = 0;
 8000368:	4b04      	ldr	r3, [pc, #16]	; (800037c <is_pede_button_pressed+0x20>)
 800036a:	2200      	movs	r2, #0
 800036c:	70da      	strb	r2, [r3, #3]
		return 1;
 800036e:	2301      	movs	r3, #1
 8000370:	e000      	b.n	8000374 <is_pede_button_pressed+0x18>
	}
	return 0;
 8000372:	2300      	movs	r3, #0
}
 8000374:	4618      	mov	r0, r3
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr
 800037c:	200000c4 	.word	0x200000c4

08000380 <is_button2_press1s>:

//the function check if time_adjust_button is pressed more than 1s or not
//reset the flag and turn on again every 1s if it is keep pressing
int is_button2_press1s()
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
	if(flagForButtonPress1s[1]==1){
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <is_button2_press1s+0x20>)
 8000386:	785b      	ldrb	r3, [r3, #1]
 8000388:	2b01      	cmp	r3, #1
 800038a:	d104      	bne.n	8000396 <is_button2_press1s+0x16>
		flagForButtonPress1s[1] = 0;
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <is_button2_press1s+0x20>)
 800038e:	2200      	movs	r2, #0
 8000390:	705a      	strb	r2, [r3, #1]
		return 1;
 8000392:	2301      	movs	r3, #1
 8000394:	e000      	b.n	8000398 <is_button2_press1s+0x18>
	}
	return 0;
 8000396:	2300      	movs	r3, #0
}
 8000398:	4618      	mov	r0, r3
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	200000c0 	.word	0x200000c0

080003a4 <buzzerRun>:

const int c = (BASE_VALUE - LAST_VALUE) / BASE_TIME;
const int d = LAST_VALUE;

void buzzerRun()
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0

	green_pedes_on();
 80003a8:	f001 f80c 	bl	80013c4 <green_pedes_on>
	if (timer4_flag == 1)
 80003ac:	4b1a      	ldr	r3, [pc, #104]	; (8000418 <buzzerRun+0x74>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d12e      	bne.n	8000412 <buzzerRun+0x6e>
	{
		setTimer4(delay);
 80003b4:	4b19      	ldr	r3, [pc, #100]	; (800041c <buzzerRun+0x78>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 fd39 	bl	8000e30 <setTimer4>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, value[i]);
 80003be:	4b18      	ldr	r3, [pc, #96]	; (8000420 <buzzerRun+0x7c>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4a18      	ldr	r2, [pc, #96]	; (8000424 <buzzerRun+0x80>)
 80003c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003c8:	4b17      	ldr	r3, [pc, #92]	; (8000428 <buzzerRun+0x84>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	635a      	str	r2, [r3, #52]	; 0x34
		i = (i + 1) % 2;
 80003ce:	4b14      	ldr	r3, [pc, #80]	; (8000420 <buzzerRun+0x7c>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	3301      	adds	r3, #1
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	bfb8      	it	lt
 80003dc:	425b      	neglt	r3, r3
 80003de:	4a10      	ldr	r2, [pc, #64]	; (8000420 <buzzerRun+0x7c>)
 80003e0:	6013      	str	r3, [r2, #0]
		// This is the equation with desired coefficients
		delay = a * SEG_counter + b;
 80003e2:	2360      	movs	r3, #96	; 0x60
 80003e4:	461a      	mov	r2, r3
 80003e6:	4b11      	ldr	r3, [pc, #68]	; (800042c <buzzerRun+0x88>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	fb02 f303 	mul.w	r3, r2, r3
 80003ee:	22c8      	movs	r2, #200	; 0xc8
 80003f0:	4413      	add	r3, r2
 80003f2:	461a      	mov	r2, r3
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <buzzerRun+0x78>)
 80003f6:	601a      	str	r2, [r3, #0]
		value[0] = c * SEG_counter + d;
 80003f8:	f06f 0310 	mvn.w	r3, #16
 80003fc:	461a      	mov	r2, r3
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <buzzerRun+0x88>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	fb02 f303 	mul.w	r3, r2, r3
 8000406:	f240 32de 	movw	r2, #990	; 0x3de
 800040a:	4413      	add	r3, r2
 800040c:	461a      	mov	r2, r3
 800040e:	4b05      	ldr	r3, [pc, #20]	; (8000424 <buzzerRun+0x80>)
 8000410:	601a      	str	r2, [r3, #0]
	}
	// Delete this
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	200001cc 	.word	0x200001cc
 800041c:	20000008 	.word	0x20000008
 8000420:	200000d0 	.word	0x200000d0
 8000424:	20000000 	.word	0x20000000
 8000428:	2000016c 	.word	0x2000016c
 800042c:	200000d8 	.word	0x200000d8

08000430 <fsm_automatic_run>:
 * Timer1: control time of road1
 * Timer2: control time of road2
 * Timer3: count down for uart in auto
 */
void fsm_automatic_run()
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0

	switch(state)
 8000434:	4ba9      	ldr	r3, [pc, #676]	; (80006dc <fsm_automatic_run+0x2ac>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b05      	cmp	r3, #5
 800043a:	f200 81d4 	bhi.w	80007e6 <fsm_automatic_run+0x3b6>
 800043e:	a201      	add	r2, pc, #4	; (adr r2, 8000444 <fsm_automatic_run+0x14>)
 8000440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000444:	0800045d 	.word	0x0800045d
 8000448:	080004eb 	.word	0x080004eb
 800044c:	0800058d 	.word	0x0800058d
 8000450:	080007e7 	.word	0x080007e7
 8000454:	08000639 	.word	0x08000639
 8000458:	08000709 	.word	0x08000709
	{
	case INIT:
		if(yellow_time + green_time != red_time){
 800045c:	4ba0      	ldr	r3, [pc, #640]	; (80006e0 <fsm_automatic_run+0x2b0>)
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	4ba0      	ldr	r3, [pc, #640]	; (80006e4 <fsm_automatic_run+0x2b4>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	441a      	add	r2, r3
 8000466:	4ba0      	ldr	r3, [pc, #640]	; (80006e8 <fsm_automatic_run+0x2b8>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	429a      	cmp	r2, r3
 800046c:	d01d      	beq.n	80004aa <fsm_automatic_run+0x7a>
			//error state
			//trap here until mode_button is pressed
			//and go to RED_ADJUST mode to change value again
			turn_all_led_off();
 800046e:	f000 ffbd 	bl	80013ec <turn_all_led_off>
			if(is_button1_pressed()){
 8000472:	f7ff ff3d 	bl	80002f0 <is_button1_pressed>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	f000 81b6 	beq.w	80007ea <fsm_automatic_run+0x3ba>
				state = RED_ADJUST;
 800047e:	4b97      	ldr	r3, [pc, #604]	; (80006dc <fsm_automatic_run+0x2ac>)
 8000480:	220b      	movs	r2, #11
 8000482:	701a      	strb	r2, [r3, #0]
				red1_on();
 8000484:	f000 ff32 	bl	80012ec <red1_on>
				red2_on();
 8000488:	f000 ff44 	bl	8001314 <red2_on>
				//display temp time
				SEG_counter = temp_red_time/1000;
 800048c:	4b97      	ldr	r3, [pc, #604]	; (80006ec <fsm_automatic_run+0x2bc>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a97      	ldr	r2, [pc, #604]	; (80006f0 <fsm_automatic_run+0x2c0>)
 8000492:	fba2 2303 	umull	r2, r3, r2, r3
 8000496:	099b      	lsrs	r3, r3, #6
 8000498:	4a96      	ldr	r2, [pc, #600]	; (80006f4 <fsm_automatic_run+0x2c4>)
 800049a:	6013      	str	r3, [r2, #0]
				UART_Parse();
 800049c:	f000 ffc4 	bl	8001428 <UART_Parse>
				//reset all button flag
				is_button2_pressed();
 80004a0:	f7ff ff38 	bl	8000314 <is_button2_pressed>
				is_button3_pressed();
 80004a4:	f7ff ff48 	bl	8000338 <is_button3_pressed>
			}
			break;
 80004a8:	e19f      	b.n	80007ea <fsm_automatic_run+0x3ba>
		}
		//no error, prepare for changing to S1

		//send time via uart
		SEG_counter = green_time/1000;
 80004aa:	4b8e      	ldr	r3, [pc, #568]	; (80006e4 <fsm_automatic_run+0x2b4>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a90      	ldr	r2, [pc, #576]	; (80006f0 <fsm_automatic_run+0x2c0>)
 80004b0:	fba2 2303 	umull	r2, r3, r2, r3
 80004b4:	099b      	lsrs	r3, r3, #6
 80004b6:	4a8f      	ldr	r2, [pc, #572]	; (80006f4 <fsm_automatic_run+0x2c4>)
 80004b8:	6013      	str	r3, [r2, #0]
		UART_Parse();
 80004ba:	f000 ffb5 	bl	8001428 <UART_Parse>

		setTimer4(1000);// Init the counter
 80004be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004c2:	f000 fcb5 	bl	8000e30 <setTimer4>
		setTimer1(green_time);
 80004c6:	4b87      	ldr	r3, [pc, #540]	; (80006e4 <fsm_automatic_run+0x2b4>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 fc68 	bl	8000da0 <setTimer1>
		setTimer2(red_time);
 80004d0:	4b85      	ldr	r3, [pc, #532]	; (80006e8 <fsm_automatic_run+0x2b8>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4618      	mov	r0, r3
 80004d6:	f000 fc7b 	bl	8000dd0 <setTimer2>
		setTimer3(1000);
 80004da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004de:	f000 fc8f 	bl	8000e00 <setTimer3>
		state = S1;
 80004e2:	4b7e      	ldr	r3, [pc, #504]	; (80006dc <fsm_automatic_run+0x2ac>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	701a      	strb	r2, [r3, #0]
		break;
 80004e8:	e188      	b.n	80007fc <fsm_automatic_run+0x3cc>
	case S1:
		green1_on();
 80004ea:	f000 ff23 	bl	8001334 <green1_on>
		red2_on();
 80004ee:	f000 ff11 	bl	8001314 <red2_on>
		//uart count down
		if(timer3_flag == 1){
 80004f2:	4b81      	ldr	r3, [pc, #516]	; (80006f8 <fsm_automatic_run+0x2c8>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d10a      	bne.n	8000510 <fsm_automatic_run+0xe0>
			SEG_counter--;
 80004fa:	4b7e      	ldr	r3, [pc, #504]	; (80006f4 <fsm_automatic_run+0x2c4>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	3b01      	subs	r3, #1
 8000500:	4a7c      	ldr	r2, [pc, #496]	; (80006f4 <fsm_automatic_run+0x2c4>)
 8000502:	6013      	str	r3, [r2, #0]
			UART_Parse();
 8000504:	f000 ff90 	bl	8001428 <UART_Parse>
			setTimer3(1000);
 8000508:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800050c:	f000 fc78 	bl	8000e00 <setTimer3>
		}

		//road1 timeout -> turn to state S2
		if(timer1_flag == 1){
 8000510:	4b7a      	ldr	r3, [pc, #488]	; (80006fc <fsm_automatic_run+0x2cc>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d115      	bne.n	8000544 <fsm_automatic_run+0x114>
			setTimer1(yellow_time);
 8000518:	4b71      	ldr	r3, [pc, #452]	; (80006e0 <fsm_automatic_run+0x2b0>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4618      	mov	r0, r3
 800051e:	f000 fc3f 	bl	8000da0 <setTimer1>
			state = S2;
 8000522:	4b6e      	ldr	r3, [pc, #440]	; (80006dc <fsm_automatic_run+0x2ac>)
 8000524:	2202      	movs	r2, #2
 8000526:	701a      	strb	r2, [r3, #0]
			SEG_counter = yellow_time/1000;
 8000528:	4b6d      	ldr	r3, [pc, #436]	; (80006e0 <fsm_automatic_run+0x2b0>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a70      	ldr	r2, [pc, #448]	; (80006f0 <fsm_automatic_run+0x2c0>)
 800052e:	fba2 2303 	umull	r2, r3, r2, r3
 8000532:	099b      	lsrs	r3, r3, #6
 8000534:	4a6f      	ldr	r2, [pc, #444]	; (80006f4 <fsm_automatic_run+0x2c4>)
 8000536:	6013      	str	r3, [r2, #0]
			UART_Parse();
 8000538:	f000 ff76 	bl	8001428 <UART_Parse>
			setTimer3(1000);
 800053c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000540:	f000 fc5e 	bl	8000e00 <setTimer3>
		}

		//Mode_button is pressed -> turn to manual: RED_ADJUST
		if(is_button1_pressed()){
 8000544:	f7ff fed4 	bl	80002f0 <is_button1_pressed>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d014      	beq.n	8000578 <fsm_automatic_run+0x148>
			state = RED_ADJUST;
 800054e:	4b63      	ldr	r3, [pc, #396]	; (80006dc <fsm_automatic_run+0x2ac>)
 8000550:	220b      	movs	r2, #11
 8000552:	701a      	strb	r2, [r3, #0]
			red1_on();
 8000554:	f000 feca 	bl	80012ec <red1_on>
			red2_on();
 8000558:	f000 fedc 	bl	8001314 <red2_on>
			//display temp time
			SEG_counter = temp_red_time/1000;
 800055c:	4b63      	ldr	r3, [pc, #396]	; (80006ec <fsm_automatic_run+0x2bc>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a63      	ldr	r2, [pc, #396]	; (80006f0 <fsm_automatic_run+0x2c0>)
 8000562:	fba2 2303 	umull	r2, r3, r2, r3
 8000566:	099b      	lsrs	r3, r3, #6
 8000568:	4a62      	ldr	r2, [pc, #392]	; (80006f4 <fsm_automatic_run+0x2c4>)
 800056a:	6013      	str	r3, [r2, #0]
			UART_Parse();
 800056c:	f000 ff5c 	bl	8001428 <UART_Parse>
			//reset all button flag
			is_button2_pressed();
 8000570:	f7ff fed0 	bl	8000314 <is_button2_pressed>
			is_button3_pressed();
 8000574:	f7ff fee0 	bl	8000338 <is_button3_pressed>
		}

		// Pedes light
		if (is_pede_button_pressed())
 8000578:	f7ff fef0 	bl	800035c <is_pede_button_pressed>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	f000 8135 	beq.w	80007ee <fsm_automatic_run+0x3be>
		{
			mode_flag = 1;
 8000584:	4b5e      	ldr	r3, [pc, #376]	; (8000700 <fsm_automatic_run+0x2d0>)
 8000586:	2201      	movs	r2, #1
 8000588:	601a      	str	r2, [r3, #0]
		}
		break;
 800058a:	e130      	b.n	80007ee <fsm_automatic_run+0x3be>
	case S2:
		yellow1_on();
 800058c:	f000 fef6 	bl	800137c <yellow1_on>
		red2_on();
 8000590:	f000 fec0 	bl	8001314 <red2_on>

		//uart count down
		if(timer3_flag == 1){
 8000594:	4b58      	ldr	r3, [pc, #352]	; (80006f8 <fsm_automatic_run+0x2c8>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d10a      	bne.n	80005b2 <fsm_automatic_run+0x182>
			SEG_counter--;
 800059c:	4b55      	ldr	r3, [pc, #340]	; (80006f4 <fsm_automatic_run+0x2c4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	3b01      	subs	r3, #1
 80005a2:	4a54      	ldr	r2, [pc, #336]	; (80006f4 <fsm_automatic_run+0x2c4>)
 80005a4:	6013      	str	r3, [r2, #0]
			UART_Parse();
 80005a6:	f000 ff3f 	bl	8001428 <UART_Parse>
			setTimer3(1000);
 80005aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ae:	f000 fc27 	bl	8000e00 <setTimer3>
		}

		//road1 timeout -> turn to state S3
		if(timer1_flag == 1){
 80005b2:	4b52      	ldr	r3, [pc, #328]	; (80006fc <fsm_automatic_run+0x2cc>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d11a      	bne.n	80005f0 <fsm_automatic_run+0x1c0>
			setTimer1(red_time);
 80005ba:	4b4b      	ldr	r3, [pc, #300]	; (80006e8 <fsm_automatic_run+0x2b8>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 fbee 	bl	8000da0 <setTimer1>
			setTimer2(green_time);
 80005c4:	4b47      	ldr	r3, [pc, #284]	; (80006e4 <fsm_automatic_run+0x2b4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fc01 	bl	8000dd0 <setTimer2>
			state = S3;
 80005ce:	4b43      	ldr	r3, [pc, #268]	; (80006dc <fsm_automatic_run+0x2ac>)
 80005d0:	2204      	movs	r2, #4
 80005d2:	701a      	strb	r2, [r3, #0]

			SEG_counter = red_time/1000;
 80005d4:	4b44      	ldr	r3, [pc, #272]	; (80006e8 <fsm_automatic_run+0x2b8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a45      	ldr	r2, [pc, #276]	; (80006f0 <fsm_automatic_run+0x2c0>)
 80005da:	fba2 2303 	umull	r2, r3, r2, r3
 80005de:	099b      	lsrs	r3, r3, #6
 80005e0:	4a44      	ldr	r2, [pc, #272]	; (80006f4 <fsm_automatic_run+0x2c4>)
 80005e2:	6013      	str	r3, [r2, #0]
			UART_Parse();
 80005e4:	f000 ff20 	bl	8001428 <UART_Parse>
			setTimer3(1000);
 80005e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ec:	f000 fc08 	bl	8000e00 <setTimer3>
		}


		//Mode_button is pressed -> turn to RED_ADJUST
		if(is_button1_pressed()){
 80005f0:	f7ff fe7e 	bl	80002f0 <is_button1_pressed>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d014      	beq.n	8000624 <fsm_automatic_run+0x1f4>
			state = RED_ADJUST;
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <fsm_automatic_run+0x2ac>)
 80005fc:	220b      	movs	r2, #11
 80005fe:	701a      	strb	r2, [r3, #0]
			red1_on();
 8000600:	f000 fe74 	bl	80012ec <red1_on>
			red2_on();
 8000604:	f000 fe86 	bl	8001314 <red2_on>
			//display temp time
			SEG_counter = temp_red_time/1000;
 8000608:	4b38      	ldr	r3, [pc, #224]	; (80006ec <fsm_automatic_run+0x2bc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a38      	ldr	r2, [pc, #224]	; (80006f0 <fsm_automatic_run+0x2c0>)
 800060e:	fba2 2303 	umull	r2, r3, r2, r3
 8000612:	099b      	lsrs	r3, r3, #6
 8000614:	4a37      	ldr	r2, [pc, #220]	; (80006f4 <fsm_automatic_run+0x2c4>)
 8000616:	6013      	str	r3, [r2, #0]
			UART_Parse();
 8000618:	f000 ff06 	bl	8001428 <UART_Parse>
			//reset all button flag
			is_button2_pressed();
 800061c:	f7ff fe7a 	bl	8000314 <is_button2_pressed>
			is_button3_pressed();
 8000620:	f7ff fe8a 	bl	8000338 <is_button3_pressed>
		}

		// Pedes light
		if (is_pede_button_pressed())
 8000624:	f7ff fe9a 	bl	800035c <is_pede_button_pressed>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	f000 80e1 	beq.w	80007f2 <fsm_automatic_run+0x3c2>
		{
			mode_flag = 1;
 8000630:	4b33      	ldr	r3, [pc, #204]	; (8000700 <fsm_automatic_run+0x2d0>)
 8000632:	2201      	movs	r2, #1
 8000634:	601a      	str	r2, [r3, #0]
		}

		break;
 8000636:	e0dc      	b.n	80007f2 <fsm_automatic_run+0x3c2>
	case S3:
		red1_on();
 8000638:	f000 fe58 	bl	80012ec <red1_on>
		green2_on();
 800063c:	f000 fe8e 	bl	800135c <green2_on>

		//uart count down
		if(timer3_flag == 1){
 8000640:	4b2d      	ldr	r3, [pc, #180]	; (80006f8 <fsm_automatic_run+0x2c8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d10a      	bne.n	800065e <fsm_automatic_run+0x22e>
			SEG_counter--;
 8000648:	4b2a      	ldr	r3, [pc, #168]	; (80006f4 <fsm_automatic_run+0x2c4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	3b01      	subs	r3, #1
 800064e:	4a29      	ldr	r2, [pc, #164]	; (80006f4 <fsm_automatic_run+0x2c4>)
 8000650:	6013      	str	r3, [r2, #0]
			UART_Parse();
 8000652:	f000 fee9 	bl	8001428 <UART_Parse>
			setTimer3(1000);
 8000656:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065a:	f000 fbd1 	bl	8000e00 <setTimer3>
		}

		//road2 timeout -> turn to state S4
		if(timer2_flag == 1){
 800065e:	4b29      	ldr	r3, [pc, #164]	; (8000704 <fsm_automatic_run+0x2d4>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d107      	bne.n	8000676 <fsm_automatic_run+0x246>
			setTimer2(yellow_time);
 8000666:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <fsm_automatic_run+0x2b0>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4618      	mov	r0, r3
 800066c:	f000 fbb0 	bl	8000dd0 <setTimer2>
			state = S4;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <fsm_automatic_run+0x2ac>)
 8000672:	2205      	movs	r2, #5
 8000674:	701a      	strb	r2, [r3, #0]
		}

		//Mode_button is pressed -> turn to manual RED_ADJUST
		if(is_button1_pressed()){
 8000676:	f7ff fe3b 	bl	80002f0 <is_button1_pressed>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d014      	beq.n	80006aa <fsm_automatic_run+0x27a>
			state = RED_ADJUST;
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <fsm_automatic_run+0x2ac>)
 8000682:	220b      	movs	r2, #11
 8000684:	701a      	strb	r2, [r3, #0]
			red1_on();
 8000686:	f000 fe31 	bl	80012ec <red1_on>
			red2_on();
 800068a:	f000 fe43 	bl	8001314 <red2_on>
			//display temp time
			SEG_counter = temp_red_time/1000;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <fsm_automatic_run+0x2bc>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <fsm_automatic_run+0x2c0>)
 8000694:	fba2 2303 	umull	r2, r3, r2, r3
 8000698:	099b      	lsrs	r3, r3, #6
 800069a:	4a16      	ldr	r2, [pc, #88]	; (80006f4 <fsm_automatic_run+0x2c4>)
 800069c:	6013      	str	r3, [r2, #0]
			UART_Parse();
 800069e:	f000 fec3 	bl	8001428 <UART_Parse>
			//reset all button flag
			is_button2_pressed();
 80006a2:	f7ff fe37 	bl	8000314 <is_button2_pressed>
			is_button3_pressed();
 80006a6:	f7ff fe47 	bl	8000338 <is_button3_pressed>
		}

		// Pedes light
		if (is_pede_button_pressed())
 80006aa:	f7ff fe57 	bl	800035c <is_pede_button_pressed>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d00a      	beq.n	80006ca <fsm_automatic_run+0x29a>
		{
			if (mode_flag == 0)
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <fsm_automatic_run+0x2d0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d103      	bne.n	80006c4 <fsm_automatic_run+0x294>
				mode_flag = 1;
 80006bc:	4b10      	ldr	r3, [pc, #64]	; (8000700 <fsm_automatic_run+0x2d0>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	e002      	b.n	80006ca <fsm_automatic_run+0x29a>
			else
				mode_flag = 0;
 80006c4:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <fsm_automatic_run+0x2d0>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
		}

		if (mode_flag == 1)
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <fsm_automatic_run+0x2d0>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	f040 8091 	bne.w	80007f6 <fsm_automatic_run+0x3c6>
		{
			buzzerRun();
 80006d4:	f7ff fe66 	bl	80003a4 <buzzerRun>
		}

		break;
 80006d8:	e08d      	b.n	80007f6 <fsm_automatic_run+0x3c6>
 80006da:	bf00      	nop
 80006dc:	200000dc 	.word	0x200000dc
 80006e0:	20000014 	.word	0x20000014
 80006e4:	20000010 	.word	0x20000010
 80006e8:	2000000c 	.word	0x2000000c
 80006ec:	20000018 	.word	0x20000018
 80006f0:	10624dd3 	.word	0x10624dd3
 80006f4:	200000d8 	.word	0x200000d8
 80006f8:	200001c4 	.word	0x200001c4
 80006fc:	200001b4 	.word	0x200001b4
 8000700:	200000d4 	.word	0x200000d4
 8000704:	200001bc 	.word	0x200001bc
	case S4:
		red1_on();
 8000708:	f000 fdf0 	bl	80012ec <red1_on>
		yellow2_on();
 800070c:	f000 fe4a 	bl	80013a4 <yellow2_on>

		//uart count down
		if(timer3_flag == 1){
 8000710:	4b3b      	ldr	r3, [pc, #236]	; (8000800 <fsm_automatic_run+0x3d0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d10a      	bne.n	800072e <fsm_automatic_run+0x2fe>
			SEG_counter--;
 8000718:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <fsm_automatic_run+0x3d4>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	3b01      	subs	r3, #1
 800071e:	4a39      	ldr	r2, [pc, #228]	; (8000804 <fsm_automatic_run+0x3d4>)
 8000720:	6013      	str	r3, [r2, #0]
			UART_Parse();
 8000722:	f000 fe81 	bl	8001428 <UART_Parse>
			setTimer3(1000);
 8000726:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800072a:	f000 fb69 	bl	8000e00 <setTimer3>
		}

		//road2 timeout -> turn to state S1
		if(timer2_flag == 1){
 800072e:	4b36      	ldr	r3, [pc, #216]	; (8000808 <fsm_automatic_run+0x3d8>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d126      	bne.n	8000784 <fsm_automatic_run+0x354>
			setTimer1(green_time);
 8000736:	4b35      	ldr	r3, [pc, #212]	; (800080c <fsm_automatic_run+0x3dc>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fb30 	bl	8000da0 <setTimer1>
			setTimer2(red_time);
 8000740:	4b33      	ldr	r3, [pc, #204]	; (8000810 <fsm_automatic_run+0x3e0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fb43 	bl	8000dd0 <setTimer2>
			state = S1;
 800074a:	4b32      	ldr	r3, [pc, #200]	; (8000814 <fsm_automatic_run+0x3e4>)
 800074c:	2201      	movs	r2, #1
 800074e:	701a      	strb	r2, [r3, #0]

			// Turn off pedes light
			HAL_GPIO_WritePin(PEDE_LIGHT_A_GPIO_Port, PEDE_LIGHT_A_Pin, RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000756:	4830      	ldr	r0, [pc, #192]	; (8000818 <fsm_automatic_run+0x3e8>)
 8000758:	f001 fa65 	bl	8001c26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PEDE_LIGHT_B_GPIO_Port, PEDE_LIGHT_B_Pin, RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000762:	482e      	ldr	r0, [pc, #184]	; (800081c <fsm_automatic_run+0x3ec>)
 8000764:	f001 fa5f 	bl	8001c26 <HAL_GPIO_WritePin>

			SEG_counter = green_time/1000;
 8000768:	4b28      	ldr	r3, [pc, #160]	; (800080c <fsm_automatic_run+0x3dc>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a2c      	ldr	r2, [pc, #176]	; (8000820 <fsm_automatic_run+0x3f0>)
 800076e:	fba2 2303 	umull	r2, r3, r2, r3
 8000772:	099b      	lsrs	r3, r3, #6
 8000774:	4a23      	ldr	r2, [pc, #140]	; (8000804 <fsm_automatic_run+0x3d4>)
 8000776:	6013      	str	r3, [r2, #0]
			UART_Parse();
 8000778:	f000 fe56 	bl	8001428 <UART_Parse>
			setTimer3(1000);
 800077c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000780:	f000 fb3e 	bl	8000e00 <setTimer3>
		}

		//Mode_button is pressed -> turn to manual RED_ADJUST
		if(is_button1_pressed()){
 8000784:	f7ff fdb4 	bl	80002f0 <is_button1_pressed>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d014      	beq.n	80007b8 <fsm_automatic_run+0x388>
			state = RED_ADJUST;
 800078e:	4b21      	ldr	r3, [pc, #132]	; (8000814 <fsm_automatic_run+0x3e4>)
 8000790:	220b      	movs	r2, #11
 8000792:	701a      	strb	r2, [r3, #0]
			red1_on();
 8000794:	f000 fdaa 	bl	80012ec <red1_on>
			red2_on();
 8000798:	f000 fdbc 	bl	8001314 <red2_on>
			//display temp time
			SEG_counter = temp_red_time/1000;
 800079c:	4b21      	ldr	r3, [pc, #132]	; (8000824 <fsm_automatic_run+0x3f4>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a1f      	ldr	r2, [pc, #124]	; (8000820 <fsm_automatic_run+0x3f0>)
 80007a2:	fba2 2303 	umull	r2, r3, r2, r3
 80007a6:	099b      	lsrs	r3, r3, #6
 80007a8:	4a16      	ldr	r2, [pc, #88]	; (8000804 <fsm_automatic_run+0x3d4>)
 80007aa:	6013      	str	r3, [r2, #0]
			UART_Parse();
 80007ac:	f000 fe3c 	bl	8001428 <UART_Parse>
			//reset all button flag
			is_button2_pressed();
 80007b0:	f7ff fdb0 	bl	8000314 <is_button2_pressed>
			is_button3_pressed();
 80007b4:	f7ff fdc0 	bl	8000338 <is_button3_pressed>
		}

		// Pedes light
		if (is_pede_button_pressed())
 80007b8:	f7ff fdd0 	bl	800035c <is_pede_button_pressed>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d00a      	beq.n	80007d8 <fsm_automatic_run+0x3a8>
		{
			if (mode_flag == 0)
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <fsm_automatic_run+0x3f8>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d103      	bne.n	80007d2 <fsm_automatic_run+0x3a2>
				mode_flag = 1;
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <fsm_automatic_run+0x3f8>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	e002      	b.n	80007d8 <fsm_automatic_run+0x3a8>
			else
				mode_flag = 0;
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <fsm_automatic_run+0x3f8>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
		}

		if (mode_flag == 1)
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <fsm_automatic_run+0x3f8>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d10c      	bne.n	80007fa <fsm_automatic_run+0x3ca>
		{
			buzzerRun();
 80007e0:	f7ff fde0 	bl	80003a4 <buzzerRun>
		}
		break;
 80007e4:	e009      	b.n	80007fa <fsm_automatic_run+0x3ca>
	default:
		break;
 80007e6:	bf00      	nop
 80007e8:	e008      	b.n	80007fc <fsm_automatic_run+0x3cc>
			break;
 80007ea:	bf00      	nop
 80007ec:	e006      	b.n	80007fc <fsm_automatic_run+0x3cc>
		break;
 80007ee:	bf00      	nop
 80007f0:	e004      	b.n	80007fc <fsm_automatic_run+0x3cc>
		break;
 80007f2:	bf00      	nop
 80007f4:	e002      	b.n	80007fc <fsm_automatic_run+0x3cc>
		break;
 80007f6:	bf00      	nop
 80007f8:	e000      	b.n	80007fc <fsm_automatic_run+0x3cc>
		break;
 80007fa:	bf00      	nop
	}
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200001c4 	.word	0x200001c4
 8000804:	200000d8 	.word	0x200000d8
 8000808:	200001bc 	.word	0x200001bc
 800080c:	20000010 	.word	0x20000010
 8000810:	2000000c 	.word	0x2000000c
 8000814:	200000dc 	.word	0x200000dc
 8000818:	40010c00 	.word	0x40010c00
 800081c:	40010800 	.word	0x40010800
 8000820:	10624dd3 	.word	0x10624dd3
 8000824:	20000018 	.word	0x20000018
 8000828:	200000d4 	.word	0x200000d4

0800082c <fsm_manual_run>:
 * Button1: change mode AUTO -> RED_ADJUST -> YELLOW_ADJUST -> GREEN_ADJUST
 * Button2: change time corresponding to mode
 * Button3: save time
 */
void fsm_manual_run()
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	switch(state)
 8000830:	4b71      	ldr	r3, [pc, #452]	; (80009f8 <fsm_manual_run+0x1cc>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b0d      	cmp	r3, #13
 8000836:	d052      	beq.n	80008de <fsm_manual_run+0xb2>
 8000838:	2b0d      	cmp	r3, #13
 800083a:	f300 80d4 	bgt.w	80009e6 <fsm_manual_run+0x1ba>
 800083e:	2b0b      	cmp	r3, #11
 8000840:	f000 8088 	beq.w	8000954 <fsm_manual_run+0x128>
 8000844:	2b0c      	cmp	r3, #12
 8000846:	f040 80ce 	bne.w	80009e6 <fsm_manual_run+0x1ba>
	{
	case YELLOW_ADJUST:
		yellow_blink();
 800084a:	f000 fd2b 	bl	80012a4 <yellow_blink>

		//when time_button pressed -> increase time by 1
		//when keep pressing -> increase 1 every 1 second
		//range of time is [1-30]
		if(is_button2_pressed() || is_button2_press1s()){
 800084e:	f7ff fd61 	bl	8000314 <is_button2_pressed>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d104      	bne.n	8000862 <fsm_manual_run+0x36>
 8000858:	f7ff fd92 	bl	8000380 <is_button2_press1s>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d018      	beq.n	8000894 <fsm_manual_run+0x68>
			temp_yellow_time = temp_yellow_time% 30000 + 1000;
 8000862:	4b66      	ldr	r3, [pc, #408]	; (80009fc <fsm_manual_run+0x1d0>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	4b66      	ldr	r3, [pc, #408]	; (8000a00 <fsm_manual_run+0x1d4>)
 8000868:	fba3 1302 	umull	r1, r3, r3, r2
 800086c:	0b5b      	lsrs	r3, r3, #13
 800086e:	f247 5130 	movw	r1, #30000	; 0x7530
 8000872:	fb01 f303 	mul.w	r3, r1, r3
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800087c:	4a5f      	ldr	r2, [pc, #380]	; (80009fc <fsm_manual_run+0x1d0>)
 800087e:	6013      	str	r3, [r2, #0]
			SEG_counter = temp_yellow_time/1000;
 8000880:	4b5e      	ldr	r3, [pc, #376]	; (80009fc <fsm_manual_run+0x1d0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a5f      	ldr	r2, [pc, #380]	; (8000a04 <fsm_manual_run+0x1d8>)
 8000886:	fba2 2303 	umull	r2, r3, r2, r3
 800088a:	099b      	lsrs	r3, r3, #6
 800088c:	4a5e      	ldr	r2, [pc, #376]	; (8000a08 <fsm_manual_run+0x1dc>)
 800088e:	6013      	str	r3, [r2, #0]
			UART_Parse();
 8000890:	f000 fdca 	bl	8001428 <UART_Parse>
		}

		//set_button is pressed -> save temp value
		if(is_button3_pressed()){
 8000894:	f7ff fd50 	bl	8000338 <is_button3_pressed>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d003      	beq.n	80008a6 <fsm_manual_run+0x7a>
			yellow_time = temp_yellow_time;
 800089e:	4b57      	ldr	r3, [pc, #348]	; (80009fc <fsm_manual_run+0x1d0>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a5a      	ldr	r2, [pc, #360]	; (8000a0c <fsm_manual_run+0x1e0>)
 80008a4:	6013      	str	r3, [r2, #0]
		}

		//Mode_button is pressed -> turn to GREEN_ADJUST
		if(is_button1_pressed()){
 80008a6:	f7ff fd23 	bl	80002f0 <is_button1_pressed>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	f000 809c 	beq.w	80009ea <fsm_manual_run+0x1be>
			state = GREEN_ADJUST;
 80008b2:	4b51      	ldr	r3, [pc, #324]	; (80009f8 <fsm_manual_run+0x1cc>)
 80008b4:	220d      	movs	r2, #13
 80008b6:	701a      	strb	r2, [r3, #0]
			green1_on();
 80008b8:	f000 fd3c 	bl	8001334 <green1_on>
			green2_on();
 80008bc:	f000 fd4e 	bl	800135c <green2_on>
			//reset all button flag
			is_button2_pressed();
 80008c0:	f7ff fd28 	bl	8000314 <is_button2_pressed>
			is_button3_pressed();
 80008c4:	f7ff fd38 	bl	8000338 <is_button3_pressed>

			SEG_counter = temp_green_time/1000;
 80008c8:	4b51      	ldr	r3, [pc, #324]	; (8000a10 <fsm_manual_run+0x1e4>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a4d      	ldr	r2, [pc, #308]	; (8000a04 <fsm_manual_run+0x1d8>)
 80008ce:	fba2 2303 	umull	r2, r3, r2, r3
 80008d2:	099b      	lsrs	r3, r3, #6
 80008d4:	4a4c      	ldr	r2, [pc, #304]	; (8000a08 <fsm_manual_run+0x1dc>)
 80008d6:	6013      	str	r3, [r2, #0]
			UART_Parse();
 80008d8:	f000 fda6 	bl	8001428 <UART_Parse>
		}
		break;
 80008dc:	e085      	b.n	80009ea <fsm_manual_run+0x1be>
	case GREEN_ADJUST:
		green_blink();
 80008de:	f000 fcad 	bl	800123c <green_blink>

		//when time_button pressed -> increase time by 1
		//when keep pressing -> increase 1 every 1 second
		//range of time is [1-30]
		if(is_button2_pressed() || is_button2_press1s()){
 80008e2:	f7ff fd17 	bl	8000314 <is_button2_pressed>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d104      	bne.n	80008f6 <fsm_manual_run+0xca>
 80008ec:	f7ff fd48 	bl	8000380 <is_button2_press1s>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d018      	beq.n	8000928 <fsm_manual_run+0xfc>
			temp_green_time = temp_green_time% 30000 + 1000;
 80008f6:	4b46      	ldr	r3, [pc, #280]	; (8000a10 <fsm_manual_run+0x1e4>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	4b41      	ldr	r3, [pc, #260]	; (8000a00 <fsm_manual_run+0x1d4>)
 80008fc:	fba3 1302 	umull	r1, r3, r3, r2
 8000900:	0b5b      	lsrs	r3, r3, #13
 8000902:	f247 5130 	movw	r1, #30000	; 0x7530
 8000906:	fb01 f303 	mul.w	r3, r1, r3
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000910:	4a3f      	ldr	r2, [pc, #252]	; (8000a10 <fsm_manual_run+0x1e4>)
 8000912:	6013      	str	r3, [r2, #0]
			SEG_counter = temp_green_time/1000;
 8000914:	4b3e      	ldr	r3, [pc, #248]	; (8000a10 <fsm_manual_run+0x1e4>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a3a      	ldr	r2, [pc, #232]	; (8000a04 <fsm_manual_run+0x1d8>)
 800091a:	fba2 2303 	umull	r2, r3, r2, r3
 800091e:	099b      	lsrs	r3, r3, #6
 8000920:	4a39      	ldr	r2, [pc, #228]	; (8000a08 <fsm_manual_run+0x1dc>)
 8000922:	6013      	str	r3, [r2, #0]
			UART_Parse();
 8000924:	f000 fd80 	bl	8001428 <UART_Parse>
		}

		//set_button is pressed -> save temp value
		if(is_button3_pressed()){
 8000928:	f7ff fd06 	bl	8000338 <is_button3_pressed>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d003      	beq.n	800093a <fsm_manual_run+0x10e>
			green_time = temp_green_time;
 8000932:	4b37      	ldr	r3, [pc, #220]	; (8000a10 <fsm_manual_run+0x1e4>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a37      	ldr	r2, [pc, #220]	; (8000a14 <fsm_manual_run+0x1e8>)
 8000938:	6013      	str	r3, [r2, #0]
		}

		//Mode_button is pressed -> turn to INIT
		if(is_button1_pressed()){
 800093a:	f7ff fcd9 	bl	80002f0 <is_button1_pressed>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d054      	beq.n	80009ee <fsm_manual_run+0x1c2>
			state = INIT;
 8000944:	4b2c      	ldr	r3, [pc, #176]	; (80009f8 <fsm_manual_run+0x1cc>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
			//reset all button flag
			is_button2_pressed();
 800094a:	f7ff fce3 	bl	8000314 <is_button2_pressed>
			is_button3_pressed();
 800094e:	f7ff fcf3 	bl	8000338 <is_button3_pressed>
		}
		break;
 8000952:	e04c      	b.n	80009ee <fsm_manual_run+0x1c2>
	case RED_ADJUST:
		red_blink();
 8000954:	f000 fc8a 	bl	800126c <red_blink>
		//when time_button pressed -> increase time by 1
		//when keep pressing -> increase 1 every 1 second
		//range of time is [1-30]
		if(is_button2_pressed() || is_button2_press1s()){
 8000958:	f7ff fcdc 	bl	8000314 <is_button2_pressed>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d104      	bne.n	800096c <fsm_manual_run+0x140>
 8000962:	f7ff fd0d 	bl	8000380 <is_button2_press1s>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d018      	beq.n	800099e <fsm_manual_run+0x172>
			temp_red_time = temp_red_time% 30000 + 1000;
 800096c:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <fsm_manual_run+0x1ec>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <fsm_manual_run+0x1d4>)
 8000972:	fba3 1302 	umull	r1, r3, r3, r2
 8000976:	0b5b      	lsrs	r3, r3, #13
 8000978:	f247 5130 	movw	r1, #30000	; 0x7530
 800097c:	fb01 f303 	mul.w	r3, r1, r3
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000986:	4a24      	ldr	r2, [pc, #144]	; (8000a18 <fsm_manual_run+0x1ec>)
 8000988:	6013      	str	r3, [r2, #0]
			SEG_counter = temp_red_time/1000;
 800098a:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <fsm_manual_run+0x1ec>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a1d      	ldr	r2, [pc, #116]	; (8000a04 <fsm_manual_run+0x1d8>)
 8000990:	fba2 2303 	umull	r2, r3, r2, r3
 8000994:	099b      	lsrs	r3, r3, #6
 8000996:	4a1c      	ldr	r2, [pc, #112]	; (8000a08 <fsm_manual_run+0x1dc>)
 8000998:	6013      	str	r3, [r2, #0]
			UART_Parse();
 800099a:	f000 fd45 	bl	8001428 <UART_Parse>
		}
		//set_button is pressed -> save temp value
		if(is_button3_pressed()){
 800099e:	f7ff fccb 	bl	8000338 <is_button3_pressed>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d003      	beq.n	80009b0 <fsm_manual_run+0x184>
			red_time = temp_red_time;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <fsm_manual_run+0x1ec>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a1b      	ldr	r2, [pc, #108]	; (8000a1c <fsm_manual_run+0x1f0>)
 80009ae:	6013      	str	r3, [r2, #0]
		}

		//Mode_button is pressed -> turn to YELLOW_ADJUST
		if(is_button1_pressed()){
 80009b0:	f7ff fc9e 	bl	80002f0 <is_button1_pressed>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d01b      	beq.n	80009f2 <fsm_manual_run+0x1c6>
			state = YELLOW_ADJUST;
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <fsm_manual_run+0x1cc>)
 80009bc:	220c      	movs	r2, #12
 80009be:	701a      	strb	r2, [r3, #0]
			yellow1_on();
 80009c0:	f000 fcdc 	bl	800137c <yellow1_on>
			yellow2_on();
 80009c4:	f000 fcee 	bl	80013a4 <yellow2_on>
			//reset all button flag
			is_button2_pressed();
 80009c8:	f7ff fca4 	bl	8000314 <is_button2_pressed>
			is_button3_pressed();
 80009cc:	f7ff fcb4 	bl	8000338 <is_button3_pressed>

			SEG_counter = temp_yellow_time/1000;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <fsm_manual_run+0x1d0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <fsm_manual_run+0x1d8>)
 80009d6:	fba2 2303 	umull	r2, r3, r2, r3
 80009da:	099b      	lsrs	r3, r3, #6
 80009dc:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <fsm_manual_run+0x1dc>)
 80009de:	6013      	str	r3, [r2, #0]
			UART_Parse();
 80009e0:	f000 fd22 	bl	8001428 <UART_Parse>
		}
		break;
 80009e4:	e005      	b.n	80009f2 <fsm_manual_run+0x1c6>
	default:
		break;
 80009e6:	bf00      	nop
 80009e8:	e004      	b.n	80009f4 <fsm_manual_run+0x1c8>
		break;
 80009ea:	bf00      	nop
 80009ec:	e002      	b.n	80009f4 <fsm_manual_run+0x1c8>
		break;
 80009ee:	bf00      	nop
 80009f0:	e000      	b.n	80009f4 <fsm_manual_run+0x1c8>
		break;
 80009f2:	bf00      	nop
	}
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200000dc 	.word	0x200000dc
 80009fc:	20000020 	.word	0x20000020
 8000a00:	45e7b273 	.word	0x45e7b273
 8000a04:	10624dd3 	.word	0x10624dd3
 8000a08:	200000d8 	.word	0x200000d8
 8000a0c:	20000014 	.word	0x20000014
 8000a10:	2000001c 	.word	0x2000001c
 8000a14:	20000010 	.word	0x20000010
 8000a18:	20000018 	.word	0x20000018
 8000a1c:	2000000c 	.word	0x2000000c

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a24:	f000 fd44 	bl	80014b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a28:	f000 f818 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2c:	f000 f944 	bl	8000cb8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a30:	f000 f856 	bl	8000ae0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a34:	f000 f8a0 	bl	8000b78 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000a38:	f000 f914 	bl	8000c64 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <main+0x34>)
 8000a3e:	f001 fd8d 	bl	800255c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a42:	2100      	movs	r1, #0
 8000a44:	4804      	ldr	r0, [pc, #16]	; (8000a58 <main+0x38>)
 8000a46:	f001 fe33 	bl	80026b0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		fsm_automatic_run();
 8000a4a:	f7ff fcf1 	bl	8000430 <fsm_automatic_run>
		fsm_manual_run();
 8000a4e:	f7ff feed 	bl	800082c <fsm_manual_run>
		fsm_automatic_run();
 8000a52:	e7fa      	b.n	8000a4a <main+0x2a>
 8000a54:	20000124 	.word	0x20000124
 8000a58:	2000016c 	.word	0x2000016c

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b090      	sub	sp, #64	; 0x40
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0318 	add.w	r3, r7, #24
 8000a66:	2228      	movs	r2, #40	; 0x28
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f003 f986 	bl	8003d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a82:	2301      	movs	r3, #1
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a86:	2310      	movs	r3, #16
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000a92:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a98:	f107 0318 	add.w	r3, r7, #24
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 f8f3 	bl	8001c88 <HAL_RCC_OscConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000aa8:	f000 f974 	bl	8000d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aac:	230f      	movs	r3, #15
 8000aae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000abc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 fb60 	bl	800218c <HAL_RCC_ClockConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000ad2:	f000 f95f 	bl	8000d94 <Error_Handler>
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	3740      	adds	r7, #64	; 0x40
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ae6:	f107 0308 	add.w	r3, r7, #8
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af4:	463b      	mov	r3, r7
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000afe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000b04:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b06:	223f      	movs	r2, #63	; 0x3f
 8000b08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000b10:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b12:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b18:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b24:	4813      	ldr	r0, [pc, #76]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b26:	f001 fcc9 	bl	80024bc <HAL_TIM_Base_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b30:	f000 f930 	bl	8000d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b3a:	f107 0308 	add.w	r3, r7, #8
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480c      	ldr	r0, [pc, #48]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b42:	f002 f81d 	bl	8002b80 <HAL_TIM_ConfigClockSource>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b4c:	f000 f922 	bl	8000d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b50:	2300      	movs	r3, #0
 8000b52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b58:	463b      	mov	r3, r7
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b5e:	f002 fb9b 	bl	8003298 <HAL_TIMEx_MasterConfigSynchronization>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b68:	f000 f914 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000124 	.word	0x20000124

08000b78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08e      	sub	sp, #56	; 0x38
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8c:	f107 0320 	add.w	r3, r7, #32
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
 8000ba4:	615a      	str	r2, [r3, #20]
 8000ba6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ba8:	4b2c      	ldr	r3, [pc, #176]	; (8000c5c <MX_TIM3_Init+0xe4>)
 8000baa:	4a2d      	ldr	r2, [pc, #180]	; (8000c60 <MX_TIM3_Init+0xe8>)
 8000bac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000bae:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <MX_TIM3_Init+0xe4>)
 8000bb0:	223f      	movs	r2, #63	; 0x3f
 8000bb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb4:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <MX_TIM3_Init+0xe4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000bba:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <MX_TIM3_Init+0xe4>)
 8000bbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bc0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc2:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <MX_TIM3_Init+0xe4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc8:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <MX_TIM3_Init+0xe4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bce:	4823      	ldr	r0, [pc, #140]	; (8000c5c <MX_TIM3_Init+0xe4>)
 8000bd0:	f001 fc74 	bl	80024bc <HAL_TIM_Base_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000bda:	f000 f8db 	bl	8000d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000be4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be8:	4619      	mov	r1, r3
 8000bea:	481c      	ldr	r0, [pc, #112]	; (8000c5c <MX_TIM3_Init+0xe4>)
 8000bec:	f001 ffc8 	bl	8002b80 <HAL_TIM_ConfigClockSource>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000bf6:	f000 f8cd 	bl	8000d94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bfa:	4818      	ldr	r0, [pc, #96]	; (8000c5c <MX_TIM3_Init+0xe4>)
 8000bfc:	f001 fd00 	bl	8002600 <HAL_TIM_PWM_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c06:	f000 f8c5 	bl	8000d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c12:	f107 0320 	add.w	r3, r7, #32
 8000c16:	4619      	mov	r1, r3
 8000c18:	4810      	ldr	r0, [pc, #64]	; (8000c5c <MX_TIM3_Init+0xe4>)
 8000c1a:	f002 fb3d 	bl	8003298 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c24:	f000 f8b6 	bl	8000d94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c28:	2360      	movs	r3, #96	; 0x60
 8000c2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4807      	ldr	r0, [pc, #28]	; (8000c5c <MX_TIM3_Init+0xe4>)
 8000c40:	f001 fee0 	bl	8002a04 <HAL_TIM_PWM_ConfigChannel>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000c4a:	f000 f8a3 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c4e:	4803      	ldr	r0, [pc, #12]	; (8000c5c <MX_TIM3_Init+0xe4>)
 8000c50:	f000 f9ee 	bl	8001030 <HAL_TIM_MspPostInit>

}
 8000c54:	bf00      	nop
 8000c56:	3738      	adds	r7, #56	; 0x38
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	2000016c 	.word	0x2000016c
 8000c60:	40000400 	.word	0x40000400

08000c64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <MX_USART2_UART_Init+0x50>)
 8000c6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c9c:	f002 fb6c 	bl	8003378 <HAL_UART_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ca6:	f000 f875 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200000e0 	.word	0x200000e0
 8000cb4:	40004400 	.word	0x40004400

08000cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 0308 	add.w	r3, r7, #8
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	4b2e      	ldr	r3, [pc, #184]	; (8000d88 <MX_GPIO_Init+0xd0>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a2d      	ldr	r2, [pc, #180]	; (8000d88 <MX_GPIO_Init+0xd0>)
 8000cd2:	f043 0304 	orr.w	r3, r3, #4
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <MX_GPIO_Init+0xd0>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0304 	and.w	r3, r3, #4
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce4:	4b28      	ldr	r3, [pc, #160]	; (8000d88 <MX_GPIO_Init+0xd0>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a27      	ldr	r2, [pc, #156]	; (8000d88 <MX_GPIO_Init+0xd0>)
 8000cea:	f043 0308 	orr.w	r3, r3, #8
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <MX_GPIO_Init+0xd0>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f003 0308 	and.w	r3, r3, #8
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PEDE_LIGHT_A_Pin|LIGHT1_B_Pin|LIGHT2_B_Pin|LIGHT2_A_Pin, GPIO_PIN_SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000d02:	4822      	ldr	r0, [pc, #136]	; (8000d8c <MX_GPIO_Init+0xd4>)
 8000d04:	f000 ff8f 	bl	8001c26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PEDE_LIGHT_B_Pin|LIGHT1_A_Pin, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000d0e:	4820      	ldr	r0, [pc, #128]	; (8000d90 <MX_GPIO_Init+0xd8>)
 8000d10:	f000 ff89 	bl	8001c26 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEDE_BUTTON_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = PEDE_BUTTON_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000d14:	2313      	movs	r3, #19
 8000d16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 0308 	add.w	r3, r7, #8
 8000d24:	4619      	mov	r1, r3
 8000d26:	481a      	ldr	r0, [pc, #104]	; (8000d90 <MX_GPIO_Init+0xd8>)
 8000d28:	f000 fde2 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 0308 	add.w	r3, r7, #8
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4813      	ldr	r0, [pc, #76]	; (8000d8c <MX_GPIO_Init+0xd4>)
 8000d40:	f000 fdd6 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDE_LIGHT_A_Pin LIGHT1_B_Pin LIGHT2_B_Pin LIGHT2_A_Pin */
  GPIO_InitStruct.Pin = PEDE_LIGHT_A_Pin|LIGHT1_B_Pin|LIGHT2_B_Pin|LIGHT2_A_Pin;
 8000d44:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000d48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2302      	movs	r3, #2
 8000d54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480b      	ldr	r0, [pc, #44]	; (8000d8c <MX_GPIO_Init+0xd4>)
 8000d5e:	f000 fdc7 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDE_LIGHT_B_Pin LIGHT1_A_Pin */
  GPIO_InitStruct.Pin = PEDE_LIGHT_B_Pin|LIGHT1_A_Pin;
 8000d62:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000d66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2302      	movs	r3, #2
 8000d72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	f107 0308 	add.w	r3, r7, #8
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_GPIO_Init+0xd8>)
 8000d7c:	f000 fdb8 	bl	80018f0 <HAL_GPIO_Init>

}
 8000d80:	bf00      	nop
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40010c00 	.word	0x40010c00
 8000d90:	40010800 	.word	0x40010800

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d9c:	e7fe      	b.n	8000d9c <Error_Handler+0x8>
	...

08000da0 <setTimer1>:

// Add params for timer 5
int timer5_flag = 0;
int timer5_counter = 0;

void setTimer1(uint32_t duration){
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8000da8:	230a      	movs	r3, #10
 8000daa:	461a      	mov	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	fbb3 f3f2 	udiv	r3, r3, r2
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <setTimer1+0x28>)
 8000db6:	601a      	str	r2, [r3, #0]
	timer1_flag = 0;
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <setTimer1+0x2c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	200001b8 	.word	0x200001b8
 8000dcc:	200001b4 	.word	0x200001b4

08000dd0 <setTimer2>:

void setTimer2(uint32_t duration){
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 8000dd8:	230a      	movs	r3, #10
 8000dda:	461a      	mov	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	fbb3 f3f2 	udiv	r3, r3, r2
 8000de2:	461a      	mov	r2, r3
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <setTimer2+0x28>)
 8000de6:	601a      	str	r2, [r3, #0]
	timer2_flag = 0;
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <setTimer2+0x2c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	200001c0 	.word	0x200001c0
 8000dfc:	200001bc 	.word	0x200001bc

08000e00 <setTimer3>:

void setTimer3(uint32_t duration){
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 8000e08:	230a      	movs	r3, #10
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <setTimer3+0x28>)
 8000e16:	601a      	str	r2, [r3, #0]
	timer3_flag = 0;
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <setTimer3+0x2c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	200001c8 	.word	0x200001c8
 8000e2c:	200001c4 	.word	0x200001c4

08000e30 <setTimer4>:

void setTimer4(uint32_t duration)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TIMER_CYCLE;
 8000e38:	230a      	movs	r3, #10
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e42:	461a      	mov	r2, r3
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <setTimer4+0x28>)
 8000e46:	601a      	str	r2, [r3, #0]
	timer4_flag = 0;
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <setTimer4+0x2c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	200001d0 	.word	0x200001d0
 8000e5c:	200001cc 	.word	0x200001cc

08000e60 <timerRun>:
	timer5_counter = duration/TIMER_CYCLE;
	timer5_flag = 0;
}


void timerRun(){
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
	if(timer1_counter >0){
 8000e64:	4b29      	ldr	r3, [pc, #164]	; (8000f0c <timerRun+0xac>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	dd0b      	ble.n	8000e84 <timerRun+0x24>
		timer1_counter--;
 8000e6c:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <timerRun+0xac>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	3b01      	subs	r3, #1
 8000e72:	4a26      	ldr	r2, [pc, #152]	; (8000f0c <timerRun+0xac>)
 8000e74:	6013      	str	r3, [r2, #0]
		if(timer1_counter <=0){
 8000e76:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <timerRun+0xac>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	dc02      	bgt.n	8000e84 <timerRun+0x24>
			timer1_flag =1;
 8000e7e:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <timerRun+0xb0>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter >0){
 8000e84:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <timerRun+0xb4>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	dd0b      	ble.n	8000ea4 <timerRun+0x44>
			timer2_counter--;
 8000e8c:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <timerRun+0xb4>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	3b01      	subs	r3, #1
 8000e92:	4a20      	ldr	r2, [pc, #128]	; (8000f14 <timerRun+0xb4>)
 8000e94:	6013      	str	r3, [r2, #0]
			if(timer2_counter <=0){
 8000e96:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <timerRun+0xb4>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	dc02      	bgt.n	8000ea4 <timerRun+0x44>
				timer2_flag =1;
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <timerRun+0xb8>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer3_counter >0){
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <timerRun+0xbc>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	dd0b      	ble.n	8000ec4 <timerRun+0x64>
			timer3_counter--;
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <timerRun+0xbc>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	4a1a      	ldr	r2, [pc, #104]	; (8000f1c <timerRun+0xbc>)
 8000eb4:	6013      	str	r3, [r2, #0]
			if(timer3_counter <=0){
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <timerRun+0xbc>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	dc02      	bgt.n	8000ec4 <timerRun+0x64>
				timer3_flag =1;
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <timerRun+0xc0>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
			}
	}
	if(timer4_counter >0){
 8000ec4:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <timerRun+0xc4>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	dd0b      	ble.n	8000ee4 <timerRun+0x84>
				timer4_counter--;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <timerRun+0xc4>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <timerRun+0xc4>)
 8000ed4:	6013      	str	r3, [r2, #0]
				if(timer4_counter <=0){
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <timerRun+0xc4>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	dc02      	bgt.n	8000ee4 <timerRun+0x84>
					timer4_flag =1;
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <timerRun+0xc8>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]
				}
		}
	if(timer5_counter >0){
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <timerRun+0xcc>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	dd0b      	ble.n	8000f04 <timerRun+0xa4>
				timer5_counter--;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <timerRun+0xcc>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <timerRun+0xcc>)
 8000ef4:	6013      	str	r3, [r2, #0]
				if(timer5_counter <=0){
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <timerRun+0xcc>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	dc02      	bgt.n	8000f04 <timerRun+0xa4>
					timer5_flag =1;
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <timerRun+0xd0>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	601a      	str	r2, [r3, #0]
				}
		}
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	200001b8 	.word	0x200001b8
 8000f10:	200001b4 	.word	0x200001b4
 8000f14:	200001c0 	.word	0x200001c0
 8000f18:	200001bc 	.word	0x200001bc
 8000f1c:	200001c8 	.word	0x200001c8
 8000f20:	200001c4 	.word	0x200001c4
 8000f24:	200001d0 	.word	0x200001d0
 8000f28:	200001cc 	.word	0x200001cc
 8000f2c:	200001d8 	.word	0x200001d8
 8000f30:	200001d4 	.word	0x200001d4

08000f34 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	button_reading();
 8000f3c:	f7ff f90e 	bl	800015c <button_reading>
	timerRun();
 8000f40:	f7ff ff8e 	bl	8000e60 <timerRun>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6193      	str	r3, [r2, #24]
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	61d3      	str	r3, [r2, #28]
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_MspInit+0x60>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_MspInit+0x60>)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40010000 	.word	0x40010000

08000fb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fc0:	d114      	bne.n	8000fec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fc2:	4b19      	ldr	r3, [pc, #100]	; (8001028 <HAL_TIM_Base_MspInit+0x78>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	4a18      	ldr	r2, [pc, #96]	; (8001028 <HAL_TIM_Base_MspInit+0x78>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	61d3      	str	r3, [r2, #28]
 8000fce:	4b16      	ldr	r3, [pc, #88]	; (8001028 <HAL_TIM_Base_MspInit+0x78>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	201c      	movs	r0, #28
 8000fe0:	f000 fb9f 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fe4:	201c      	movs	r0, #28
 8000fe6:	f000 fbb8 	bl	800175a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fea:	e018      	b.n	800101e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0e      	ldr	r2, [pc, #56]	; (800102c <HAL_TIM_Base_MspInit+0x7c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d113      	bne.n	800101e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <HAL_TIM_Base_MspInit+0x78>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <HAL_TIM_Base_MspInit+0x78>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	61d3      	str	r3, [r2, #28]
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <HAL_TIM_Base_MspInit+0x78>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	201d      	movs	r0, #29
 8001014:	f000 fb85 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001018:	201d      	movs	r0, #29
 800101a:	f000 fb9e 	bl	800175a <HAL_NVIC_EnableIRQ>
}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000
 800102c:	40000400 	.word	0x40000400

08001030 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <HAL_TIM_MspPostInit+0x58>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d117      	bne.n	8001080 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <HAL_TIM_MspPostInit+0x5c>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a0d      	ldr	r2, [pc, #52]	; (800108c <HAL_TIM_MspPostInit+0x5c>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <HAL_TIM_MspPostInit+0x5c>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PEDE_BUZZER_Pin;
 8001068:	2340      	movs	r3, #64	; 0x40
 800106a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2302      	movs	r3, #2
 8001072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PEDE_BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	4619      	mov	r1, r3
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <HAL_TIM_MspPostInit+0x60>)
 800107c:	f000 fc38 	bl	80018f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001080:	bf00      	nop
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40000400 	.word	0x40000400
 800108c:	40021000 	.word	0x40021000
 8001090:	40010800 	.word	0x40010800

08001094 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a1f      	ldr	r2, [pc, #124]	; (800112c <HAL_UART_MspInit+0x98>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d137      	bne.n	8001124 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010b4:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <HAL_UART_MspInit+0x9c>)
 80010b6:	69db      	ldr	r3, [r3, #28]
 80010b8:	4a1d      	ldr	r2, [pc, #116]	; (8001130 <HAL_UART_MspInit+0x9c>)
 80010ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010be:	61d3      	str	r3, [r2, #28]
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <HAL_UART_MspInit+0x9c>)
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_UART_MspInit+0x9c>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a17      	ldr	r2, [pc, #92]	; (8001130 <HAL_UART_MspInit+0x9c>)
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_UART_MspInit+0x9c>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010e4:	2304      	movs	r3, #4
 80010e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	4619      	mov	r1, r3
 80010f6:	480f      	ldr	r0, [pc, #60]	; (8001134 <HAL_UART_MspInit+0xa0>)
 80010f8:	f000 fbfa 	bl	80018f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010fc:	2308      	movs	r3, #8
 80010fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	4619      	mov	r1, r3
 800110e:	4809      	ldr	r0, [pc, #36]	; (8001134 <HAL_UART_MspInit+0xa0>)
 8001110:	f000 fbee 	bl	80018f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	2026      	movs	r0, #38	; 0x26
 800111a:	f000 fb02 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800111e:	2026      	movs	r0, #38	; 0x26
 8001120:	f000 fb1b 	bl	800175a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001124:	bf00      	nop
 8001126:	3720      	adds	r7, #32
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40004400 	.word	0x40004400
 8001130:	40021000 	.word	0x40021000
 8001134:	40010800 	.word	0x40010800

08001138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800113c:	e7fe      	b.n	800113c <NMI_Handler+0x4>

0800113e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <HardFault_Handler+0x4>

08001144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <MemManage_Handler+0x4>

0800114a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114e:	e7fe      	b.n	800114e <BusFault_Handler+0x4>

08001150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <UsageFault_Handler+0x4>

08001156 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr

0800116e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr

0800117a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800117e:	f000 f9dd 	bl	800153c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <TIM2_IRQHandler+0x10>)
 800118e:	f001 fb31 	bl	80027f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000124 	.word	0x20000124

0800119c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <TIM3_IRQHandler+0x10>)
 80011a2:	f001 fb27 	bl	80027f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000016c 	.word	0x2000016c

080011b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <USART2_IRQHandler+0x10>)
 80011b6:	f002 f9bf 	bl	8003538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200000e0 	.word	0x200000e0

080011c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011cc:	4a14      	ldr	r2, [pc, #80]	; (8001220 <_sbrk+0x5c>)
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <_sbrk+0x60>)
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <_sbrk+0x64>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <_sbrk+0x68>)
 80011e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d207      	bcs.n	8001204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f4:	f002 fd98 	bl	8003d28 <__errno>
 80011f8:	4603      	mov	r3, r0
 80011fa:	220c      	movs	r2, #12
 80011fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	e009      	b.n	8001218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <_sbrk+0x64>)
 8001214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20005000 	.word	0x20005000
 8001224:	00000400 	.word	0x00000400
 8001228:	200001dc 	.word	0x200001dc
 800122c:	20000208 	.word	0x20000208

08001230 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <green_blink>:
//	0	0	off
//	0	1	green
//	1	0	red
//	1	1	yellow
void green_blink()
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <green_blink+0x28>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d10b      	bne.n	8001260 <green_blink+0x24>
		setTimer3(BLINK_TIME);
 8001248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800124c:	f7ff fdd8 	bl	8000e00 <setTimer3>
		HAL_GPIO_TogglePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin);
 8001250:	2108      	movs	r1, #8
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <green_blink+0x2c>)
 8001254:	f000 fcff 	bl	8001c56 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin);
 8001258:	2110      	movs	r1, #16
 800125a:	4803      	ldr	r0, [pc, #12]	; (8001268 <green_blink+0x2c>)
 800125c:	f000 fcfb 	bl	8001c56 <HAL_GPIO_TogglePin>
	}
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	200001c4 	.word	0x200001c4
 8001268:	40010c00 	.word	0x40010c00

0800126c <red_blink>:
void red_blink()
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <red_blink+0x2c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d10c      	bne.n	8001292 <red_blink+0x26>
		setTimer3(BLINK_TIME);
 8001278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800127c:	f7ff fdc0 	bl	8000e00 <setTimer3>
		HAL_GPIO_TogglePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin);
 8001280:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <red_blink+0x30>)
 8001286:	f000 fce6 	bl	8001c56 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin);
 800128a:	2120      	movs	r1, #32
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <red_blink+0x34>)
 800128e:	f000 fce2 	bl	8001c56 <HAL_GPIO_TogglePin>
	}
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200001c4 	.word	0x200001c4
 800129c:	40010800 	.word	0x40010800
 80012a0:	40010c00 	.word	0x40010c00

080012a4 <yellow_blink>:

void yellow_blink()
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 80012a8:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <yellow_blink+0x3c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d114      	bne.n	80012da <yellow_blink+0x36>
		setTimer3(BLINK_TIME);
 80012b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b4:	f7ff fda4 	bl	8000e00 <setTimer3>
		HAL_GPIO_TogglePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin);
 80012b8:	2108      	movs	r1, #8
 80012ba:	480a      	ldr	r0, [pc, #40]	; (80012e4 <yellow_blink+0x40>)
 80012bc:	f000 fccb 	bl	8001c56 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin);
 80012c0:	2110      	movs	r1, #16
 80012c2:	4808      	ldr	r0, [pc, #32]	; (80012e4 <yellow_blink+0x40>)
 80012c4:	f000 fcc7 	bl	8001c56 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin);
 80012c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012cc:	4806      	ldr	r0, [pc, #24]	; (80012e8 <yellow_blink+0x44>)
 80012ce:	f000 fcc2 	bl	8001c56 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin);
 80012d2:	2120      	movs	r1, #32
 80012d4:	4803      	ldr	r0, [pc, #12]	; (80012e4 <yellow_blink+0x40>)
 80012d6:	f000 fcbe 	bl	8001c56 <HAL_GPIO_TogglePin>
	}
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200001c4 	.word	0x200001c4
 80012e4:	40010c00 	.word	0x40010c00
 80012e8:	40010800 	.word	0x40010800

080012ec <red1_on>:

//turn the led corresponding to this road on
void red1_on()
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <red1_on+0x20>)
 80012f8:	f000 fc95 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2108      	movs	r1, #8
 8001300:	4803      	ldr	r0, [pc, #12]	; (8001310 <red1_on+0x24>)
 8001302:	f000 fc90 	bl	8001c26 <HAL_GPIO_WritePin>
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40010800 	.word	0x40010800
 8001310:	40010c00 	.word	0x40010c00

08001314 <red2_on>:
void red2_on()
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, SET);
 8001318:	2201      	movs	r2, #1
 800131a:	2120      	movs	r1, #32
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <red2_on+0x1c>)
 800131e:	f000 fc82 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	2110      	movs	r1, #16
 8001326:	4802      	ldr	r0, [pc, #8]	; (8001330 <red2_on+0x1c>)
 8001328:	f000 fc7d 	bl	8001c26 <HAL_GPIO_WritePin>
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40010c00 	.word	0x40010c00

08001334 <green1_on>:
void green1_on()
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <green1_on+0x20>)
 8001340:	f000 fc71 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, SET);
 8001344:	2201      	movs	r2, #1
 8001346:	2108      	movs	r1, #8
 8001348:	4803      	ldr	r0, [pc, #12]	; (8001358 <green1_on+0x24>)
 800134a:	f000 fc6c 	bl	8001c26 <HAL_GPIO_WritePin>
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40010800 	.word	0x40010800
 8001358:	40010c00 	.word	0x40010c00

0800135c <green2_on>:
void green2_on()
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	2120      	movs	r1, #32
 8001364:	4804      	ldr	r0, [pc, #16]	; (8001378 <green2_on+0x1c>)
 8001366:	f000 fc5e 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, SET);
 800136a:	2201      	movs	r2, #1
 800136c:	2110      	movs	r1, #16
 800136e:	4802      	ldr	r0, [pc, #8]	; (8001378 <green2_on+0x1c>)
 8001370:	f000 fc59 	bl	8001c26 <HAL_GPIO_WritePin>
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40010c00 	.word	0x40010c00

0800137c <yellow1_on>:
void yellow1_on()
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, SET);
 8001380:	2201      	movs	r2, #1
 8001382:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <yellow1_on+0x20>)
 8001388:	f000 fc4d 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, SET);
 800138c:	2201      	movs	r2, #1
 800138e:	2108      	movs	r1, #8
 8001390:	4803      	ldr	r0, [pc, #12]	; (80013a0 <yellow1_on+0x24>)
 8001392:	f000 fc48 	bl	8001c26 <HAL_GPIO_WritePin>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40010800 	.word	0x40010800
 80013a0:	40010c00 	.word	0x40010c00

080013a4 <yellow2_on>:
void yellow2_on()
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2120      	movs	r1, #32
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <yellow2_on+0x1c>)
 80013ae:	f000 fc3a 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, SET);
 80013b2:	2201      	movs	r2, #1
 80013b4:	2110      	movs	r1, #16
 80013b6:	4802      	ldr	r0, [pc, #8]	; (80013c0 <yellow2_on+0x1c>)
 80013b8:	f000 fc35 	bl	8001c26 <HAL_GPIO_WritePin>
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40010c00 	.word	0x40010c00

080013c4 <green_pedes_on>:
	HAL_GPIO_WritePin(PEDE_LIGHT_A_GPIO_Port, PEDE_LIGHT_A_Pin, SET);
	HAL_GPIO_WritePin(PEDE_LIGHT_B_GPIO_Port, PEDE_LIGHT_B_Pin, RESET);
}

void green_pedes_on()
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PEDE_LIGHT_A_GPIO_Port, PEDE_LIGHT_A_Pin, RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <green_pedes_on+0x20>)
 80013d0:	f000 fc29 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PEDE_LIGHT_B_GPIO_Port, PEDE_LIGHT_B_Pin, SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013da:	4803      	ldr	r0, [pc, #12]	; (80013e8 <green_pedes_on+0x24>)
 80013dc:	f000 fc23 	bl	8001c26 <HAL_GPIO_WritePin>
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40010c00 	.word	0x40010c00
 80013e8:	40010800 	.word	0x40010800

080013ec <turn_all_led_off>:


//this function is used when error detected
void turn_all_led_off()
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013f6:	480a      	ldr	r0, [pc, #40]	; (8001420 <turn_all_led_off+0x34>)
 80013f8:	f000 fc15 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2108      	movs	r1, #8
 8001400:	4808      	ldr	r0, [pc, #32]	; (8001424 <turn_all_led_off+0x38>)
 8001402:	f000 fc10 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	2120      	movs	r1, #32
 800140a:	4806      	ldr	r0, [pc, #24]	; (8001424 <turn_all_led_off+0x38>)
 800140c:	f000 fc0b 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	2110      	movs	r1, #16
 8001414:	4803      	ldr	r0, [pc, #12]	; (8001424 <turn_all_led_off+0x38>)
 8001416:	f000 fc06 	bl	8001c26 <HAL_GPIO_WritePin>
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40010800 	.word	0x40010800
 8001424:	40010c00 	.word	0x40010c00

08001428 <UART_Parse>:

// Add task for UART
char str[15];		//buffer store data to send
void UART_Parse()
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	sprintf(str, "!7SEG:%lu#\r\n", SEG_counter);
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <UART_Parse+0x2c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4909      	ldr	r1, [pc, #36]	; (8001458 <UART_Parse+0x30>)
 8001434:	4809      	ldr	r0, [pc, #36]	; (800145c <UART_Parse+0x34>)
 8001436:	f002 fca9 	bl	8003d8c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 2000);
 800143a:	4808      	ldr	r0, [pc, #32]	; (800145c <UART_Parse+0x34>)
 800143c:	f7fe fe86 	bl	800014c <strlen>
 8001440:	4603      	mov	r3, r0
 8001442:	b29a      	uxth	r2, r3
 8001444:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001448:	4904      	ldr	r1, [pc, #16]	; (800145c <UART_Parse+0x34>)
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <UART_Parse+0x38>)
 800144c:	f001 ffe1 	bl	8003412 <HAL_UART_Transmit>
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200000d8 	.word	0x200000d8
 8001458:	08004698 	.word	0x08004698
 800145c:	200001e0 	.word	0x200001e0
 8001460:	200000e0 	.word	0x200000e0

08001464 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001464:	480c      	ldr	r0, [pc, #48]	; (8001498 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001466:	490d      	ldr	r1, [pc, #52]	; (800149c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001468:	4a0d      	ldr	r2, [pc, #52]	; (80014a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800146c:	e002      	b.n	8001474 <LoopCopyDataInit>

0800146e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001472:	3304      	adds	r3, #4

08001474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001478:	d3f9      	bcc.n	800146e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800147c:	4c0a      	ldr	r4, [pc, #40]	; (80014a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001480:	e001      	b.n	8001486 <LoopFillZerobss>

08001482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001484:	3204      	adds	r2, #4

08001486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001488:	d3fb      	bcc.n	8001482 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800148a:	f7ff fed1 	bl	8001230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800148e:	f002 fc51 	bl	8003d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001492:	f7ff fac5 	bl	8000a20 <main>
  bx lr
 8001496:	4770      	bx	lr
  ldr r0, =_sdata
 8001498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800149c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80014a0:	0800470c 	.word	0x0800470c
  ldr r2, =_sbss
 80014a4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80014a8:	20000204 	.word	0x20000204

080014ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC1_2_IRQHandler>
	...

080014b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_Init+0x28>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a07      	ldr	r2, [pc, #28]	; (80014d8 <HAL_Init+0x28>)
 80014ba:	f043 0310 	orr.w	r3, r3, #16
 80014be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c0:	2003      	movs	r0, #3
 80014c2:	f000 f923 	bl	800170c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c6:	200f      	movs	r0, #15
 80014c8:	f000 f808 	bl	80014dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014cc:	f7ff fd3e 	bl	8000f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40022000 	.word	0x40022000

080014dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_InitTick+0x54>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_InitTick+0x58>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f93b 	bl	8001776 <HAL_SYSTICK_Config>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e00e      	b.n	8001528 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b0f      	cmp	r3, #15
 800150e:	d80a      	bhi.n	8001526 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001510:	2200      	movs	r2, #0
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f000 f903 	bl	8001722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800151c:	4a06      	ldr	r2, [pc, #24]	; (8001538 <HAL_InitTick+0x5c>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e000      	b.n	8001528 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000024 	.word	0x20000024
 8001534:	2000002c 	.word	0x2000002c
 8001538:	20000028 	.word	0x20000028

0800153c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <HAL_IncTick+0x1c>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_IncTick+0x20>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4413      	add	r3, r2
 800154c:	4a03      	ldr	r2, [pc, #12]	; (800155c <HAL_IncTick+0x20>)
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	2000002c 	.word	0x2000002c
 800155c:	200001f0 	.word	0x200001f0

08001560 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return uwTick;
 8001564:	4b02      	ldr	r3, [pc, #8]	; (8001570 <HAL_GetTick+0x10>)
 8001566:	681b      	ldr	r3, [r3, #0]
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	200001f0 	.word	0x200001f0

08001574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001590:	4013      	ands	r3, r2
 8001592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800159c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015a6:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	60d3      	str	r3, [r2, #12]
}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <__NVIC_GetPriorityGrouping+0x18>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	0a1b      	lsrs	r3, r3, #8
 80015c6:	f003 0307 	and.w	r3, r3, #7
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	db0b      	blt.n	8001602 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	f003 021f 	and.w	r2, r3, #31
 80015f0:	4906      	ldr	r1, [pc, #24]	; (800160c <__NVIC_EnableIRQ+0x34>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	095b      	lsrs	r3, r3, #5
 80015f8:	2001      	movs	r0, #1
 80015fa:	fa00 f202 	lsl.w	r2, r0, r2
 80015fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	e000e100 	.word	0xe000e100

08001610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	db0a      	blt.n	800163a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	b2da      	uxtb	r2, r3
 8001628:	490c      	ldr	r1, [pc, #48]	; (800165c <__NVIC_SetPriority+0x4c>)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	0112      	lsls	r2, r2, #4
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	440b      	add	r3, r1
 8001634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001638:	e00a      	b.n	8001650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4908      	ldr	r1, [pc, #32]	; (8001660 <__NVIC_SetPriority+0x50>)
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	3b04      	subs	r3, #4
 8001648:	0112      	lsls	r2, r2, #4
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	440b      	add	r3, r1
 800164e:	761a      	strb	r2, [r3, #24]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000e100 	.word	0xe000e100
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	; 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f1c3 0307 	rsb	r3, r3, #7
 800167e:	2b04      	cmp	r3, #4
 8001680:	bf28      	it	cs
 8001682:	2304      	movcs	r3, #4
 8001684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3304      	adds	r3, #4
 800168a:	2b06      	cmp	r3, #6
 800168c:	d902      	bls.n	8001694 <NVIC_EncodePriority+0x30>
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3b03      	subs	r3, #3
 8001692:	e000      	b.n	8001696 <NVIC_EncodePriority+0x32>
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	f04f 32ff 	mov.w	r2, #4294967295
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	401a      	ands	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ac:	f04f 31ff 	mov.w	r1, #4294967295
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	43d9      	mvns	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	4313      	orrs	r3, r2
         );
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3724      	adds	r7, #36	; 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d8:	d301      	bcc.n	80016de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016da:	2301      	movs	r3, #1
 80016dc:	e00f      	b.n	80016fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <SysTick_Config+0x40>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e6:	210f      	movs	r1, #15
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f7ff ff90 	bl	8001610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <SysTick_Config+0x40>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <SysTick_Config+0x40>)
 80016f8:	2207      	movs	r2, #7
 80016fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	e000e010 	.word	0xe000e010

0800170c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff2d 	bl	8001574 <__NVIC_SetPriorityGrouping>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001734:	f7ff ff42 	bl	80015bc <__NVIC_GetPriorityGrouping>
 8001738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	6978      	ldr	r0, [r7, #20]
 8001740:	f7ff ff90 	bl	8001664 <NVIC_EncodePriority>
 8001744:	4602      	mov	r2, r0
 8001746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff5f 	bl	8001610 <__NVIC_SetPriority>
}
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff35 	bl	80015d8 <__NVIC_EnableIRQ>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffa2 	bl	80016c8 <SysTick_Config>
 8001784:	4603      	mov	r3, r0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800178e:	b480      	push	{r7}
 8001790:	b085      	sub	sp, #20
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d008      	beq.n	80017b6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2204      	movs	r2, #4
 80017a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e020      	b.n	80017f8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 020e 	bic.w	r2, r2, #14
 80017c4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0201 	bic.w	r2, r2, #1
 80017d4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017de:	2101      	movs	r1, #1
 80017e0:	fa01 f202 	lsl.w	r2, r1, r2
 80017e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
	...

08001804 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001816:	2b02      	cmp	r3, #2
 8001818:	d005      	beq.n	8001826 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2204      	movs	r2, #4
 800181e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	73fb      	strb	r3, [r7, #15]
 8001824:	e051      	b.n	80018ca <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 020e 	bic.w	r2, r2, #14
 8001834:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0201 	bic.w	r2, r2, #1
 8001844:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a22      	ldr	r2, [pc, #136]	; (80018d4 <HAL_DMA_Abort_IT+0xd0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d029      	beq.n	80018a4 <HAL_DMA_Abort_IT+0xa0>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a20      	ldr	r2, [pc, #128]	; (80018d8 <HAL_DMA_Abort_IT+0xd4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d022      	beq.n	80018a0 <HAL_DMA_Abort_IT+0x9c>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a1f      	ldr	r2, [pc, #124]	; (80018dc <HAL_DMA_Abort_IT+0xd8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d01a      	beq.n	800189a <HAL_DMA_Abort_IT+0x96>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a1d      	ldr	r2, [pc, #116]	; (80018e0 <HAL_DMA_Abort_IT+0xdc>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d012      	beq.n	8001894 <HAL_DMA_Abort_IT+0x90>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <HAL_DMA_Abort_IT+0xe0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d00a      	beq.n	800188e <HAL_DMA_Abort_IT+0x8a>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a1a      	ldr	r2, [pc, #104]	; (80018e8 <HAL_DMA_Abort_IT+0xe4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d102      	bne.n	8001888 <HAL_DMA_Abort_IT+0x84>
 8001882:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001886:	e00e      	b.n	80018a6 <HAL_DMA_Abort_IT+0xa2>
 8001888:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800188c:	e00b      	b.n	80018a6 <HAL_DMA_Abort_IT+0xa2>
 800188e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001892:	e008      	b.n	80018a6 <HAL_DMA_Abort_IT+0xa2>
 8001894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001898:	e005      	b.n	80018a6 <HAL_DMA_Abort_IT+0xa2>
 800189a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800189e:	e002      	b.n	80018a6 <HAL_DMA_Abort_IT+0xa2>
 80018a0:	2310      	movs	r3, #16
 80018a2:	e000      	b.n	80018a6 <HAL_DMA_Abort_IT+0xa2>
 80018a4:	2301      	movs	r3, #1
 80018a6:	4a11      	ldr	r2, [pc, #68]	; (80018ec <HAL_DMA_Abort_IT+0xe8>)
 80018a8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	4798      	blx	r3
    } 
  }
  return status;
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40020008 	.word	0x40020008
 80018d8:	4002001c 	.word	0x4002001c
 80018dc:	40020030 	.word	0x40020030
 80018e0:	40020044 	.word	0x40020044
 80018e4:	40020058 	.word	0x40020058
 80018e8:	4002006c 	.word	0x4002006c
 80018ec:	40020000 	.word	0x40020000

080018f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b08b      	sub	sp, #44	; 0x2c
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001902:	e169      	b.n	8001bd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001904:	2201      	movs	r2, #1
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	429a      	cmp	r2, r3
 800191e:	f040 8158 	bne.w	8001bd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	4a9a      	ldr	r2, [pc, #616]	; (8001b90 <HAL_GPIO_Init+0x2a0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d05e      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 800192c:	4a98      	ldr	r2, [pc, #608]	; (8001b90 <HAL_GPIO_Init+0x2a0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d875      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 8001932:	4a98      	ldr	r2, [pc, #608]	; (8001b94 <HAL_GPIO_Init+0x2a4>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d058      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 8001938:	4a96      	ldr	r2, [pc, #600]	; (8001b94 <HAL_GPIO_Init+0x2a4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d86f      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 800193e:	4a96      	ldr	r2, [pc, #600]	; (8001b98 <HAL_GPIO_Init+0x2a8>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d052      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 8001944:	4a94      	ldr	r2, [pc, #592]	; (8001b98 <HAL_GPIO_Init+0x2a8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d869      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 800194a:	4a94      	ldr	r2, [pc, #592]	; (8001b9c <HAL_GPIO_Init+0x2ac>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d04c      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 8001950:	4a92      	ldr	r2, [pc, #584]	; (8001b9c <HAL_GPIO_Init+0x2ac>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d863      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 8001956:	4a92      	ldr	r2, [pc, #584]	; (8001ba0 <HAL_GPIO_Init+0x2b0>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d046      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 800195c:	4a90      	ldr	r2, [pc, #576]	; (8001ba0 <HAL_GPIO_Init+0x2b0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d85d      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 8001962:	2b12      	cmp	r3, #18
 8001964:	d82a      	bhi.n	80019bc <HAL_GPIO_Init+0xcc>
 8001966:	2b12      	cmp	r3, #18
 8001968:	d859      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 800196a:	a201      	add	r2, pc, #4	; (adr r2, 8001970 <HAL_GPIO_Init+0x80>)
 800196c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001970:	080019eb 	.word	0x080019eb
 8001974:	080019c5 	.word	0x080019c5
 8001978:	080019d7 	.word	0x080019d7
 800197c:	08001a19 	.word	0x08001a19
 8001980:	08001a1f 	.word	0x08001a1f
 8001984:	08001a1f 	.word	0x08001a1f
 8001988:	08001a1f 	.word	0x08001a1f
 800198c:	08001a1f 	.word	0x08001a1f
 8001990:	08001a1f 	.word	0x08001a1f
 8001994:	08001a1f 	.word	0x08001a1f
 8001998:	08001a1f 	.word	0x08001a1f
 800199c:	08001a1f 	.word	0x08001a1f
 80019a0:	08001a1f 	.word	0x08001a1f
 80019a4:	08001a1f 	.word	0x08001a1f
 80019a8:	08001a1f 	.word	0x08001a1f
 80019ac:	08001a1f 	.word	0x08001a1f
 80019b0:	08001a1f 	.word	0x08001a1f
 80019b4:	080019cd 	.word	0x080019cd
 80019b8:	080019e1 	.word	0x080019e1
 80019bc:	4a79      	ldr	r2, [pc, #484]	; (8001ba4 <HAL_GPIO_Init+0x2b4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d013      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019c2:	e02c      	b.n	8001a1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	623b      	str	r3, [r7, #32]
          break;
 80019ca:	e029      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	3304      	adds	r3, #4
 80019d2:	623b      	str	r3, [r7, #32]
          break;
 80019d4:	e024      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	3308      	adds	r3, #8
 80019dc:	623b      	str	r3, [r7, #32]
          break;
 80019de:	e01f      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	330c      	adds	r3, #12
 80019e6:	623b      	str	r3, [r7, #32]
          break;
 80019e8:	e01a      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d102      	bne.n	80019f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019f2:	2304      	movs	r3, #4
 80019f4:	623b      	str	r3, [r7, #32]
          break;
 80019f6:	e013      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d105      	bne.n	8001a0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a00:	2308      	movs	r3, #8
 8001a02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	611a      	str	r2, [r3, #16]
          break;
 8001a0a:	e009      	b.n	8001a20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	615a      	str	r2, [r3, #20]
          break;
 8001a16:	e003      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
          break;
 8001a1c:	e000      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          break;
 8001a1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2bff      	cmp	r3, #255	; 0xff
 8001a24:	d801      	bhi.n	8001a2a <HAL_GPIO_Init+0x13a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	e001      	b.n	8001a2e <HAL_GPIO_Init+0x13e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2bff      	cmp	r3, #255	; 0xff
 8001a34:	d802      	bhi.n	8001a3c <HAL_GPIO_Init+0x14c>
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	e002      	b.n	8001a42 <HAL_GPIO_Init+0x152>
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	3b08      	subs	r3, #8
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	210f      	movs	r1, #15
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	401a      	ands	r2, r3
 8001a54:	6a39      	ldr	r1, [r7, #32]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 80b1 	beq.w	8001bd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a70:	4b4d      	ldr	r3, [pc, #308]	; (8001ba8 <HAL_GPIO_Init+0x2b8>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a4c      	ldr	r2, [pc, #304]	; (8001ba8 <HAL_GPIO_Init+0x2b8>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ba8 <HAL_GPIO_Init+0x2b8>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a88:	4a48      	ldr	r2, [pc, #288]	; (8001bac <HAL_GPIO_Init+0x2bc>)
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	3302      	adds	r3, #2
 8001a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a40      	ldr	r2, [pc, #256]	; (8001bb0 <HAL_GPIO_Init+0x2c0>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d013      	beq.n	8001adc <HAL_GPIO_Init+0x1ec>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a3f      	ldr	r2, [pc, #252]	; (8001bb4 <HAL_GPIO_Init+0x2c4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d00d      	beq.n	8001ad8 <HAL_GPIO_Init+0x1e8>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a3e      	ldr	r2, [pc, #248]	; (8001bb8 <HAL_GPIO_Init+0x2c8>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d007      	beq.n	8001ad4 <HAL_GPIO_Init+0x1e4>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a3d      	ldr	r2, [pc, #244]	; (8001bbc <HAL_GPIO_Init+0x2cc>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d101      	bne.n	8001ad0 <HAL_GPIO_Init+0x1e0>
 8001acc:	2303      	movs	r3, #3
 8001ace:	e006      	b.n	8001ade <HAL_GPIO_Init+0x1ee>
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	e004      	b.n	8001ade <HAL_GPIO_Init+0x1ee>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e002      	b.n	8001ade <HAL_GPIO_Init+0x1ee>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <HAL_GPIO_Init+0x1ee>
 8001adc:	2300      	movs	r3, #0
 8001ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae0:	f002 0203 	and.w	r2, r2, #3
 8001ae4:	0092      	lsls	r2, r2, #2
 8001ae6:	4093      	lsls	r3, r2
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aee:	492f      	ldr	r1, [pc, #188]	; (8001bac <HAL_GPIO_Init+0x2bc>)
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	3302      	adds	r3, #2
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d006      	beq.n	8001b16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b08:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	492c      	ldr	r1, [pc, #176]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	600b      	str	r3, [r1, #0]
 8001b14:	e006      	b.n	8001b24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b16:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	4928      	ldr	r1, [pc, #160]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d006      	beq.n	8001b3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b30:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	4922      	ldr	r1, [pc, #136]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
 8001b3c:	e006      	b.n	8001b4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	43db      	mvns	r3, r3
 8001b46:	491e      	ldr	r1, [pc, #120]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	4918      	ldr	r1, [pc, #96]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b66:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	4914      	ldr	r1, [pc, #80]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d021      	beq.n	8001bc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b80:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	490e      	ldr	r1, [pc, #56]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60cb      	str	r3, [r1, #12]
 8001b8c:	e021      	b.n	8001bd2 <HAL_GPIO_Init+0x2e2>
 8001b8e:	bf00      	nop
 8001b90:	10320000 	.word	0x10320000
 8001b94:	10310000 	.word	0x10310000
 8001b98:	10220000 	.word	0x10220000
 8001b9c:	10210000 	.word	0x10210000
 8001ba0:	10120000 	.word	0x10120000
 8001ba4:	10110000 	.word	0x10110000
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	40010800 	.word	0x40010800
 8001bb4:	40010c00 	.word	0x40010c00
 8001bb8:	40011000 	.word	0x40011000
 8001bbc:	40011400 	.word	0x40011400
 8001bc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_GPIO_Init+0x304>)
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	4909      	ldr	r1, [pc, #36]	; (8001bf4 <HAL_GPIO_Init+0x304>)
 8001bce:	4013      	ands	r3, r2
 8001bd0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	fa22 f303 	lsr.w	r3, r2, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f47f ae8e 	bne.w	8001904 <HAL_GPIO_Init+0x14>
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	372c      	adds	r7, #44	; 0x2c
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	40010400 	.word	0x40010400

08001bf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	887b      	ldrh	r3, [r7, #2]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c10:	2301      	movs	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
 8001c14:	e001      	b.n	8001c1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr

08001c26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	807b      	strh	r3, [r7, #2]
 8001c32:	4613      	mov	r3, r2
 8001c34:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c36:	787b      	ldrb	r3, [r7, #1]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c3c:	887a      	ldrh	r2, [r7, #2]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c42:	e003      	b.n	8001c4c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c44:	887b      	ldrh	r3, [r7, #2]
 8001c46:	041a      	lsls	r2, r3, #16
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	611a      	str	r2, [r3, #16]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b085      	sub	sp, #20
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c68:	887a      	ldrh	r2, [r7, #2]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	041a      	lsls	r2, r3, #16
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	43d9      	mvns	r1, r3
 8001c74:	887b      	ldrh	r3, [r7, #2]
 8001c76:	400b      	ands	r3, r1
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	611a      	str	r2, [r3, #16]
}
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e272      	b.n	8002180 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 8087 	beq.w	8001db6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ca8:	4b92      	ldr	r3, [pc, #584]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d00c      	beq.n	8001cce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cb4:	4b8f      	ldr	r3, [pc, #572]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d112      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x5e>
 8001cc0:	4b8c      	ldr	r3, [pc, #560]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ccc:	d10b      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cce:	4b89      	ldr	r3, [pc, #548]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d06c      	beq.n	8001db4 <HAL_RCC_OscConfig+0x12c>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d168      	bne.n	8001db4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e24c      	b.n	8002180 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cee:	d106      	bne.n	8001cfe <HAL_RCC_OscConfig+0x76>
 8001cf0:	4b80      	ldr	r3, [pc, #512]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a7f      	ldr	r2, [pc, #508]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	e02e      	b.n	8001d5c <HAL_RCC_OscConfig+0xd4>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x98>
 8001d06:	4b7b      	ldr	r3, [pc, #492]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a7a      	ldr	r2, [pc, #488]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4b78      	ldr	r3, [pc, #480]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a77      	ldr	r2, [pc, #476]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	e01d      	b.n	8001d5c <HAL_RCC_OscConfig+0xd4>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d28:	d10c      	bne.n	8001d44 <HAL_RCC_OscConfig+0xbc>
 8001d2a:	4b72      	ldr	r3, [pc, #456]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a71      	ldr	r2, [pc, #452]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	4b6f      	ldr	r3, [pc, #444]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a6e      	ldr	r2, [pc, #440]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	e00b      	b.n	8001d5c <HAL_RCC_OscConfig+0xd4>
 8001d44:	4b6b      	ldr	r3, [pc, #428]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a6a      	ldr	r2, [pc, #424]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	4b68      	ldr	r3, [pc, #416]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a67      	ldr	r2, [pc, #412]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d013      	beq.n	8001d8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7ff fbfc 	bl	8001560 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d6c:	f7ff fbf8 	bl	8001560 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b64      	cmp	r3, #100	; 0x64
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e200      	b.n	8002180 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7e:	4b5d      	ldr	r3, [pc, #372]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0xe4>
 8001d8a:	e014      	b.n	8001db6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fbe8 	bl	8001560 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d94:	f7ff fbe4 	bl	8001560 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b64      	cmp	r3, #100	; 0x64
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e1ec      	b.n	8002180 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da6:	4b53      	ldr	r3, [pc, #332]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x10c>
 8001db2:	e000      	b.n	8001db6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d063      	beq.n	8001e8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dc2:	4b4c      	ldr	r3, [pc, #304]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00b      	beq.n	8001de6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dce:	4b49      	ldr	r3, [pc, #292]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d11c      	bne.n	8001e14 <HAL_RCC_OscConfig+0x18c>
 8001dda:	4b46      	ldr	r3, [pc, #280]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d116      	bne.n	8001e14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de6:	4b43      	ldr	r3, [pc, #268]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d005      	beq.n	8001dfe <HAL_RCC_OscConfig+0x176>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d001      	beq.n	8001dfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e1c0      	b.n	8002180 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfe:	4b3d      	ldr	r3, [pc, #244]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4939      	ldr	r1, [pc, #228]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e12:	e03a      	b.n	8001e8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d020      	beq.n	8001e5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e1c:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e22:	f7ff fb9d 	bl	8001560 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2a:	f7ff fb99 	bl	8001560 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e1a1      	b.n	8002180 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e48:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4927      	ldr	r1, [pc, #156]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	600b      	str	r3, [r1, #0]
 8001e5c:	e015      	b.n	8001e8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e5e:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7ff fb7c 	bl	8001560 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6c:	f7ff fb78 	bl	8001560 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e180      	b.n	8002180 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d03a      	beq.n	8001f0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d019      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e9e:	4b17      	ldr	r3, [pc, #92]	; (8001efc <HAL_RCC_OscConfig+0x274>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea4:	f7ff fb5c 	bl	8001560 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eac:	f7ff fb58 	bl	8001560 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e160      	b.n	8002180 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f000 fad8 	bl	8002480 <RCC_Delay>
 8001ed0:	e01c      	b.n	8001f0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <HAL_RCC_OscConfig+0x274>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed8:	f7ff fb42 	bl	8001560 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ede:	e00f      	b.n	8001f00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee0:	f7ff fb3e 	bl	8001560 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d908      	bls.n	8001f00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e146      	b.n	8002180 <HAL_RCC_OscConfig+0x4f8>
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	42420000 	.word	0x42420000
 8001efc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f00:	4b92      	ldr	r3, [pc, #584]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1e9      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80a6 	beq.w	8002066 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1e:	4b8b      	ldr	r3, [pc, #556]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10d      	bne.n	8001f46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f2a:	4b88      	ldr	r3, [pc, #544]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	4a87      	ldr	r2, [pc, #540]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f34:	61d3      	str	r3, [r2, #28]
 8001f36:	4b85      	ldr	r3, [pc, #532]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f42:	2301      	movs	r3, #1
 8001f44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f46:	4b82      	ldr	r3, [pc, #520]	; (8002150 <HAL_RCC_OscConfig+0x4c8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d118      	bne.n	8001f84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f52:	4b7f      	ldr	r3, [pc, #508]	; (8002150 <HAL_RCC_OscConfig+0x4c8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a7e      	ldr	r2, [pc, #504]	; (8002150 <HAL_RCC_OscConfig+0x4c8>)
 8001f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5e:	f7ff faff 	bl	8001560 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f66:	f7ff fafb 	bl	8001560 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b64      	cmp	r3, #100	; 0x64
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e103      	b.n	8002180 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f78:	4b75      	ldr	r3, [pc, #468]	; (8002150 <HAL_RCC_OscConfig+0x4c8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d106      	bne.n	8001f9a <HAL_RCC_OscConfig+0x312>
 8001f8c:	4b6f      	ldr	r3, [pc, #444]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	4a6e      	ldr	r2, [pc, #440]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6213      	str	r3, [r2, #32]
 8001f98:	e02d      	b.n	8001ff6 <HAL_RCC_OscConfig+0x36e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10c      	bne.n	8001fbc <HAL_RCC_OscConfig+0x334>
 8001fa2:	4b6a      	ldr	r3, [pc, #424]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	4a69      	ldr	r2, [pc, #420]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	f023 0301 	bic.w	r3, r3, #1
 8001fac:	6213      	str	r3, [r2, #32]
 8001fae:	4b67      	ldr	r3, [pc, #412]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	4a66      	ldr	r2, [pc, #408]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	f023 0304 	bic.w	r3, r3, #4
 8001fb8:	6213      	str	r3, [r2, #32]
 8001fba:	e01c      	b.n	8001ff6 <HAL_RCC_OscConfig+0x36e>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b05      	cmp	r3, #5
 8001fc2:	d10c      	bne.n	8001fde <HAL_RCC_OscConfig+0x356>
 8001fc4:	4b61      	ldr	r3, [pc, #388]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	4a60      	ldr	r2, [pc, #384]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	f043 0304 	orr.w	r3, r3, #4
 8001fce:	6213      	str	r3, [r2, #32]
 8001fd0:	4b5e      	ldr	r3, [pc, #376]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	4a5d      	ldr	r2, [pc, #372]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6213      	str	r3, [r2, #32]
 8001fdc:	e00b      	b.n	8001ff6 <HAL_RCC_OscConfig+0x36e>
 8001fde:	4b5b      	ldr	r3, [pc, #364]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	4a5a      	ldr	r2, [pc, #360]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	6213      	str	r3, [r2, #32]
 8001fea:	4b58      	ldr	r3, [pc, #352]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4a57      	ldr	r2, [pc, #348]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	f023 0304 	bic.w	r3, r3, #4
 8001ff4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d015      	beq.n	800202a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffe:	f7ff faaf 	bl	8001560 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002004:	e00a      	b.n	800201c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002006:	f7ff faab 	bl	8001560 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	f241 3288 	movw	r2, #5000	; 0x1388
 8002014:	4293      	cmp	r3, r2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e0b1      	b.n	8002180 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201c:	4b4b      	ldr	r3, [pc, #300]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0ee      	beq.n	8002006 <HAL_RCC_OscConfig+0x37e>
 8002028:	e014      	b.n	8002054 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202a:	f7ff fa99 	bl	8001560 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002030:	e00a      	b.n	8002048 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002032:	f7ff fa95 	bl	8001560 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002040:	4293      	cmp	r3, r2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e09b      	b.n	8002180 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002048:	4b40      	ldr	r3, [pc, #256]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1ee      	bne.n	8002032 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002054:	7dfb      	ldrb	r3, [r7, #23]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d105      	bne.n	8002066 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800205a:	4b3c      	ldr	r3, [pc, #240]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	4a3b      	ldr	r2, [pc, #236]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 8002060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002064:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 8087 	beq.w	800217e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002070:	4b36      	ldr	r3, [pc, #216]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 030c 	and.w	r3, r3, #12
 8002078:	2b08      	cmp	r3, #8
 800207a:	d061      	beq.n	8002140 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	2b02      	cmp	r3, #2
 8002082:	d146      	bne.n	8002112 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002084:	4b33      	ldr	r3, [pc, #204]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208a:	f7ff fa69 	bl	8001560 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002092:	f7ff fa65 	bl	8001560 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e06d      	b.n	8002180 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a4:	4b29      	ldr	r3, [pc, #164]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f0      	bne.n	8002092 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b8:	d108      	bne.n	80020cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020ba:	4b24      	ldr	r3, [pc, #144]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	4921      	ldr	r1, [pc, #132]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020cc:	4b1f      	ldr	r3, [pc, #124]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a19      	ldr	r1, [r3, #32]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	430b      	orrs	r3, r1
 80020de:	491b      	ldr	r1, [pc, #108]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e4:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ea:	f7ff fa39 	bl	8001560 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f2:	f7ff fa35 	bl	8001560 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e03d      	b.n	8002180 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002104:	4b11      	ldr	r3, [pc, #68]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x46a>
 8002110:	e035      	b.n	800217e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <HAL_RCC_OscConfig+0x4cc>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7ff fa22 	bl	8001560 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002120:	f7ff fa1e 	bl	8001560 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e026      	b.n	8002180 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_RCC_OscConfig+0x4c4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x498>
 800213e:	e01e      	b.n	800217e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d107      	bne.n	8002158 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e019      	b.n	8002180 <HAL_RCC_OscConfig+0x4f8>
 800214c:	40021000 	.word	0x40021000
 8002150:	40007000 	.word	0x40007000
 8002154:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_RCC_OscConfig+0x500>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	429a      	cmp	r2, r3
 800216a:	d106      	bne.n	800217a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002176:	429a      	cmp	r2, r3
 8002178:	d001      	beq.n	800217e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40021000 	.word	0x40021000

0800218c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0d0      	b.n	8002342 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021a0:	4b6a      	ldr	r3, [pc, #424]	; (800234c <HAL_RCC_ClockConfig+0x1c0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d910      	bls.n	80021d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b67      	ldr	r3, [pc, #412]	; (800234c <HAL_RCC_ClockConfig+0x1c0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 0207 	bic.w	r2, r3, #7
 80021b6:	4965      	ldr	r1, [pc, #404]	; (800234c <HAL_RCC_ClockConfig+0x1c0>)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	4b63      	ldr	r3, [pc, #396]	; (800234c <HAL_RCC_ClockConfig+0x1c0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0b8      	b.n	8002342 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d020      	beq.n	800221e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e8:	4b59      	ldr	r3, [pc, #356]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4a58      	ldr	r2, [pc, #352]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002200:	4b53      	ldr	r3, [pc, #332]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	4a52      	ldr	r2, [pc, #328]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800220a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800220c:	4b50      	ldr	r3, [pc, #320]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	494d      	ldr	r1, [pc, #308]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	4313      	orrs	r3, r2
 800221c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d040      	beq.n	80022ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	4b47      	ldr	r3, [pc, #284]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d115      	bne.n	800226a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e07f      	b.n	8002342 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d107      	bne.n	800225a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224a:	4b41      	ldr	r3, [pc, #260]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d109      	bne.n	800226a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e073      	b.n	8002342 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225a:	4b3d      	ldr	r3, [pc, #244]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e06b      	b.n	8002342 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800226a:	4b39      	ldr	r3, [pc, #228]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f023 0203 	bic.w	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	4936      	ldr	r1, [pc, #216]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800227c:	f7ff f970 	bl	8001560 <HAL_GetTick>
 8002280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	e00a      	b.n	800229a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002284:	f7ff f96c 	bl	8001560 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002292:	4293      	cmp	r3, r2
 8002294:	d901      	bls.n	800229a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e053      	b.n	8002342 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 020c 	and.w	r2, r3, #12
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d1eb      	bne.n	8002284 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022ac:	4b27      	ldr	r3, [pc, #156]	; (800234c <HAL_RCC_ClockConfig+0x1c0>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d210      	bcs.n	80022dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b24      	ldr	r3, [pc, #144]	; (800234c <HAL_RCC_ClockConfig+0x1c0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 0207 	bic.w	r2, r3, #7
 80022c2:	4922      	ldr	r1, [pc, #136]	; (800234c <HAL_RCC_ClockConfig+0x1c0>)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b20      	ldr	r3, [pc, #128]	; (800234c <HAL_RCC_ClockConfig+0x1c0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e032      	b.n	8002342 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4916      	ldr	r1, [pc, #88]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002306:	4b12      	ldr	r3, [pc, #72]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	490e      	ldr	r1, [pc, #56]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	4313      	orrs	r3, r2
 8002318:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800231a:	f000 f821 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 800231e:	4602      	mov	r2, r0
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	490a      	ldr	r1, [pc, #40]	; (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 800232c:	5ccb      	ldrb	r3, [r1, r3]
 800232e:	fa22 f303 	lsr.w	r3, r2, r3
 8002332:	4a09      	ldr	r2, [pc, #36]	; (8002358 <HAL_RCC_ClockConfig+0x1cc>)
 8002334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <HAL_RCC_ClockConfig+0x1d0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff f8ce 	bl	80014dc <HAL_InitTick>

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40022000 	.word	0x40022000
 8002350:	40021000 	.word	0x40021000
 8002354:	080046b8 	.word	0x080046b8
 8002358:	20000024 	.word	0x20000024
 800235c:	20000028 	.word	0x20000028

08002360 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002360:	b490      	push	{r4, r7}
 8002362:	b08a      	sub	sp, #40	; 0x28
 8002364:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002366:	4b29      	ldr	r3, [pc, #164]	; (800240c <HAL_RCC_GetSysClockFreq+0xac>)
 8002368:	1d3c      	adds	r4, r7, #4
 800236a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800236c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002370:	f240 2301 	movw	r3, #513	; 0x201
 8002374:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
 800237e:	2300      	movs	r3, #0
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800238a:	4b21      	ldr	r3, [pc, #132]	; (8002410 <HAL_RCC_GetSysClockFreq+0xb0>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	2b04      	cmp	r3, #4
 8002398:	d002      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x40>
 800239a:	2b08      	cmp	r3, #8
 800239c:	d003      	beq.n	80023a6 <HAL_RCC_GetSysClockFreq+0x46>
 800239e:	e02b      	b.n	80023f8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023a0:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023a2:	623b      	str	r3, [r7, #32]
      break;
 80023a4:	e02b      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	0c9b      	lsrs	r3, r3, #18
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	3328      	adds	r3, #40	; 0x28
 80023b0:	443b      	add	r3, r7
 80023b2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023b6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d012      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023c2:	4b13      	ldr	r3, [pc, #76]	; (8002410 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	0c5b      	lsrs	r3, r3, #17
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	3328      	adds	r3, #40	; 0x28
 80023ce:	443b      	add	r3, r7
 80023d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	4a0e      	ldr	r2, [pc, #56]	; (8002414 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023da:	fb03 f202 	mul.w	r2, r3, r2
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
 80023e6:	e004      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	4a0b      	ldr	r2, [pc, #44]	; (8002418 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ec:	fb02 f303 	mul.w	r3, r2, r3
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	623b      	str	r3, [r7, #32]
      break;
 80023f6:	e002      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023fa:	623b      	str	r3, [r7, #32]
      break;
 80023fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023fe:	6a3b      	ldr	r3, [r7, #32]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3728      	adds	r7, #40	; 0x28
 8002404:	46bd      	mov	sp, r7
 8002406:	bc90      	pop	{r4, r7}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	080046a8 	.word	0x080046a8
 8002410:	40021000 	.word	0x40021000
 8002414:	007a1200 	.word	0x007a1200
 8002418:	003d0900 	.word	0x003d0900

0800241c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002420:	4b02      	ldr	r3, [pc, #8]	; (800242c <HAL_RCC_GetHCLKFreq+0x10>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr
 800242c:	20000024 	.word	0x20000024

08002430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002434:	f7ff fff2 	bl	800241c <HAL_RCC_GetHCLKFreq>
 8002438:	4602      	mov	r2, r0
 800243a:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	0a1b      	lsrs	r3, r3, #8
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	4903      	ldr	r1, [pc, #12]	; (8002454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002446:	5ccb      	ldrb	r3, [r1, r3]
 8002448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800244c:	4618      	mov	r0, r3
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40021000 	.word	0x40021000
 8002454:	080046c8 	.word	0x080046c8

08002458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800245c:	f7ff ffde 	bl	800241c <HAL_RCC_GetHCLKFreq>
 8002460:	4602      	mov	r2, r0
 8002462:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	0adb      	lsrs	r3, r3, #11
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	4903      	ldr	r1, [pc, #12]	; (800247c <HAL_RCC_GetPCLK2Freq+0x24>)
 800246e:	5ccb      	ldrb	r3, [r1, r3]
 8002470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40021000 	.word	0x40021000
 800247c:	080046c8 	.word	0x080046c8

08002480 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002488:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <RCC_Delay+0x34>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <RCC_Delay+0x38>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	0a5b      	lsrs	r3, r3, #9
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800249c:	bf00      	nop
  }
  while (Delay --);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1e5a      	subs	r2, r3, #1
 80024a2:	60fa      	str	r2, [r7, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f9      	bne.n	800249c <RCC_Delay+0x1c>
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr
 80024b4:	20000024 	.word	0x20000024
 80024b8:	10624dd3 	.word	0x10624dd3

080024bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e041      	b.n	8002552 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7fe fd64 	bl	8000fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3304      	adds	r3, #4
 80024f8:	4619      	mov	r1, r3
 80024fa:	4610      	mov	r0, r2
 80024fc:	f000 fc28 	bl	8002d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b01      	cmp	r3, #1
 800256e:	d001      	beq.n	8002574 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e03a      	b.n	80025ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a18      	ldr	r2, [pc, #96]	; (80025f4 <HAL_TIM_Base_Start_IT+0x98>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00e      	beq.n	80025b4 <HAL_TIM_Base_Start_IT+0x58>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800259e:	d009      	beq.n	80025b4 <HAL_TIM_Base_Start_IT+0x58>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a14      	ldr	r2, [pc, #80]	; (80025f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d004      	beq.n	80025b4 <HAL_TIM_Base_Start_IT+0x58>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a13      	ldr	r2, [pc, #76]	; (80025fc <HAL_TIM_Base_Start_IT+0xa0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d111      	bne.n	80025d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	d010      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0201 	orr.w	r2, r2, #1
 80025d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d6:	e007      	b.n	80025e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	40012c00 	.word	0x40012c00
 80025f8:	40000400 	.word	0x40000400
 80025fc:	40000800 	.word	0x40000800

08002600 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e041      	b.n	8002696 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d106      	bne.n	800262c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f839 	bl	800269e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2202      	movs	r2, #2
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3304      	adds	r3, #4
 800263c:	4619      	mov	r1, r3
 800263e:	4610      	mov	r0, r2
 8002640:	f000 fb86 	bl	8002d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d109      	bne.n	80026d4 <HAL_TIM_PWM_Start+0x24>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	bf14      	ite	ne
 80026cc:	2301      	movne	r3, #1
 80026ce:	2300      	moveq	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	e022      	b.n	800271a <HAL_TIM_PWM_Start+0x6a>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d109      	bne.n	80026ee <HAL_TIM_PWM_Start+0x3e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	bf14      	ite	ne
 80026e6:	2301      	movne	r3, #1
 80026e8:	2300      	moveq	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	e015      	b.n	800271a <HAL_TIM_PWM_Start+0x6a>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d109      	bne.n	8002708 <HAL_TIM_PWM_Start+0x58>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	bf14      	ite	ne
 8002700:	2301      	movne	r3, #1
 8002702:	2300      	moveq	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	e008      	b.n	800271a <HAL_TIM_PWM_Start+0x6a>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b01      	cmp	r3, #1
 8002712:	bf14      	ite	ne
 8002714:	2301      	movne	r3, #1
 8002716:	2300      	moveq	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e05e      	b.n	80027e0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d104      	bne.n	8002732 <HAL_TIM_PWM_Start+0x82>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002730:	e013      	b.n	800275a <HAL_TIM_PWM_Start+0xaa>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b04      	cmp	r3, #4
 8002736:	d104      	bne.n	8002742 <HAL_TIM_PWM_Start+0x92>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002740:	e00b      	b.n	800275a <HAL_TIM_PWM_Start+0xaa>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b08      	cmp	r3, #8
 8002746:	d104      	bne.n	8002752 <HAL_TIM_PWM_Start+0xa2>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002750:	e003      	b.n	800275a <HAL_TIM_PWM_Start+0xaa>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2202      	movs	r2, #2
 8002756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2201      	movs	r2, #1
 8002760:	6839      	ldr	r1, [r7, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f000 fd74 	bl	8003250 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a1e      	ldr	r2, [pc, #120]	; (80027e8 <HAL_TIM_PWM_Start+0x138>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d107      	bne.n	8002782 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002780:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a18      	ldr	r2, [pc, #96]	; (80027e8 <HAL_TIM_PWM_Start+0x138>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00e      	beq.n	80027aa <HAL_TIM_PWM_Start+0xfa>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002794:	d009      	beq.n	80027aa <HAL_TIM_PWM_Start+0xfa>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a14      	ldr	r2, [pc, #80]	; (80027ec <HAL_TIM_PWM_Start+0x13c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d004      	beq.n	80027aa <HAL_TIM_PWM_Start+0xfa>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <HAL_TIM_PWM_Start+0x140>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d111      	bne.n	80027ce <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b06      	cmp	r3, #6
 80027ba:	d010      	beq.n	80027de <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027cc:	e007      	b.n	80027de <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0201 	orr.w	r2, r2, #1
 80027dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40012c00 	.word	0x40012c00
 80027ec:	40000400 	.word	0x40000400
 80027f0:	40000800 	.word	0x40000800

080027f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b02      	cmp	r3, #2
 8002808:	d122      	bne.n	8002850 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b02      	cmp	r3, #2
 8002816:	d11b      	bne.n	8002850 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f06f 0202 	mvn.w	r2, #2
 8002820:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fa6f 	bl	8002d1a <HAL_TIM_IC_CaptureCallback>
 800283c:	e005      	b.n	800284a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fa62 	bl	8002d08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 fa71 	bl	8002d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	2b04      	cmp	r3, #4
 800285c:	d122      	bne.n	80028a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b04      	cmp	r3, #4
 800286a:	d11b      	bne.n	80028a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f06f 0204 	mvn.w	r2, #4
 8002874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2202      	movs	r2, #2
 800287a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fa45 	bl	8002d1a <HAL_TIM_IC_CaptureCallback>
 8002890:	e005      	b.n	800289e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 fa38 	bl	8002d08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 fa47 	bl	8002d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d122      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d11b      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f06f 0208 	mvn.w	r2, #8
 80028c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2204      	movs	r2, #4
 80028ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fa1b 	bl	8002d1a <HAL_TIM_IC_CaptureCallback>
 80028e4:	e005      	b.n	80028f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 fa0e 	bl	8002d08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 fa1d 	bl	8002d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f003 0310 	and.w	r3, r3, #16
 8002902:	2b10      	cmp	r3, #16
 8002904:	d122      	bne.n	800294c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f003 0310 	and.w	r3, r3, #16
 8002910:	2b10      	cmp	r3, #16
 8002912:	d11b      	bne.n	800294c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f06f 0210 	mvn.w	r2, #16
 800291c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2208      	movs	r2, #8
 8002922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f9f1 	bl	8002d1a <HAL_TIM_IC_CaptureCallback>
 8002938:	e005      	b.n	8002946 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f9e4 	bl	8002d08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f9f3 	bl	8002d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b01      	cmp	r3, #1
 8002958:	d10e      	bne.n	8002978 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b01      	cmp	r3, #1
 8002966:	d107      	bne.n	8002978 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 0201 	mvn.w	r2, #1
 8002970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7fe fade 	bl	8000f34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002982:	2b80      	cmp	r3, #128	; 0x80
 8002984:	d10e      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002990:	2b80      	cmp	r3, #128	; 0x80
 8002992:	d107      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800299c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 fce1 	bl	8003366 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ae:	2b40      	cmp	r3, #64	; 0x40
 80029b0:	d10e      	bne.n	80029d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029bc:	2b40      	cmp	r3, #64	; 0x40
 80029be:	d107      	bne.n	80029d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f9b7 	bl	8002d3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f003 0320 	and.w	r3, r3, #32
 80029da:	2b20      	cmp	r3, #32
 80029dc:	d10e      	bne.n	80029fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f003 0320 	and.w	r3, r3, #32
 80029e8:	2b20      	cmp	r3, #32
 80029ea:	d107      	bne.n	80029fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0220 	mvn.w	r2, #32
 80029f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fcac 	bl	8003354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e0ac      	b.n	8002b78 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b0c      	cmp	r3, #12
 8002a2a:	f200 809f 	bhi.w	8002b6c <HAL_TIM_PWM_ConfigChannel+0x168>
 8002a2e:	a201      	add	r2, pc, #4	; (adr r2, 8002a34 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a34:	08002a69 	.word	0x08002a69
 8002a38:	08002b6d 	.word	0x08002b6d
 8002a3c:	08002b6d 	.word	0x08002b6d
 8002a40:	08002b6d 	.word	0x08002b6d
 8002a44:	08002aa9 	.word	0x08002aa9
 8002a48:	08002b6d 	.word	0x08002b6d
 8002a4c:	08002b6d 	.word	0x08002b6d
 8002a50:	08002b6d 	.word	0x08002b6d
 8002a54:	08002aeb 	.word	0x08002aeb
 8002a58:	08002b6d 	.word	0x08002b6d
 8002a5c:	08002b6d 	.word	0x08002b6d
 8002a60:	08002b6d 	.word	0x08002b6d
 8002a64:	08002b2b 	.word	0x08002b2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 f9d0 	bl	8002e14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699a      	ldr	r2, [r3, #24]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0208 	orr.w	r2, r2, #8
 8002a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699a      	ldr	r2, [r3, #24]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0204 	bic.w	r2, r2, #4
 8002a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6999      	ldr	r1, [r3, #24]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	691a      	ldr	r2, [r3, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	619a      	str	r2, [r3, #24]
      break;
 8002aa6:	e062      	b.n	8002b6e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 fa16 	bl	8002ee0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699a      	ldr	r2, [r3, #24]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699a      	ldr	r2, [r3, #24]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6999      	ldr	r1, [r3, #24]
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	021a      	lsls	r2, r3, #8
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	619a      	str	r2, [r3, #24]
      break;
 8002ae8:	e041      	b.n	8002b6e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68b9      	ldr	r1, [r7, #8]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 fa5f 	bl	8002fb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	69da      	ldr	r2, [r3, #28]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 0208 	orr.w	r2, r2, #8
 8002b04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	69da      	ldr	r2, [r3, #28]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0204 	bic.w	r2, r2, #4
 8002b14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	69d9      	ldr	r1, [r3, #28]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	61da      	str	r2, [r3, #28]
      break;
 8002b28:	e021      	b.n	8002b6e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68b9      	ldr	r1, [r7, #8]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 faa9 	bl	8003088 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	69da      	ldr	r2, [r3, #28]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	69da      	ldr	r2, [r3, #28]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	69d9      	ldr	r1, [r3, #28]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	021a      	lsls	r2, r3, #8
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	61da      	str	r2, [r3, #28]
      break;
 8002b6a:	e000      	b.n	8002b6e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002b6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_TIM_ConfigClockSource+0x18>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e0b3      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x180>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bbe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd0:	d03e      	beq.n	8002c50 <HAL_TIM_ConfigClockSource+0xd0>
 8002bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd6:	f200 8087 	bhi.w	8002ce8 <HAL_TIM_ConfigClockSource+0x168>
 8002bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bde:	f000 8085 	beq.w	8002cec <HAL_TIM_ConfigClockSource+0x16c>
 8002be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be6:	d87f      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x168>
 8002be8:	2b70      	cmp	r3, #112	; 0x70
 8002bea:	d01a      	beq.n	8002c22 <HAL_TIM_ConfigClockSource+0xa2>
 8002bec:	2b70      	cmp	r3, #112	; 0x70
 8002bee:	d87b      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x168>
 8002bf0:	2b60      	cmp	r3, #96	; 0x60
 8002bf2:	d050      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x116>
 8002bf4:	2b60      	cmp	r3, #96	; 0x60
 8002bf6:	d877      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x168>
 8002bf8:	2b50      	cmp	r3, #80	; 0x50
 8002bfa:	d03c      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0xf6>
 8002bfc:	2b50      	cmp	r3, #80	; 0x50
 8002bfe:	d873      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x168>
 8002c00:	2b40      	cmp	r3, #64	; 0x40
 8002c02:	d058      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x136>
 8002c04:	2b40      	cmp	r3, #64	; 0x40
 8002c06:	d86f      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x168>
 8002c08:	2b30      	cmp	r3, #48	; 0x30
 8002c0a:	d064      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x156>
 8002c0c:	2b30      	cmp	r3, #48	; 0x30
 8002c0e:	d86b      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x168>
 8002c10:	2b20      	cmp	r3, #32
 8002c12:	d060      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x156>
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d867      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x168>
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d05c      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x156>
 8002c1c:	2b10      	cmp	r3, #16
 8002c1e:	d05a      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c20:	e062      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	6899      	ldr	r1, [r3, #8]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f000 faee 	bl	8003212 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c44:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	609a      	str	r2, [r3, #8]
      break;
 8002c4e:	e04e      	b.n	8002cee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	6899      	ldr	r1, [r3, #8]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f000 fad7 	bl	8003212 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c72:	609a      	str	r2, [r3, #8]
      break;
 8002c74:	e03b      	b.n	8002cee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6859      	ldr	r1, [r3, #4]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	461a      	mov	r2, r3
 8002c84:	f000 fa4e 	bl	8003124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2150      	movs	r1, #80	; 0x50
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 faa5 	bl	80031de <TIM_ITRx_SetConfig>
      break;
 8002c94:	e02b      	b.n	8002cee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	6859      	ldr	r1, [r3, #4]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f000 fa6c 	bl	8003180 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2160      	movs	r1, #96	; 0x60
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fa95 	bl	80031de <TIM_ITRx_SetConfig>
      break;
 8002cb4:	e01b      	b.n	8002cee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6818      	ldr	r0, [r3, #0]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	6859      	ldr	r1, [r3, #4]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	f000 fa2e 	bl	8003124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2140      	movs	r1, #64	; 0x40
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fa85 	bl	80031de <TIM_ITRx_SetConfig>
      break;
 8002cd4:	e00b      	b.n	8002cee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	f000 fa7c 	bl	80031de <TIM_ITRx_SetConfig>
        break;
 8002ce6:	e002      	b.n	8002cee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ce8:	bf00      	nop
 8002cea:	e000      	b.n	8002cee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr

08002d1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr

08002d3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr

08002d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a29      	ldr	r2, [pc, #164]	; (8002e08 <TIM_Base_SetConfig+0xb8>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d00b      	beq.n	8002d80 <TIM_Base_SetConfig+0x30>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6e:	d007      	beq.n	8002d80 <TIM_Base_SetConfig+0x30>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a26      	ldr	r2, [pc, #152]	; (8002e0c <TIM_Base_SetConfig+0xbc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d003      	beq.n	8002d80 <TIM_Base_SetConfig+0x30>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a25      	ldr	r2, [pc, #148]	; (8002e10 <TIM_Base_SetConfig+0xc0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d108      	bne.n	8002d92 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a1c      	ldr	r2, [pc, #112]	; (8002e08 <TIM_Base_SetConfig+0xb8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00b      	beq.n	8002db2 <TIM_Base_SetConfig+0x62>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da0:	d007      	beq.n	8002db2 <TIM_Base_SetConfig+0x62>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a19      	ldr	r2, [pc, #100]	; (8002e0c <TIM_Base_SetConfig+0xbc>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d003      	beq.n	8002db2 <TIM_Base_SetConfig+0x62>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a18      	ldr	r2, [pc, #96]	; (8002e10 <TIM_Base_SetConfig+0xc0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d108      	bne.n	8002dc4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a07      	ldr	r2, [pc, #28]	; (8002e08 <TIM_Base_SetConfig+0xb8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d103      	bne.n	8002df8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	615a      	str	r2, [r3, #20]
}
 8002dfe:	bf00      	nop
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr
 8002e08:	40012c00 	.word	0x40012c00
 8002e0c:	40000400 	.word	0x40000400
 8002e10:	40000800 	.word	0x40000800

08002e14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b087      	sub	sp, #28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	f023 0201 	bic.w	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f023 0303 	bic.w	r3, r3, #3
 8002e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f023 0302 	bic.w	r3, r3, #2
 8002e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a1c      	ldr	r2, [pc, #112]	; (8002edc <TIM_OC1_SetConfig+0xc8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d10c      	bne.n	8002e8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f023 0308 	bic.w	r3, r3, #8
 8002e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f023 0304 	bic.w	r3, r3, #4
 8002e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a13      	ldr	r2, [pc, #76]	; (8002edc <TIM_OC1_SetConfig+0xc8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d111      	bne.n	8002eb6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	621a      	str	r2, [r3, #32]
}
 8002ed0:	bf00      	nop
 8002ed2:	371c      	adds	r7, #28
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40012c00 	.word	0x40012c00

08002ee0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	f023 0210 	bic.w	r2, r3, #16
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	021b      	lsls	r3, r3, #8
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f023 0320 	bic.w	r3, r3, #32
 8002f2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a1d      	ldr	r2, [pc, #116]	; (8002fb0 <TIM_OC2_SetConfig+0xd0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d10d      	bne.n	8002f5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a14      	ldr	r2, [pc, #80]	; (8002fb0 <TIM_OC2_SetConfig+0xd0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d113      	bne.n	8002f8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	621a      	str	r2, [r3, #32]
}
 8002fa6:	bf00      	nop
 8002fa8:	371c      	adds	r7, #28
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr
 8002fb0:	40012c00 	.word	0x40012c00

08002fb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0303 	bic.w	r3, r3, #3
 8002fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <TIM_OC3_SetConfig+0xd0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d10d      	bne.n	800302e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003018:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	4313      	orrs	r3, r2
 8003024:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800302c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a14      	ldr	r2, [pc, #80]	; (8003084 <TIM_OC3_SetConfig+0xd0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d113      	bne.n	800305e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800303c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003044:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	4313      	orrs	r3, r2
 8003050:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	621a      	str	r2, [r3, #32]
}
 8003078:	bf00      	nop
 800307a:	371c      	adds	r7, #28
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40012c00 	.word	0x40012c00

08003088 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	031b      	lsls	r3, r3, #12
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a0f      	ldr	r2, [pc, #60]	; (8003120 <TIM_OC4_SetConfig+0x98>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d109      	bne.n	80030fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	019b      	lsls	r3, r3, #6
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	621a      	str	r2, [r3, #32]
}
 8003116:	bf00      	nop
 8003118:	371c      	adds	r7, #28
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr
 8003120:	40012c00 	.word	0x40012c00

08003124 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	f023 0201 	bic.w	r2, r3, #1
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800314e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f023 030a 	bic.w	r3, r3, #10
 8003160:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	621a      	str	r2, [r3, #32]
}
 8003176:	bf00      	nop
 8003178:	371c      	adds	r7, #28
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr

08003180 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f023 0210 	bic.w	r2, r3, #16
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	031b      	lsls	r3, r3, #12
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	621a      	str	r2, [r3, #32]
}
 80031d4:	bf00      	nop
 80031d6:	371c      	adds	r7, #28
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031de:	b480      	push	{r7}
 80031e0:	b085      	sub	sp, #20
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f043 0307 	orr.w	r3, r3, #7
 8003200:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	609a      	str	r2, [r3, #8]
}
 8003208:	bf00      	nop
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr

08003212 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003212:	b480      	push	{r7}
 8003214:	b087      	sub	sp, #28
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
 800321e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800322c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	021a      	lsls	r2, r3, #8
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	431a      	orrs	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	4313      	orrs	r3, r2
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	609a      	str	r2, [r3, #8]
}
 8003246:	bf00      	nop
 8003248:	371c      	adds	r7, #28
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f003 031f 	and.w	r3, r3, #31
 8003262:	2201      	movs	r2, #1
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a1a      	ldr	r2, [r3, #32]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	43db      	mvns	r3, r3
 8003272:	401a      	ands	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a1a      	ldr	r2, [r3, #32]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	fa01 f303 	lsl.w	r3, r1, r3
 8003288:	431a      	orrs	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	621a      	str	r2, [r3, #32]
}
 800328e:	bf00      	nop
 8003290:	371c      	adds	r7, #28
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e046      	b.n	800333e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a16      	ldr	r2, [pc, #88]	; (8003348 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00e      	beq.n	8003312 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032fc:	d009      	beq.n	8003312 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a12      	ldr	r2, [pc, #72]	; (800334c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d004      	beq.n	8003312 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a10      	ldr	r2, [pc, #64]	; (8003350 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d10c      	bne.n	800332c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003318:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	4313      	orrs	r3, r2
 8003322:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr
 8003348:	40012c00 	.word	0x40012c00
 800334c:	40000400 	.word	0x40000400
 8003350:	40000800 	.word	0x40000800

08003354 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr

08003366 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr

08003378 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e03f      	b.n	800340a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fd fe78 	bl	8001094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2224      	movs	r2, #36	; 0x24
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fc25 	bl	8003c0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695a      	ldr	r2, [r3, #20]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b08a      	sub	sp, #40	; 0x28
 8003416:	af02      	add	r7, sp, #8
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	603b      	str	r3, [r7, #0]
 800341e:	4613      	mov	r3, r2
 8003420:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b20      	cmp	r3, #32
 8003430:	d17c      	bne.n	800352c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d002      	beq.n	800343e <HAL_UART_Transmit+0x2c>
 8003438:	88fb      	ldrh	r3, [r7, #6]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e075      	b.n	800352e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_UART_Transmit+0x3e>
 800344c:	2302      	movs	r3, #2
 800344e:	e06e      	b.n	800352e <HAL_UART_Transmit+0x11c>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2221      	movs	r2, #33	; 0x21
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003466:	f7fe f87b 	bl	8001560 <HAL_GetTick>
 800346a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	88fa      	ldrh	r2, [r7, #6]
 8003470:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	88fa      	ldrh	r2, [r7, #6]
 8003476:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003480:	d108      	bne.n	8003494 <HAL_UART_Transmit+0x82>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d104      	bne.n	8003494 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	61bb      	str	r3, [r7, #24]
 8003492:	e003      	b.n	800349c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003498:	2300      	movs	r3, #0
 800349a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034a4:	e02a      	b.n	80034fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2200      	movs	r2, #0
 80034ae:	2180      	movs	r1, #128	; 0x80
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 fa11 	bl	80038d8 <UART_WaitOnFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e036      	b.n	800352e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10b      	bne.n	80034de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	3302      	adds	r3, #2
 80034da:	61bb      	str	r3, [r7, #24]
 80034dc:	e007      	b.n	80034ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	781a      	ldrb	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	3301      	adds	r3, #1
 80034ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1cf      	bne.n	80034a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2200      	movs	r2, #0
 800350e:	2140      	movs	r1, #64	; 0x40
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f9e1 	bl	80038d8 <UART_WaitOnFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e006      	b.n	800352e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	e000      	b.n	800352e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800352c:	2302      	movs	r3, #2
  }
}
 800352e:	4618      	mov	r0, r3
 8003530:	3720      	adds	r7, #32
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08a      	sub	sp, #40	; 0x28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003558:	2300      	movs	r3, #0
 800355a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10d      	bne.n	800358a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_UART_IRQHandler+0x52>
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fa99 	bl	8003aba <UART_Receive_IT>
      return;
 8003588:	e17b      	b.n	8003882 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 80b1 	beq.w	80036f4 <HAL_UART_IRQHandler+0x1bc>
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d105      	bne.n	80035a8 <HAL_UART_IRQHandler+0x70>
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 80a6 	beq.w	80036f4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_UART_IRQHandler+0x90>
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	f043 0201 	orr.w	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <HAL_UART_IRQHandler+0xb0>
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	f043 0202 	orr.w	r2, r3, #2
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <HAL_UART_IRQHandler+0xd0>
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	f043 0204 	orr.w	r2, r3, #4
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00f      	beq.n	8003632 <HAL_UART_IRQHandler+0xfa>
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b00      	cmp	r3, #0
 800361a:	d104      	bne.n	8003626 <HAL_UART_IRQHandler+0xee>
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	f043 0208 	orr.w	r2, r3, #8
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 811e 	beq.w	8003878 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d007      	beq.n	8003656 <HAL_UART_IRQHandler+0x11e>
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	f003 0320 	and.w	r3, r3, #32
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 fa32 	bl	8003aba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf14      	ite	ne
 8003664:	2301      	movne	r3, #1
 8003666:	2300      	moveq	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	d102      	bne.n	800367e <HAL_UART_IRQHandler+0x146>
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d031      	beq.n	80036e2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f974 	bl	800396c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	d023      	beq.n	80036da <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695a      	ldr	r2, [r3, #20]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d013      	beq.n	80036d2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	4a76      	ldr	r2, [pc, #472]	; (8003888 <HAL_UART_IRQHandler+0x350>)
 80036b0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe f8a4 	bl	8001804 <HAL_DMA_Abort_IT>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d016      	beq.n	80036f0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036cc:	4610      	mov	r0, r2
 80036ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d0:	e00e      	b.n	80036f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f8ec 	bl	80038b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d8:	e00a      	b.n	80036f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f8e8 	bl	80038b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e0:	e006      	b.n	80036f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f8e4 	bl	80038b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80036ee:	e0c3      	b.n	8003878 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f0:	bf00      	nop
    return;
 80036f2:	e0c1      	b.n	8003878 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	f040 80a1 	bne.w	8003840 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 809b 	beq.w	8003840 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 8095 	beq.w	8003840 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003716:	2300      	movs	r3, #0
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d04e      	beq.n	80037d8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003744:	8a3b      	ldrh	r3, [r7, #16]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 8098 	beq.w	800387c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003750:	8a3a      	ldrh	r2, [r7, #16]
 8003752:	429a      	cmp	r2, r3
 8003754:	f080 8092 	bcs.w	800387c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	8a3a      	ldrh	r2, [r7, #16]
 800375c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	2b20      	cmp	r3, #32
 8003766:	d02b      	beq.n	80037c0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003776:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003796:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0210 	bic.w	r2, r2, #16
 80037b4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fd ffe7 	bl	800178e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	4619      	mov	r1, r3
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f876 	bl	80038c2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80037d6:	e051      	b.n	800387c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d047      	beq.n	8003880 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80037f0:	8a7b      	ldrh	r3, [r7, #18]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d044      	beq.n	8003880 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003804:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695a      	ldr	r2, [r3, #20]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0201 	bic.w	r2, r2, #1
 8003814:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0210 	bic.w	r2, r2, #16
 8003832:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003834:	8a7b      	ldrh	r3, [r7, #18]
 8003836:	4619      	mov	r1, r3
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f842 	bl	80038c2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800383e:	e01f      	b.n	8003880 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003846:	2b00      	cmp	r3, #0
 8003848:	d008      	beq.n	800385c <HAL_UART_IRQHandler+0x324>
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f8c9 	bl	80039ec <UART_Transmit_IT>
    return;
 800385a:	e012      	b.n	8003882 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00d      	beq.n	8003882 <HAL_UART_IRQHandler+0x34a>
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f90a 	bl	8003a8a <UART_EndTransmit_IT>
    return;
 8003876:	e004      	b.n	8003882 <HAL_UART_IRQHandler+0x34a>
    return;
 8003878:	bf00      	nop
 800387a:	e002      	b.n	8003882 <HAL_UART_IRQHandler+0x34a>
      return;
 800387c:	bf00      	nop
 800387e:	e000      	b.n	8003882 <HAL_UART_IRQHandler+0x34a>
      return;
 8003880:	bf00      	nop
  }
}
 8003882:	3728      	adds	r7, #40	; 0x28
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	080039c5 	.word	0x080039c5

0800388c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr

0800389e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr

080038b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr

080038c2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	460b      	mov	r3, r1
 80038cc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	4613      	mov	r3, r2
 80038e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038e8:	e02c      	b.n	8003944 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f0:	d028      	beq.n	8003944 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d007      	beq.n	8003908 <UART_WaitOnFlagUntilTimeout+0x30>
 80038f8:	f7fd fe32 	bl	8001560 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	429a      	cmp	r2, r3
 8003906:	d21d      	bcs.n	8003944 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003916:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0201 	bic.w	r2, r2, #1
 8003926:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e00f      	b.n	8003964 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	4013      	ands	r3, r2
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	429a      	cmp	r2, r3
 8003952:	bf0c      	ite	eq
 8003954:	2301      	moveq	r3, #1
 8003956:	2300      	movne	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	461a      	mov	r2, r3
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	429a      	cmp	r2, r3
 8003960:	d0c3      	beq.n	80038ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003982:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695a      	ldr	r2, [r3, #20]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0201 	bic.w	r2, r2, #1
 8003992:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	2b01      	cmp	r3, #1
 800399a:	d107      	bne.n	80039ac <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0210 	bic.w	r2, r2, #16
 80039aa:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr

080039c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f7ff ff66 	bl	80038b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b21      	cmp	r3, #33	; 0x21
 80039fe:	d13e      	bne.n	8003a7e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a08:	d114      	bne.n	8003a34 <UART_Transmit_IT+0x48>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d110      	bne.n	8003a34 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a26:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	1c9a      	adds	r2, r3, #2
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	621a      	str	r2, [r3, #32]
 8003a32:	e008      	b.n	8003a46 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	1c59      	adds	r1, r3, #1
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6211      	str	r1, [r2, #32]
 8003a3e:	781a      	ldrb	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	4619      	mov	r1, r3
 8003a54:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10f      	bne.n	8003a7a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e000      	b.n	8003a80 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a7e:	2302      	movs	r3, #2
  }
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bc80      	pop	{r7}
 8003a88:	4770      	bx	lr

08003a8a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aa0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff feee 	bl	800388c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b086      	sub	sp, #24
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b22      	cmp	r3, #34	; 0x22
 8003acc:	f040 8099 	bne.w	8003c02 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad8:	d117      	bne.n	8003b0a <UART_Receive_IT+0x50>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d113      	bne.n	8003b0a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aea:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b02:	1c9a      	adds	r2, r3, #2
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	629a      	str	r2, [r3, #40]	; 0x28
 8003b08:	e026      	b.n	8003b58 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b1c:	d007      	beq.n	8003b2e <UART_Receive_IT+0x74>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10a      	bne.n	8003b3c <UART_Receive_IT+0x82>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	701a      	strb	r2, [r3, #0]
 8003b3a:	e008      	b.n	8003b4e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	4619      	mov	r1, r3
 8003b66:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d148      	bne.n	8003bfe <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0220 	bic.w	r2, r2, #32
 8003b7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695a      	ldr	r2, [r3, #20]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d123      	bne.n	8003bf4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0210 	bic.w	r2, r2, #16
 8003bc0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b10      	cmp	r3, #16
 8003bce:	d10a      	bne.n	8003be6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bea:	4619      	mov	r1, r3
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff fe68 	bl	80038c2 <HAL_UARTEx_RxEventCallback>
 8003bf2:	e002      	b.n	8003bfa <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff fe52 	bl	800389e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e002      	b.n	8003c04 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e000      	b.n	8003c04 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003c02:	2302      	movs	r3, #2
  }
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c46:	f023 030c 	bic.w	r3, r3, #12
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6812      	ldr	r2, [r2, #0]
 8003c4e:	68b9      	ldr	r1, [r7, #8]
 8003c50:	430b      	orrs	r3, r1
 8003c52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699a      	ldr	r2, [r3, #24]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a2c      	ldr	r2, [pc, #176]	; (8003d20 <UART_SetConfig+0x114>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d103      	bne.n	8003c7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c74:	f7fe fbf0 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	e002      	b.n	8003c82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c7c:	f7fe fbd8 	bl	8002430 <HAL_RCC_GetPCLK1Freq>
 8003c80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4613      	mov	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	009a      	lsls	r2, r3, #2
 8003c8c:	441a      	add	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c98:	4a22      	ldr	r2, [pc, #136]	; (8003d24 <UART_SetConfig+0x118>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	0119      	lsls	r1, r3, #4
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	009a      	lsls	r2, r3, #2
 8003cac:	441a      	add	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cb8:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <UART_SetConfig+0x118>)
 8003cba:	fba3 0302 	umull	r0, r3, r3, r2
 8003cbe:	095b      	lsrs	r3, r3, #5
 8003cc0:	2064      	movs	r0, #100	; 0x64
 8003cc2:	fb00 f303 	mul.w	r3, r0, r3
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	3332      	adds	r3, #50	; 0x32
 8003ccc:	4a15      	ldr	r2, [pc, #84]	; (8003d24 <UART_SetConfig+0x118>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd8:	4419      	add	r1, r3
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	009a      	lsls	r2, r3, #2
 8003ce4:	441a      	add	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <UART_SetConfig+0x118>)
 8003cf2:	fba3 0302 	umull	r0, r3, r3, r2
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	2064      	movs	r0, #100	; 0x64
 8003cfa:	fb00 f303 	mul.w	r3, r0, r3
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	3332      	adds	r3, #50	; 0x32
 8003d04:	4a07      	ldr	r2, [pc, #28]	; (8003d24 <UART_SetConfig+0x118>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	f003 020f 	and.w	r2, r3, #15
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	440a      	add	r2, r1
 8003d16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d18:	bf00      	nop
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40013800 	.word	0x40013800
 8003d24:	51eb851f 	.word	0x51eb851f

08003d28 <__errno>:
 8003d28:	4b01      	ldr	r3, [pc, #4]	; (8003d30 <__errno+0x8>)
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	20000030 	.word	0x20000030

08003d34 <__libc_init_array>:
 8003d34:	b570      	push	{r4, r5, r6, lr}
 8003d36:	2600      	movs	r6, #0
 8003d38:	4d0c      	ldr	r5, [pc, #48]	; (8003d6c <__libc_init_array+0x38>)
 8003d3a:	4c0d      	ldr	r4, [pc, #52]	; (8003d70 <__libc_init_array+0x3c>)
 8003d3c:	1b64      	subs	r4, r4, r5
 8003d3e:	10a4      	asrs	r4, r4, #2
 8003d40:	42a6      	cmp	r6, r4
 8003d42:	d109      	bne.n	8003d58 <__libc_init_array+0x24>
 8003d44:	f000 fc9c 	bl	8004680 <_init>
 8003d48:	2600      	movs	r6, #0
 8003d4a:	4d0a      	ldr	r5, [pc, #40]	; (8003d74 <__libc_init_array+0x40>)
 8003d4c:	4c0a      	ldr	r4, [pc, #40]	; (8003d78 <__libc_init_array+0x44>)
 8003d4e:	1b64      	subs	r4, r4, r5
 8003d50:	10a4      	asrs	r4, r4, #2
 8003d52:	42a6      	cmp	r6, r4
 8003d54:	d105      	bne.n	8003d62 <__libc_init_array+0x2e>
 8003d56:	bd70      	pop	{r4, r5, r6, pc}
 8003d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5c:	4798      	blx	r3
 8003d5e:	3601      	adds	r6, #1
 8003d60:	e7ee      	b.n	8003d40 <__libc_init_array+0xc>
 8003d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d66:	4798      	blx	r3
 8003d68:	3601      	adds	r6, #1
 8003d6a:	e7f2      	b.n	8003d52 <__libc_init_array+0x1e>
 8003d6c:	08004704 	.word	0x08004704
 8003d70:	08004704 	.word	0x08004704
 8003d74:	08004704 	.word	0x08004704
 8003d78:	08004708 	.word	0x08004708

08003d7c <memset>:
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	4402      	add	r2, r0
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d100      	bne.n	8003d86 <memset+0xa>
 8003d84:	4770      	bx	lr
 8003d86:	f803 1b01 	strb.w	r1, [r3], #1
 8003d8a:	e7f9      	b.n	8003d80 <memset+0x4>

08003d8c <siprintf>:
 8003d8c:	b40e      	push	{r1, r2, r3}
 8003d8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d92:	b500      	push	{lr}
 8003d94:	b09c      	sub	sp, #112	; 0x70
 8003d96:	ab1d      	add	r3, sp, #116	; 0x74
 8003d98:	9002      	str	r0, [sp, #8]
 8003d9a:	9006      	str	r0, [sp, #24]
 8003d9c:	9107      	str	r1, [sp, #28]
 8003d9e:	9104      	str	r1, [sp, #16]
 8003da0:	4808      	ldr	r0, [pc, #32]	; (8003dc4 <siprintf+0x38>)
 8003da2:	4909      	ldr	r1, [pc, #36]	; (8003dc8 <siprintf+0x3c>)
 8003da4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003da8:	9105      	str	r1, [sp, #20]
 8003daa:	6800      	ldr	r0, [r0, #0]
 8003dac:	a902      	add	r1, sp, #8
 8003dae:	9301      	str	r3, [sp, #4]
 8003db0:	f000 f868 	bl	8003e84 <_svfiprintf_r>
 8003db4:	2200      	movs	r2, #0
 8003db6:	9b02      	ldr	r3, [sp, #8]
 8003db8:	701a      	strb	r2, [r3, #0]
 8003dba:	b01c      	add	sp, #112	; 0x70
 8003dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dc0:	b003      	add	sp, #12
 8003dc2:	4770      	bx	lr
 8003dc4:	20000030 	.word	0x20000030
 8003dc8:	ffff0208 	.word	0xffff0208

08003dcc <__ssputs_r>:
 8003dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd0:	688e      	ldr	r6, [r1, #8]
 8003dd2:	4682      	mov	sl, r0
 8003dd4:	429e      	cmp	r6, r3
 8003dd6:	460c      	mov	r4, r1
 8003dd8:	4690      	mov	r8, r2
 8003dda:	461f      	mov	r7, r3
 8003ddc:	d838      	bhi.n	8003e50 <__ssputs_r+0x84>
 8003dde:	898a      	ldrh	r2, [r1, #12]
 8003de0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003de4:	d032      	beq.n	8003e4c <__ssputs_r+0x80>
 8003de6:	6825      	ldr	r5, [r4, #0]
 8003de8:	6909      	ldr	r1, [r1, #16]
 8003dea:	3301      	adds	r3, #1
 8003dec:	eba5 0901 	sub.w	r9, r5, r1
 8003df0:	6965      	ldr	r5, [r4, #20]
 8003df2:	444b      	add	r3, r9
 8003df4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003df8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003dfc:	106d      	asrs	r5, r5, #1
 8003dfe:	429d      	cmp	r5, r3
 8003e00:	bf38      	it	cc
 8003e02:	461d      	movcc	r5, r3
 8003e04:	0553      	lsls	r3, r2, #21
 8003e06:	d531      	bpl.n	8003e6c <__ssputs_r+0xa0>
 8003e08:	4629      	mov	r1, r5
 8003e0a:	f000 fb6f 	bl	80044ec <_malloc_r>
 8003e0e:	4606      	mov	r6, r0
 8003e10:	b950      	cbnz	r0, 8003e28 <__ssputs_r+0x5c>
 8003e12:	230c      	movs	r3, #12
 8003e14:	f04f 30ff 	mov.w	r0, #4294967295
 8003e18:	f8ca 3000 	str.w	r3, [sl]
 8003e1c:	89a3      	ldrh	r3, [r4, #12]
 8003e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e22:	81a3      	strh	r3, [r4, #12]
 8003e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e28:	464a      	mov	r2, r9
 8003e2a:	6921      	ldr	r1, [r4, #16]
 8003e2c:	f000 face 	bl	80043cc <memcpy>
 8003e30:	89a3      	ldrh	r3, [r4, #12]
 8003e32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e3a:	81a3      	strh	r3, [r4, #12]
 8003e3c:	6126      	str	r6, [r4, #16]
 8003e3e:	444e      	add	r6, r9
 8003e40:	6026      	str	r6, [r4, #0]
 8003e42:	463e      	mov	r6, r7
 8003e44:	6165      	str	r5, [r4, #20]
 8003e46:	eba5 0509 	sub.w	r5, r5, r9
 8003e4a:	60a5      	str	r5, [r4, #8]
 8003e4c:	42be      	cmp	r6, r7
 8003e4e:	d900      	bls.n	8003e52 <__ssputs_r+0x86>
 8003e50:	463e      	mov	r6, r7
 8003e52:	4632      	mov	r2, r6
 8003e54:	4641      	mov	r1, r8
 8003e56:	6820      	ldr	r0, [r4, #0]
 8003e58:	f000 fac6 	bl	80043e8 <memmove>
 8003e5c:	68a3      	ldr	r3, [r4, #8]
 8003e5e:	2000      	movs	r0, #0
 8003e60:	1b9b      	subs	r3, r3, r6
 8003e62:	60a3      	str	r3, [r4, #8]
 8003e64:	6823      	ldr	r3, [r4, #0]
 8003e66:	4433      	add	r3, r6
 8003e68:	6023      	str	r3, [r4, #0]
 8003e6a:	e7db      	b.n	8003e24 <__ssputs_r+0x58>
 8003e6c:	462a      	mov	r2, r5
 8003e6e:	f000 fbb1 	bl	80045d4 <_realloc_r>
 8003e72:	4606      	mov	r6, r0
 8003e74:	2800      	cmp	r0, #0
 8003e76:	d1e1      	bne.n	8003e3c <__ssputs_r+0x70>
 8003e78:	4650      	mov	r0, sl
 8003e7a:	6921      	ldr	r1, [r4, #16]
 8003e7c:	f000 face 	bl	800441c <_free_r>
 8003e80:	e7c7      	b.n	8003e12 <__ssputs_r+0x46>
	...

08003e84 <_svfiprintf_r>:
 8003e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e88:	4698      	mov	r8, r3
 8003e8a:	898b      	ldrh	r3, [r1, #12]
 8003e8c:	4607      	mov	r7, r0
 8003e8e:	061b      	lsls	r3, r3, #24
 8003e90:	460d      	mov	r5, r1
 8003e92:	4614      	mov	r4, r2
 8003e94:	b09d      	sub	sp, #116	; 0x74
 8003e96:	d50e      	bpl.n	8003eb6 <_svfiprintf_r+0x32>
 8003e98:	690b      	ldr	r3, [r1, #16]
 8003e9a:	b963      	cbnz	r3, 8003eb6 <_svfiprintf_r+0x32>
 8003e9c:	2140      	movs	r1, #64	; 0x40
 8003e9e:	f000 fb25 	bl	80044ec <_malloc_r>
 8003ea2:	6028      	str	r0, [r5, #0]
 8003ea4:	6128      	str	r0, [r5, #16]
 8003ea6:	b920      	cbnz	r0, 8003eb2 <_svfiprintf_r+0x2e>
 8003ea8:	230c      	movs	r3, #12
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb0:	e0d1      	b.n	8004056 <_svfiprintf_r+0x1d2>
 8003eb2:	2340      	movs	r3, #64	; 0x40
 8003eb4:	616b      	str	r3, [r5, #20]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8003eba:	2320      	movs	r3, #32
 8003ebc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ec0:	2330      	movs	r3, #48	; 0x30
 8003ec2:	f04f 0901 	mov.w	r9, #1
 8003ec6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003eca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004070 <_svfiprintf_r+0x1ec>
 8003ece:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ed2:	4623      	mov	r3, r4
 8003ed4:	469a      	mov	sl, r3
 8003ed6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003eda:	b10a      	cbz	r2, 8003ee0 <_svfiprintf_r+0x5c>
 8003edc:	2a25      	cmp	r2, #37	; 0x25
 8003ede:	d1f9      	bne.n	8003ed4 <_svfiprintf_r+0x50>
 8003ee0:	ebba 0b04 	subs.w	fp, sl, r4
 8003ee4:	d00b      	beq.n	8003efe <_svfiprintf_r+0x7a>
 8003ee6:	465b      	mov	r3, fp
 8003ee8:	4622      	mov	r2, r4
 8003eea:	4629      	mov	r1, r5
 8003eec:	4638      	mov	r0, r7
 8003eee:	f7ff ff6d 	bl	8003dcc <__ssputs_r>
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	f000 80aa 	beq.w	800404c <_svfiprintf_r+0x1c8>
 8003ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003efa:	445a      	add	r2, fp
 8003efc:	9209      	str	r2, [sp, #36]	; 0x24
 8003efe:	f89a 3000 	ldrb.w	r3, [sl]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 80a2 	beq.w	800404c <_svfiprintf_r+0x1c8>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f12:	f10a 0a01 	add.w	sl, sl, #1
 8003f16:	9304      	str	r3, [sp, #16]
 8003f18:	9307      	str	r3, [sp, #28]
 8003f1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f1e:	931a      	str	r3, [sp, #104]	; 0x68
 8003f20:	4654      	mov	r4, sl
 8003f22:	2205      	movs	r2, #5
 8003f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f28:	4851      	ldr	r0, [pc, #324]	; (8004070 <_svfiprintf_r+0x1ec>)
 8003f2a:	f000 fa41 	bl	80043b0 <memchr>
 8003f2e:	9a04      	ldr	r2, [sp, #16]
 8003f30:	b9d8      	cbnz	r0, 8003f6a <_svfiprintf_r+0xe6>
 8003f32:	06d0      	lsls	r0, r2, #27
 8003f34:	bf44      	itt	mi
 8003f36:	2320      	movmi	r3, #32
 8003f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f3c:	0711      	lsls	r1, r2, #28
 8003f3e:	bf44      	itt	mi
 8003f40:	232b      	movmi	r3, #43	; 0x2b
 8003f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f46:	f89a 3000 	ldrb.w	r3, [sl]
 8003f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8003f4c:	d015      	beq.n	8003f7a <_svfiprintf_r+0xf6>
 8003f4e:	4654      	mov	r4, sl
 8003f50:	2000      	movs	r0, #0
 8003f52:	f04f 0c0a 	mov.w	ip, #10
 8003f56:	9a07      	ldr	r2, [sp, #28]
 8003f58:	4621      	mov	r1, r4
 8003f5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f5e:	3b30      	subs	r3, #48	; 0x30
 8003f60:	2b09      	cmp	r3, #9
 8003f62:	d94e      	bls.n	8004002 <_svfiprintf_r+0x17e>
 8003f64:	b1b0      	cbz	r0, 8003f94 <_svfiprintf_r+0x110>
 8003f66:	9207      	str	r2, [sp, #28]
 8003f68:	e014      	b.n	8003f94 <_svfiprintf_r+0x110>
 8003f6a:	eba0 0308 	sub.w	r3, r0, r8
 8003f6e:	fa09 f303 	lsl.w	r3, r9, r3
 8003f72:	4313      	orrs	r3, r2
 8003f74:	46a2      	mov	sl, r4
 8003f76:	9304      	str	r3, [sp, #16]
 8003f78:	e7d2      	b.n	8003f20 <_svfiprintf_r+0x9c>
 8003f7a:	9b03      	ldr	r3, [sp, #12]
 8003f7c:	1d19      	adds	r1, r3, #4
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	9103      	str	r1, [sp, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	bfbb      	ittet	lt
 8003f86:	425b      	neglt	r3, r3
 8003f88:	f042 0202 	orrlt.w	r2, r2, #2
 8003f8c:	9307      	strge	r3, [sp, #28]
 8003f8e:	9307      	strlt	r3, [sp, #28]
 8003f90:	bfb8      	it	lt
 8003f92:	9204      	strlt	r2, [sp, #16]
 8003f94:	7823      	ldrb	r3, [r4, #0]
 8003f96:	2b2e      	cmp	r3, #46	; 0x2e
 8003f98:	d10c      	bne.n	8003fb4 <_svfiprintf_r+0x130>
 8003f9a:	7863      	ldrb	r3, [r4, #1]
 8003f9c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f9e:	d135      	bne.n	800400c <_svfiprintf_r+0x188>
 8003fa0:	9b03      	ldr	r3, [sp, #12]
 8003fa2:	3402      	adds	r4, #2
 8003fa4:	1d1a      	adds	r2, r3, #4
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	9203      	str	r2, [sp, #12]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	bfb8      	it	lt
 8003fae:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fb2:	9305      	str	r3, [sp, #20]
 8003fb4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004074 <_svfiprintf_r+0x1f0>
 8003fb8:	2203      	movs	r2, #3
 8003fba:	4650      	mov	r0, sl
 8003fbc:	7821      	ldrb	r1, [r4, #0]
 8003fbe:	f000 f9f7 	bl	80043b0 <memchr>
 8003fc2:	b140      	cbz	r0, 8003fd6 <_svfiprintf_r+0x152>
 8003fc4:	2340      	movs	r3, #64	; 0x40
 8003fc6:	eba0 000a 	sub.w	r0, r0, sl
 8003fca:	fa03 f000 	lsl.w	r0, r3, r0
 8003fce:	9b04      	ldr	r3, [sp, #16]
 8003fd0:	3401      	adds	r4, #1
 8003fd2:	4303      	orrs	r3, r0
 8003fd4:	9304      	str	r3, [sp, #16]
 8003fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fda:	2206      	movs	r2, #6
 8003fdc:	4826      	ldr	r0, [pc, #152]	; (8004078 <_svfiprintf_r+0x1f4>)
 8003fde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fe2:	f000 f9e5 	bl	80043b0 <memchr>
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	d038      	beq.n	800405c <_svfiprintf_r+0x1d8>
 8003fea:	4b24      	ldr	r3, [pc, #144]	; (800407c <_svfiprintf_r+0x1f8>)
 8003fec:	bb1b      	cbnz	r3, 8004036 <_svfiprintf_r+0x1b2>
 8003fee:	9b03      	ldr	r3, [sp, #12]
 8003ff0:	3307      	adds	r3, #7
 8003ff2:	f023 0307 	bic.w	r3, r3, #7
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	9303      	str	r3, [sp, #12]
 8003ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ffc:	4433      	add	r3, r6
 8003ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8004000:	e767      	b.n	8003ed2 <_svfiprintf_r+0x4e>
 8004002:	460c      	mov	r4, r1
 8004004:	2001      	movs	r0, #1
 8004006:	fb0c 3202 	mla	r2, ip, r2, r3
 800400a:	e7a5      	b.n	8003f58 <_svfiprintf_r+0xd4>
 800400c:	2300      	movs	r3, #0
 800400e:	f04f 0c0a 	mov.w	ip, #10
 8004012:	4619      	mov	r1, r3
 8004014:	3401      	adds	r4, #1
 8004016:	9305      	str	r3, [sp, #20]
 8004018:	4620      	mov	r0, r4
 800401a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800401e:	3a30      	subs	r2, #48	; 0x30
 8004020:	2a09      	cmp	r2, #9
 8004022:	d903      	bls.n	800402c <_svfiprintf_r+0x1a8>
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0c5      	beq.n	8003fb4 <_svfiprintf_r+0x130>
 8004028:	9105      	str	r1, [sp, #20]
 800402a:	e7c3      	b.n	8003fb4 <_svfiprintf_r+0x130>
 800402c:	4604      	mov	r4, r0
 800402e:	2301      	movs	r3, #1
 8004030:	fb0c 2101 	mla	r1, ip, r1, r2
 8004034:	e7f0      	b.n	8004018 <_svfiprintf_r+0x194>
 8004036:	ab03      	add	r3, sp, #12
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	462a      	mov	r2, r5
 800403c:	4638      	mov	r0, r7
 800403e:	4b10      	ldr	r3, [pc, #64]	; (8004080 <_svfiprintf_r+0x1fc>)
 8004040:	a904      	add	r1, sp, #16
 8004042:	f3af 8000 	nop.w
 8004046:	1c42      	adds	r2, r0, #1
 8004048:	4606      	mov	r6, r0
 800404a:	d1d6      	bne.n	8003ffa <_svfiprintf_r+0x176>
 800404c:	89ab      	ldrh	r3, [r5, #12]
 800404e:	065b      	lsls	r3, r3, #25
 8004050:	f53f af2c 	bmi.w	8003eac <_svfiprintf_r+0x28>
 8004054:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004056:	b01d      	add	sp, #116	; 0x74
 8004058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800405c:	ab03      	add	r3, sp, #12
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	462a      	mov	r2, r5
 8004062:	4638      	mov	r0, r7
 8004064:	4b06      	ldr	r3, [pc, #24]	; (8004080 <_svfiprintf_r+0x1fc>)
 8004066:	a904      	add	r1, sp, #16
 8004068:	f000 f87c 	bl	8004164 <_printf_i>
 800406c:	e7eb      	b.n	8004046 <_svfiprintf_r+0x1c2>
 800406e:	bf00      	nop
 8004070:	080046d0 	.word	0x080046d0
 8004074:	080046d6 	.word	0x080046d6
 8004078:	080046da 	.word	0x080046da
 800407c:	00000000 	.word	0x00000000
 8004080:	08003dcd 	.word	0x08003dcd

08004084 <_printf_common>:
 8004084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004088:	4616      	mov	r6, r2
 800408a:	4699      	mov	r9, r3
 800408c:	688a      	ldr	r2, [r1, #8]
 800408e:	690b      	ldr	r3, [r1, #16]
 8004090:	4607      	mov	r7, r0
 8004092:	4293      	cmp	r3, r2
 8004094:	bfb8      	it	lt
 8004096:	4613      	movlt	r3, r2
 8004098:	6033      	str	r3, [r6, #0]
 800409a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800409e:	460c      	mov	r4, r1
 80040a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040a4:	b10a      	cbz	r2, 80040aa <_printf_common+0x26>
 80040a6:	3301      	adds	r3, #1
 80040a8:	6033      	str	r3, [r6, #0]
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	0699      	lsls	r1, r3, #26
 80040ae:	bf42      	ittt	mi
 80040b0:	6833      	ldrmi	r3, [r6, #0]
 80040b2:	3302      	addmi	r3, #2
 80040b4:	6033      	strmi	r3, [r6, #0]
 80040b6:	6825      	ldr	r5, [r4, #0]
 80040b8:	f015 0506 	ands.w	r5, r5, #6
 80040bc:	d106      	bne.n	80040cc <_printf_common+0x48>
 80040be:	f104 0a19 	add.w	sl, r4, #25
 80040c2:	68e3      	ldr	r3, [r4, #12]
 80040c4:	6832      	ldr	r2, [r6, #0]
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	42ab      	cmp	r3, r5
 80040ca:	dc28      	bgt.n	800411e <_printf_common+0x9a>
 80040cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040d0:	1e13      	subs	r3, r2, #0
 80040d2:	6822      	ldr	r2, [r4, #0]
 80040d4:	bf18      	it	ne
 80040d6:	2301      	movne	r3, #1
 80040d8:	0692      	lsls	r2, r2, #26
 80040da:	d42d      	bmi.n	8004138 <_printf_common+0xb4>
 80040dc:	4649      	mov	r1, r9
 80040de:	4638      	mov	r0, r7
 80040e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040e4:	47c0      	blx	r8
 80040e6:	3001      	adds	r0, #1
 80040e8:	d020      	beq.n	800412c <_printf_common+0xa8>
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	68e5      	ldr	r5, [r4, #12]
 80040ee:	f003 0306 	and.w	r3, r3, #6
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	bf18      	it	ne
 80040f6:	2500      	movne	r5, #0
 80040f8:	6832      	ldr	r2, [r6, #0]
 80040fa:	f04f 0600 	mov.w	r6, #0
 80040fe:	68a3      	ldr	r3, [r4, #8]
 8004100:	bf08      	it	eq
 8004102:	1aad      	subeq	r5, r5, r2
 8004104:	6922      	ldr	r2, [r4, #16]
 8004106:	bf08      	it	eq
 8004108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800410c:	4293      	cmp	r3, r2
 800410e:	bfc4      	itt	gt
 8004110:	1a9b      	subgt	r3, r3, r2
 8004112:	18ed      	addgt	r5, r5, r3
 8004114:	341a      	adds	r4, #26
 8004116:	42b5      	cmp	r5, r6
 8004118:	d11a      	bne.n	8004150 <_printf_common+0xcc>
 800411a:	2000      	movs	r0, #0
 800411c:	e008      	b.n	8004130 <_printf_common+0xac>
 800411e:	2301      	movs	r3, #1
 8004120:	4652      	mov	r2, sl
 8004122:	4649      	mov	r1, r9
 8004124:	4638      	mov	r0, r7
 8004126:	47c0      	blx	r8
 8004128:	3001      	adds	r0, #1
 800412a:	d103      	bne.n	8004134 <_printf_common+0xb0>
 800412c:	f04f 30ff 	mov.w	r0, #4294967295
 8004130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004134:	3501      	adds	r5, #1
 8004136:	e7c4      	b.n	80040c2 <_printf_common+0x3e>
 8004138:	2030      	movs	r0, #48	; 0x30
 800413a:	18e1      	adds	r1, r4, r3
 800413c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004146:	4422      	add	r2, r4
 8004148:	3302      	adds	r3, #2
 800414a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800414e:	e7c5      	b.n	80040dc <_printf_common+0x58>
 8004150:	2301      	movs	r3, #1
 8004152:	4622      	mov	r2, r4
 8004154:	4649      	mov	r1, r9
 8004156:	4638      	mov	r0, r7
 8004158:	47c0      	blx	r8
 800415a:	3001      	adds	r0, #1
 800415c:	d0e6      	beq.n	800412c <_printf_common+0xa8>
 800415e:	3601      	adds	r6, #1
 8004160:	e7d9      	b.n	8004116 <_printf_common+0x92>
	...

08004164 <_printf_i>:
 8004164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004168:	7e0f      	ldrb	r7, [r1, #24]
 800416a:	4691      	mov	r9, r2
 800416c:	2f78      	cmp	r7, #120	; 0x78
 800416e:	4680      	mov	r8, r0
 8004170:	460c      	mov	r4, r1
 8004172:	469a      	mov	sl, r3
 8004174:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004176:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800417a:	d807      	bhi.n	800418c <_printf_i+0x28>
 800417c:	2f62      	cmp	r7, #98	; 0x62
 800417e:	d80a      	bhi.n	8004196 <_printf_i+0x32>
 8004180:	2f00      	cmp	r7, #0
 8004182:	f000 80d9 	beq.w	8004338 <_printf_i+0x1d4>
 8004186:	2f58      	cmp	r7, #88	; 0x58
 8004188:	f000 80a4 	beq.w	80042d4 <_printf_i+0x170>
 800418c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004190:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004194:	e03a      	b.n	800420c <_printf_i+0xa8>
 8004196:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800419a:	2b15      	cmp	r3, #21
 800419c:	d8f6      	bhi.n	800418c <_printf_i+0x28>
 800419e:	a101      	add	r1, pc, #4	; (adr r1, 80041a4 <_printf_i+0x40>)
 80041a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041a4:	080041fd 	.word	0x080041fd
 80041a8:	08004211 	.word	0x08004211
 80041ac:	0800418d 	.word	0x0800418d
 80041b0:	0800418d 	.word	0x0800418d
 80041b4:	0800418d 	.word	0x0800418d
 80041b8:	0800418d 	.word	0x0800418d
 80041bc:	08004211 	.word	0x08004211
 80041c0:	0800418d 	.word	0x0800418d
 80041c4:	0800418d 	.word	0x0800418d
 80041c8:	0800418d 	.word	0x0800418d
 80041cc:	0800418d 	.word	0x0800418d
 80041d0:	0800431f 	.word	0x0800431f
 80041d4:	08004241 	.word	0x08004241
 80041d8:	08004301 	.word	0x08004301
 80041dc:	0800418d 	.word	0x0800418d
 80041e0:	0800418d 	.word	0x0800418d
 80041e4:	08004341 	.word	0x08004341
 80041e8:	0800418d 	.word	0x0800418d
 80041ec:	08004241 	.word	0x08004241
 80041f0:	0800418d 	.word	0x0800418d
 80041f4:	0800418d 	.word	0x0800418d
 80041f8:	08004309 	.word	0x08004309
 80041fc:	682b      	ldr	r3, [r5, #0]
 80041fe:	1d1a      	adds	r2, r3, #4
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	602a      	str	r2, [r5, #0]
 8004204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004208:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800420c:	2301      	movs	r3, #1
 800420e:	e0a4      	b.n	800435a <_printf_i+0x1f6>
 8004210:	6820      	ldr	r0, [r4, #0]
 8004212:	6829      	ldr	r1, [r5, #0]
 8004214:	0606      	lsls	r6, r0, #24
 8004216:	f101 0304 	add.w	r3, r1, #4
 800421a:	d50a      	bpl.n	8004232 <_printf_i+0xce>
 800421c:	680e      	ldr	r6, [r1, #0]
 800421e:	602b      	str	r3, [r5, #0]
 8004220:	2e00      	cmp	r6, #0
 8004222:	da03      	bge.n	800422c <_printf_i+0xc8>
 8004224:	232d      	movs	r3, #45	; 0x2d
 8004226:	4276      	negs	r6, r6
 8004228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800422c:	230a      	movs	r3, #10
 800422e:	485e      	ldr	r0, [pc, #376]	; (80043a8 <_printf_i+0x244>)
 8004230:	e019      	b.n	8004266 <_printf_i+0x102>
 8004232:	680e      	ldr	r6, [r1, #0]
 8004234:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004238:	602b      	str	r3, [r5, #0]
 800423a:	bf18      	it	ne
 800423c:	b236      	sxthne	r6, r6
 800423e:	e7ef      	b.n	8004220 <_printf_i+0xbc>
 8004240:	682b      	ldr	r3, [r5, #0]
 8004242:	6820      	ldr	r0, [r4, #0]
 8004244:	1d19      	adds	r1, r3, #4
 8004246:	6029      	str	r1, [r5, #0]
 8004248:	0601      	lsls	r1, r0, #24
 800424a:	d501      	bpl.n	8004250 <_printf_i+0xec>
 800424c:	681e      	ldr	r6, [r3, #0]
 800424e:	e002      	b.n	8004256 <_printf_i+0xf2>
 8004250:	0646      	lsls	r6, r0, #25
 8004252:	d5fb      	bpl.n	800424c <_printf_i+0xe8>
 8004254:	881e      	ldrh	r6, [r3, #0]
 8004256:	2f6f      	cmp	r7, #111	; 0x6f
 8004258:	bf0c      	ite	eq
 800425a:	2308      	moveq	r3, #8
 800425c:	230a      	movne	r3, #10
 800425e:	4852      	ldr	r0, [pc, #328]	; (80043a8 <_printf_i+0x244>)
 8004260:	2100      	movs	r1, #0
 8004262:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004266:	6865      	ldr	r5, [r4, #4]
 8004268:	2d00      	cmp	r5, #0
 800426a:	bfa8      	it	ge
 800426c:	6821      	ldrge	r1, [r4, #0]
 800426e:	60a5      	str	r5, [r4, #8]
 8004270:	bfa4      	itt	ge
 8004272:	f021 0104 	bicge.w	r1, r1, #4
 8004276:	6021      	strge	r1, [r4, #0]
 8004278:	b90e      	cbnz	r6, 800427e <_printf_i+0x11a>
 800427a:	2d00      	cmp	r5, #0
 800427c:	d04d      	beq.n	800431a <_printf_i+0x1b6>
 800427e:	4615      	mov	r5, r2
 8004280:	fbb6 f1f3 	udiv	r1, r6, r3
 8004284:	fb03 6711 	mls	r7, r3, r1, r6
 8004288:	5dc7      	ldrb	r7, [r0, r7]
 800428a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800428e:	4637      	mov	r7, r6
 8004290:	42bb      	cmp	r3, r7
 8004292:	460e      	mov	r6, r1
 8004294:	d9f4      	bls.n	8004280 <_printf_i+0x11c>
 8004296:	2b08      	cmp	r3, #8
 8004298:	d10b      	bne.n	80042b2 <_printf_i+0x14e>
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	07de      	lsls	r6, r3, #31
 800429e:	d508      	bpl.n	80042b2 <_printf_i+0x14e>
 80042a0:	6923      	ldr	r3, [r4, #16]
 80042a2:	6861      	ldr	r1, [r4, #4]
 80042a4:	4299      	cmp	r1, r3
 80042a6:	bfde      	ittt	le
 80042a8:	2330      	movle	r3, #48	; 0x30
 80042aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042b2:	1b52      	subs	r2, r2, r5
 80042b4:	6122      	str	r2, [r4, #16]
 80042b6:	464b      	mov	r3, r9
 80042b8:	4621      	mov	r1, r4
 80042ba:	4640      	mov	r0, r8
 80042bc:	f8cd a000 	str.w	sl, [sp]
 80042c0:	aa03      	add	r2, sp, #12
 80042c2:	f7ff fedf 	bl	8004084 <_printf_common>
 80042c6:	3001      	adds	r0, #1
 80042c8:	d14c      	bne.n	8004364 <_printf_i+0x200>
 80042ca:	f04f 30ff 	mov.w	r0, #4294967295
 80042ce:	b004      	add	sp, #16
 80042d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d4:	4834      	ldr	r0, [pc, #208]	; (80043a8 <_printf_i+0x244>)
 80042d6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80042da:	6829      	ldr	r1, [r5, #0]
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	f851 6b04 	ldr.w	r6, [r1], #4
 80042e2:	6029      	str	r1, [r5, #0]
 80042e4:	061d      	lsls	r5, r3, #24
 80042e6:	d514      	bpl.n	8004312 <_printf_i+0x1ae>
 80042e8:	07df      	lsls	r7, r3, #31
 80042ea:	bf44      	itt	mi
 80042ec:	f043 0320 	orrmi.w	r3, r3, #32
 80042f0:	6023      	strmi	r3, [r4, #0]
 80042f2:	b91e      	cbnz	r6, 80042fc <_printf_i+0x198>
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	f023 0320 	bic.w	r3, r3, #32
 80042fa:	6023      	str	r3, [r4, #0]
 80042fc:	2310      	movs	r3, #16
 80042fe:	e7af      	b.n	8004260 <_printf_i+0xfc>
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	f043 0320 	orr.w	r3, r3, #32
 8004306:	6023      	str	r3, [r4, #0]
 8004308:	2378      	movs	r3, #120	; 0x78
 800430a:	4828      	ldr	r0, [pc, #160]	; (80043ac <_printf_i+0x248>)
 800430c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004310:	e7e3      	b.n	80042da <_printf_i+0x176>
 8004312:	0659      	lsls	r1, r3, #25
 8004314:	bf48      	it	mi
 8004316:	b2b6      	uxthmi	r6, r6
 8004318:	e7e6      	b.n	80042e8 <_printf_i+0x184>
 800431a:	4615      	mov	r5, r2
 800431c:	e7bb      	b.n	8004296 <_printf_i+0x132>
 800431e:	682b      	ldr	r3, [r5, #0]
 8004320:	6826      	ldr	r6, [r4, #0]
 8004322:	1d18      	adds	r0, r3, #4
 8004324:	6961      	ldr	r1, [r4, #20]
 8004326:	6028      	str	r0, [r5, #0]
 8004328:	0635      	lsls	r5, r6, #24
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	d501      	bpl.n	8004332 <_printf_i+0x1ce>
 800432e:	6019      	str	r1, [r3, #0]
 8004330:	e002      	b.n	8004338 <_printf_i+0x1d4>
 8004332:	0670      	lsls	r0, r6, #25
 8004334:	d5fb      	bpl.n	800432e <_printf_i+0x1ca>
 8004336:	8019      	strh	r1, [r3, #0]
 8004338:	2300      	movs	r3, #0
 800433a:	4615      	mov	r5, r2
 800433c:	6123      	str	r3, [r4, #16]
 800433e:	e7ba      	b.n	80042b6 <_printf_i+0x152>
 8004340:	682b      	ldr	r3, [r5, #0]
 8004342:	2100      	movs	r1, #0
 8004344:	1d1a      	adds	r2, r3, #4
 8004346:	602a      	str	r2, [r5, #0]
 8004348:	681d      	ldr	r5, [r3, #0]
 800434a:	6862      	ldr	r2, [r4, #4]
 800434c:	4628      	mov	r0, r5
 800434e:	f000 f82f 	bl	80043b0 <memchr>
 8004352:	b108      	cbz	r0, 8004358 <_printf_i+0x1f4>
 8004354:	1b40      	subs	r0, r0, r5
 8004356:	6060      	str	r0, [r4, #4]
 8004358:	6863      	ldr	r3, [r4, #4]
 800435a:	6123      	str	r3, [r4, #16]
 800435c:	2300      	movs	r3, #0
 800435e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004362:	e7a8      	b.n	80042b6 <_printf_i+0x152>
 8004364:	462a      	mov	r2, r5
 8004366:	4649      	mov	r1, r9
 8004368:	4640      	mov	r0, r8
 800436a:	6923      	ldr	r3, [r4, #16]
 800436c:	47d0      	blx	sl
 800436e:	3001      	adds	r0, #1
 8004370:	d0ab      	beq.n	80042ca <_printf_i+0x166>
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	079b      	lsls	r3, r3, #30
 8004376:	d413      	bmi.n	80043a0 <_printf_i+0x23c>
 8004378:	68e0      	ldr	r0, [r4, #12]
 800437a:	9b03      	ldr	r3, [sp, #12]
 800437c:	4298      	cmp	r0, r3
 800437e:	bfb8      	it	lt
 8004380:	4618      	movlt	r0, r3
 8004382:	e7a4      	b.n	80042ce <_printf_i+0x16a>
 8004384:	2301      	movs	r3, #1
 8004386:	4632      	mov	r2, r6
 8004388:	4649      	mov	r1, r9
 800438a:	4640      	mov	r0, r8
 800438c:	47d0      	blx	sl
 800438e:	3001      	adds	r0, #1
 8004390:	d09b      	beq.n	80042ca <_printf_i+0x166>
 8004392:	3501      	adds	r5, #1
 8004394:	68e3      	ldr	r3, [r4, #12]
 8004396:	9903      	ldr	r1, [sp, #12]
 8004398:	1a5b      	subs	r3, r3, r1
 800439a:	42ab      	cmp	r3, r5
 800439c:	dcf2      	bgt.n	8004384 <_printf_i+0x220>
 800439e:	e7eb      	b.n	8004378 <_printf_i+0x214>
 80043a0:	2500      	movs	r5, #0
 80043a2:	f104 0619 	add.w	r6, r4, #25
 80043a6:	e7f5      	b.n	8004394 <_printf_i+0x230>
 80043a8:	080046e1 	.word	0x080046e1
 80043ac:	080046f2 	.word	0x080046f2

080043b0 <memchr>:
 80043b0:	4603      	mov	r3, r0
 80043b2:	b510      	push	{r4, lr}
 80043b4:	b2c9      	uxtb	r1, r1
 80043b6:	4402      	add	r2, r0
 80043b8:	4293      	cmp	r3, r2
 80043ba:	4618      	mov	r0, r3
 80043bc:	d101      	bne.n	80043c2 <memchr+0x12>
 80043be:	2000      	movs	r0, #0
 80043c0:	e003      	b.n	80043ca <memchr+0x1a>
 80043c2:	7804      	ldrb	r4, [r0, #0]
 80043c4:	3301      	adds	r3, #1
 80043c6:	428c      	cmp	r4, r1
 80043c8:	d1f6      	bne.n	80043b8 <memchr+0x8>
 80043ca:	bd10      	pop	{r4, pc}

080043cc <memcpy>:
 80043cc:	440a      	add	r2, r1
 80043ce:	4291      	cmp	r1, r2
 80043d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80043d4:	d100      	bne.n	80043d8 <memcpy+0xc>
 80043d6:	4770      	bx	lr
 80043d8:	b510      	push	{r4, lr}
 80043da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043de:	4291      	cmp	r1, r2
 80043e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043e4:	d1f9      	bne.n	80043da <memcpy+0xe>
 80043e6:	bd10      	pop	{r4, pc}

080043e8 <memmove>:
 80043e8:	4288      	cmp	r0, r1
 80043ea:	b510      	push	{r4, lr}
 80043ec:	eb01 0402 	add.w	r4, r1, r2
 80043f0:	d902      	bls.n	80043f8 <memmove+0x10>
 80043f2:	4284      	cmp	r4, r0
 80043f4:	4623      	mov	r3, r4
 80043f6:	d807      	bhi.n	8004408 <memmove+0x20>
 80043f8:	1e43      	subs	r3, r0, #1
 80043fa:	42a1      	cmp	r1, r4
 80043fc:	d008      	beq.n	8004410 <memmove+0x28>
 80043fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004402:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004406:	e7f8      	b.n	80043fa <memmove+0x12>
 8004408:	4601      	mov	r1, r0
 800440a:	4402      	add	r2, r0
 800440c:	428a      	cmp	r2, r1
 800440e:	d100      	bne.n	8004412 <memmove+0x2a>
 8004410:	bd10      	pop	{r4, pc}
 8004412:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004416:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800441a:	e7f7      	b.n	800440c <memmove+0x24>

0800441c <_free_r>:
 800441c:	b538      	push	{r3, r4, r5, lr}
 800441e:	4605      	mov	r5, r0
 8004420:	2900      	cmp	r1, #0
 8004422:	d040      	beq.n	80044a6 <_free_r+0x8a>
 8004424:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004428:	1f0c      	subs	r4, r1, #4
 800442a:	2b00      	cmp	r3, #0
 800442c:	bfb8      	it	lt
 800442e:	18e4      	addlt	r4, r4, r3
 8004430:	f000 f910 	bl	8004654 <__malloc_lock>
 8004434:	4a1c      	ldr	r2, [pc, #112]	; (80044a8 <_free_r+0x8c>)
 8004436:	6813      	ldr	r3, [r2, #0]
 8004438:	b933      	cbnz	r3, 8004448 <_free_r+0x2c>
 800443a:	6063      	str	r3, [r4, #4]
 800443c:	6014      	str	r4, [r2, #0]
 800443e:	4628      	mov	r0, r5
 8004440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004444:	f000 b90c 	b.w	8004660 <__malloc_unlock>
 8004448:	42a3      	cmp	r3, r4
 800444a:	d908      	bls.n	800445e <_free_r+0x42>
 800444c:	6820      	ldr	r0, [r4, #0]
 800444e:	1821      	adds	r1, r4, r0
 8004450:	428b      	cmp	r3, r1
 8004452:	bf01      	itttt	eq
 8004454:	6819      	ldreq	r1, [r3, #0]
 8004456:	685b      	ldreq	r3, [r3, #4]
 8004458:	1809      	addeq	r1, r1, r0
 800445a:	6021      	streq	r1, [r4, #0]
 800445c:	e7ed      	b.n	800443a <_free_r+0x1e>
 800445e:	461a      	mov	r2, r3
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	b10b      	cbz	r3, 8004468 <_free_r+0x4c>
 8004464:	42a3      	cmp	r3, r4
 8004466:	d9fa      	bls.n	800445e <_free_r+0x42>
 8004468:	6811      	ldr	r1, [r2, #0]
 800446a:	1850      	adds	r0, r2, r1
 800446c:	42a0      	cmp	r0, r4
 800446e:	d10b      	bne.n	8004488 <_free_r+0x6c>
 8004470:	6820      	ldr	r0, [r4, #0]
 8004472:	4401      	add	r1, r0
 8004474:	1850      	adds	r0, r2, r1
 8004476:	4283      	cmp	r3, r0
 8004478:	6011      	str	r1, [r2, #0]
 800447a:	d1e0      	bne.n	800443e <_free_r+0x22>
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	4401      	add	r1, r0
 8004482:	6011      	str	r1, [r2, #0]
 8004484:	6053      	str	r3, [r2, #4]
 8004486:	e7da      	b.n	800443e <_free_r+0x22>
 8004488:	d902      	bls.n	8004490 <_free_r+0x74>
 800448a:	230c      	movs	r3, #12
 800448c:	602b      	str	r3, [r5, #0]
 800448e:	e7d6      	b.n	800443e <_free_r+0x22>
 8004490:	6820      	ldr	r0, [r4, #0]
 8004492:	1821      	adds	r1, r4, r0
 8004494:	428b      	cmp	r3, r1
 8004496:	bf01      	itttt	eq
 8004498:	6819      	ldreq	r1, [r3, #0]
 800449a:	685b      	ldreq	r3, [r3, #4]
 800449c:	1809      	addeq	r1, r1, r0
 800449e:	6021      	streq	r1, [r4, #0]
 80044a0:	6063      	str	r3, [r4, #4]
 80044a2:	6054      	str	r4, [r2, #4]
 80044a4:	e7cb      	b.n	800443e <_free_r+0x22>
 80044a6:	bd38      	pop	{r3, r4, r5, pc}
 80044a8:	200001f4 	.word	0x200001f4

080044ac <sbrk_aligned>:
 80044ac:	b570      	push	{r4, r5, r6, lr}
 80044ae:	4e0e      	ldr	r6, [pc, #56]	; (80044e8 <sbrk_aligned+0x3c>)
 80044b0:	460c      	mov	r4, r1
 80044b2:	6831      	ldr	r1, [r6, #0]
 80044b4:	4605      	mov	r5, r0
 80044b6:	b911      	cbnz	r1, 80044be <sbrk_aligned+0x12>
 80044b8:	f000 f8bc 	bl	8004634 <_sbrk_r>
 80044bc:	6030      	str	r0, [r6, #0]
 80044be:	4621      	mov	r1, r4
 80044c0:	4628      	mov	r0, r5
 80044c2:	f000 f8b7 	bl	8004634 <_sbrk_r>
 80044c6:	1c43      	adds	r3, r0, #1
 80044c8:	d00a      	beq.n	80044e0 <sbrk_aligned+0x34>
 80044ca:	1cc4      	adds	r4, r0, #3
 80044cc:	f024 0403 	bic.w	r4, r4, #3
 80044d0:	42a0      	cmp	r0, r4
 80044d2:	d007      	beq.n	80044e4 <sbrk_aligned+0x38>
 80044d4:	1a21      	subs	r1, r4, r0
 80044d6:	4628      	mov	r0, r5
 80044d8:	f000 f8ac 	bl	8004634 <_sbrk_r>
 80044dc:	3001      	adds	r0, #1
 80044de:	d101      	bne.n	80044e4 <sbrk_aligned+0x38>
 80044e0:	f04f 34ff 	mov.w	r4, #4294967295
 80044e4:	4620      	mov	r0, r4
 80044e6:	bd70      	pop	{r4, r5, r6, pc}
 80044e8:	200001f8 	.word	0x200001f8

080044ec <_malloc_r>:
 80044ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044f0:	1ccd      	adds	r5, r1, #3
 80044f2:	f025 0503 	bic.w	r5, r5, #3
 80044f6:	3508      	adds	r5, #8
 80044f8:	2d0c      	cmp	r5, #12
 80044fa:	bf38      	it	cc
 80044fc:	250c      	movcc	r5, #12
 80044fe:	2d00      	cmp	r5, #0
 8004500:	4607      	mov	r7, r0
 8004502:	db01      	blt.n	8004508 <_malloc_r+0x1c>
 8004504:	42a9      	cmp	r1, r5
 8004506:	d905      	bls.n	8004514 <_malloc_r+0x28>
 8004508:	230c      	movs	r3, #12
 800450a:	2600      	movs	r6, #0
 800450c:	603b      	str	r3, [r7, #0]
 800450e:	4630      	mov	r0, r6
 8004510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004514:	4e2e      	ldr	r6, [pc, #184]	; (80045d0 <_malloc_r+0xe4>)
 8004516:	f000 f89d 	bl	8004654 <__malloc_lock>
 800451a:	6833      	ldr	r3, [r6, #0]
 800451c:	461c      	mov	r4, r3
 800451e:	bb34      	cbnz	r4, 800456e <_malloc_r+0x82>
 8004520:	4629      	mov	r1, r5
 8004522:	4638      	mov	r0, r7
 8004524:	f7ff ffc2 	bl	80044ac <sbrk_aligned>
 8004528:	1c43      	adds	r3, r0, #1
 800452a:	4604      	mov	r4, r0
 800452c:	d14d      	bne.n	80045ca <_malloc_r+0xde>
 800452e:	6834      	ldr	r4, [r6, #0]
 8004530:	4626      	mov	r6, r4
 8004532:	2e00      	cmp	r6, #0
 8004534:	d140      	bne.n	80045b8 <_malloc_r+0xcc>
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	4631      	mov	r1, r6
 800453a:	4638      	mov	r0, r7
 800453c:	eb04 0803 	add.w	r8, r4, r3
 8004540:	f000 f878 	bl	8004634 <_sbrk_r>
 8004544:	4580      	cmp	r8, r0
 8004546:	d13a      	bne.n	80045be <_malloc_r+0xd2>
 8004548:	6821      	ldr	r1, [r4, #0]
 800454a:	3503      	adds	r5, #3
 800454c:	1a6d      	subs	r5, r5, r1
 800454e:	f025 0503 	bic.w	r5, r5, #3
 8004552:	3508      	adds	r5, #8
 8004554:	2d0c      	cmp	r5, #12
 8004556:	bf38      	it	cc
 8004558:	250c      	movcc	r5, #12
 800455a:	4638      	mov	r0, r7
 800455c:	4629      	mov	r1, r5
 800455e:	f7ff ffa5 	bl	80044ac <sbrk_aligned>
 8004562:	3001      	adds	r0, #1
 8004564:	d02b      	beq.n	80045be <_malloc_r+0xd2>
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	442b      	add	r3, r5
 800456a:	6023      	str	r3, [r4, #0]
 800456c:	e00e      	b.n	800458c <_malloc_r+0xa0>
 800456e:	6822      	ldr	r2, [r4, #0]
 8004570:	1b52      	subs	r2, r2, r5
 8004572:	d41e      	bmi.n	80045b2 <_malloc_r+0xc6>
 8004574:	2a0b      	cmp	r2, #11
 8004576:	d916      	bls.n	80045a6 <_malloc_r+0xba>
 8004578:	1961      	adds	r1, r4, r5
 800457a:	42a3      	cmp	r3, r4
 800457c:	6025      	str	r5, [r4, #0]
 800457e:	bf18      	it	ne
 8004580:	6059      	strne	r1, [r3, #4]
 8004582:	6863      	ldr	r3, [r4, #4]
 8004584:	bf08      	it	eq
 8004586:	6031      	streq	r1, [r6, #0]
 8004588:	5162      	str	r2, [r4, r5]
 800458a:	604b      	str	r3, [r1, #4]
 800458c:	4638      	mov	r0, r7
 800458e:	f104 060b 	add.w	r6, r4, #11
 8004592:	f000 f865 	bl	8004660 <__malloc_unlock>
 8004596:	f026 0607 	bic.w	r6, r6, #7
 800459a:	1d23      	adds	r3, r4, #4
 800459c:	1af2      	subs	r2, r6, r3
 800459e:	d0b6      	beq.n	800450e <_malloc_r+0x22>
 80045a0:	1b9b      	subs	r3, r3, r6
 80045a2:	50a3      	str	r3, [r4, r2]
 80045a4:	e7b3      	b.n	800450e <_malloc_r+0x22>
 80045a6:	6862      	ldr	r2, [r4, #4]
 80045a8:	42a3      	cmp	r3, r4
 80045aa:	bf0c      	ite	eq
 80045ac:	6032      	streq	r2, [r6, #0]
 80045ae:	605a      	strne	r2, [r3, #4]
 80045b0:	e7ec      	b.n	800458c <_malloc_r+0xa0>
 80045b2:	4623      	mov	r3, r4
 80045b4:	6864      	ldr	r4, [r4, #4]
 80045b6:	e7b2      	b.n	800451e <_malloc_r+0x32>
 80045b8:	4634      	mov	r4, r6
 80045ba:	6876      	ldr	r6, [r6, #4]
 80045bc:	e7b9      	b.n	8004532 <_malloc_r+0x46>
 80045be:	230c      	movs	r3, #12
 80045c0:	4638      	mov	r0, r7
 80045c2:	603b      	str	r3, [r7, #0]
 80045c4:	f000 f84c 	bl	8004660 <__malloc_unlock>
 80045c8:	e7a1      	b.n	800450e <_malloc_r+0x22>
 80045ca:	6025      	str	r5, [r4, #0]
 80045cc:	e7de      	b.n	800458c <_malloc_r+0xa0>
 80045ce:	bf00      	nop
 80045d0:	200001f4 	.word	0x200001f4

080045d4 <_realloc_r>:
 80045d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045d8:	4680      	mov	r8, r0
 80045da:	4614      	mov	r4, r2
 80045dc:	460e      	mov	r6, r1
 80045de:	b921      	cbnz	r1, 80045ea <_realloc_r+0x16>
 80045e0:	4611      	mov	r1, r2
 80045e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045e6:	f7ff bf81 	b.w	80044ec <_malloc_r>
 80045ea:	b92a      	cbnz	r2, 80045f8 <_realloc_r+0x24>
 80045ec:	f7ff ff16 	bl	800441c <_free_r>
 80045f0:	4625      	mov	r5, r4
 80045f2:	4628      	mov	r0, r5
 80045f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045f8:	f000 f838 	bl	800466c <_malloc_usable_size_r>
 80045fc:	4284      	cmp	r4, r0
 80045fe:	4607      	mov	r7, r0
 8004600:	d802      	bhi.n	8004608 <_realloc_r+0x34>
 8004602:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004606:	d812      	bhi.n	800462e <_realloc_r+0x5a>
 8004608:	4621      	mov	r1, r4
 800460a:	4640      	mov	r0, r8
 800460c:	f7ff ff6e 	bl	80044ec <_malloc_r>
 8004610:	4605      	mov	r5, r0
 8004612:	2800      	cmp	r0, #0
 8004614:	d0ed      	beq.n	80045f2 <_realloc_r+0x1e>
 8004616:	42bc      	cmp	r4, r7
 8004618:	4622      	mov	r2, r4
 800461a:	4631      	mov	r1, r6
 800461c:	bf28      	it	cs
 800461e:	463a      	movcs	r2, r7
 8004620:	f7ff fed4 	bl	80043cc <memcpy>
 8004624:	4631      	mov	r1, r6
 8004626:	4640      	mov	r0, r8
 8004628:	f7ff fef8 	bl	800441c <_free_r>
 800462c:	e7e1      	b.n	80045f2 <_realloc_r+0x1e>
 800462e:	4635      	mov	r5, r6
 8004630:	e7df      	b.n	80045f2 <_realloc_r+0x1e>
	...

08004634 <_sbrk_r>:
 8004634:	b538      	push	{r3, r4, r5, lr}
 8004636:	2300      	movs	r3, #0
 8004638:	4d05      	ldr	r5, [pc, #20]	; (8004650 <_sbrk_r+0x1c>)
 800463a:	4604      	mov	r4, r0
 800463c:	4608      	mov	r0, r1
 800463e:	602b      	str	r3, [r5, #0]
 8004640:	f7fc fdc0 	bl	80011c4 <_sbrk>
 8004644:	1c43      	adds	r3, r0, #1
 8004646:	d102      	bne.n	800464e <_sbrk_r+0x1a>
 8004648:	682b      	ldr	r3, [r5, #0]
 800464a:	b103      	cbz	r3, 800464e <_sbrk_r+0x1a>
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	bd38      	pop	{r3, r4, r5, pc}
 8004650:	200001fc 	.word	0x200001fc

08004654 <__malloc_lock>:
 8004654:	4801      	ldr	r0, [pc, #4]	; (800465c <__malloc_lock+0x8>)
 8004656:	f000 b811 	b.w	800467c <__retarget_lock_acquire_recursive>
 800465a:	bf00      	nop
 800465c:	20000200 	.word	0x20000200

08004660 <__malloc_unlock>:
 8004660:	4801      	ldr	r0, [pc, #4]	; (8004668 <__malloc_unlock+0x8>)
 8004662:	f000 b80c 	b.w	800467e <__retarget_lock_release_recursive>
 8004666:	bf00      	nop
 8004668:	20000200 	.word	0x20000200

0800466c <_malloc_usable_size_r>:
 800466c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004670:	1f18      	subs	r0, r3, #4
 8004672:	2b00      	cmp	r3, #0
 8004674:	bfbc      	itt	lt
 8004676:	580b      	ldrlt	r3, [r1, r0]
 8004678:	18c0      	addlt	r0, r0, r3
 800467a:	4770      	bx	lr

0800467c <__retarget_lock_acquire_recursive>:
 800467c:	4770      	bx	lr

0800467e <__retarget_lock_release_recursive>:
 800467e:	4770      	bx	lr

08004680 <_init>:
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004682:	bf00      	nop
 8004684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004686:	bc08      	pop	{r3}
 8004688:	469e      	mov	lr, r3
 800468a:	4770      	bx	lr

0800468c <_fini>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	bf00      	nop
 8004690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004692:	bc08      	pop	{r3}
 8004694:	469e      	mov	lr, r3
 8004696:	4770      	bx	lr
