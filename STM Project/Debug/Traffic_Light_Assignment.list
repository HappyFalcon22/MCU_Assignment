
Traffic_Light_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003140  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800324c  0800324c  0001324c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003274  08003274  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003274  08003274  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003274  08003274  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003274  08003274  00013274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003278  08003278  00013278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800327c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000018  08003294  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08003294  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be60  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f9f  00000000  00000000  0002bea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  0002de40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  0002eaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017499  00000000  00000000  0002f6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc69  00000000  00000000  00046b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086980  00000000  00000000  000547c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db142  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033c4  00000000  00000000  000db194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08003234 	.word	0x08003234

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08003234 	.word	0x08003234

0800014c <button_reading>:
//we define counter for the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

//read 3 button and modify flag buffer when button is pressed
//this function is called in timer interupt
void button_reading(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS; i ++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e0a7      	b.n	80002a8 <button_reading+0x15c>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000158:	4a58      	ldr	r2, [pc, #352]	; (80002bc <button_reading+0x170>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	7819      	ldrb	r1, [r3, #0]
 8000160:	4a57      	ldr	r2, [pc, #348]	; (80002c0 <button_reading+0x174>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	460a      	mov	r2, r1
 8000168:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 800016a:	4a56      	ldr	r2, [pc, #344]	; (80002c4 <button_reading+0x178>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	4413      	add	r3, r2
 8000170:	7819      	ldrb	r1, [r3, #0]
 8000172:	4a52      	ldr	r2, [pc, #328]	; (80002bc <button_reading+0x170>)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	460a      	mov	r2, r1
 800017a:	701a      	strb	r2, [r3, #0]
		//read raw button to buffer0
		if(i == 0){
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d10b      	bne.n	800019a <button_reading+0x4e>
			debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000182:	2102      	movs	r1, #2
 8000184:	4850      	ldr	r0, [pc, #320]	; (80002c8 <button_reading+0x17c>)
 8000186:	f001 f885 	bl	8001294 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	4619      	mov	r1, r3
 800018e:	4a4d      	ldr	r2, [pc, #308]	; (80002c4 <button_reading+0x178>)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	4413      	add	r3, r2
 8000194:	460a      	mov	r2, r1
 8000196:	701a      	strb	r2, [r3, #0]
 8000198:	e02b      	b.n	80001f2 <button_reading+0xa6>
		}
		else if(i == 1){
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d10b      	bne.n	80001b8 <button_reading+0x6c>
			debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80001a0:	2110      	movs	r1, #16
 80001a2:	4849      	ldr	r0, [pc, #292]	; (80002c8 <button_reading+0x17c>)
 80001a4:	f001 f876 	bl	8001294 <HAL_GPIO_ReadPin>
 80001a8:	4603      	mov	r3, r0
 80001aa:	4619      	mov	r1, r3
 80001ac:	4a45      	ldr	r2, [pc, #276]	; (80002c4 <button_reading+0x178>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	4413      	add	r3, r2
 80001b2:	460a      	mov	r2, r1
 80001b4:	701a      	strb	r2, [r3, #0]
 80001b6:	e01c      	b.n	80001f2 <button_reading+0xa6>
		}
		else if(i == 2){
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	2b02      	cmp	r3, #2
 80001bc:	d10b      	bne.n	80001d6 <button_reading+0x8a>
			debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 80001be:	2101      	movs	r1, #1
 80001c0:	4842      	ldr	r0, [pc, #264]	; (80002cc <button_reading+0x180>)
 80001c2:	f001 f867 	bl	8001294 <HAL_GPIO_ReadPin>
 80001c6:	4603      	mov	r3, r0
 80001c8:	4619      	mov	r1, r3
 80001ca:	4a3e      	ldr	r2, [pc, #248]	; (80002c4 <button_reading+0x178>)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	4413      	add	r3, r2
 80001d0:	460a      	mov	r2, r1
 80001d2:	701a      	strb	r2, [r3, #0]
 80001d4:	e00d      	b.n	80001f2 <button_reading+0xa6>
		}
		else if(i == 3){
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	2b03      	cmp	r3, #3
 80001da:	d10a      	bne.n	80001f2 <button_reading+0xa6>
			debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(PEDE_BUTTON_GPIO_Port, PEDE_BUTTON_Pin);
 80001dc:	2101      	movs	r1, #1
 80001de:	483a      	ldr	r0, [pc, #232]	; (80002c8 <button_reading+0x17c>)
 80001e0:	f001 f858 	bl	8001294 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	4a36      	ldr	r2, [pc, #216]	; (80002c4 <button_reading+0x178>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4413      	add	r3, r2
 80001ee:	460a      	mov	r2, r1
 80001f0:	701a      	strb	r2, [r3, #0]
		}
		//if input is stable: 3 recently input is equal
		if(debounceButtonBuffer0[i] == debounceButtonBuffer1[i] &&
 80001f2:	4a34      	ldr	r2, [pc, #208]	; (80002c4 <button_reading+0x178>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4413      	add	r3, r2
 80001f8:	781a      	ldrb	r2, [r3, #0]
 80001fa:	4930      	ldr	r1, [pc, #192]	; (80002bc <button_reading+0x170>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	440b      	add	r3, r1
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	429a      	cmp	r2, r3
 8000204:	d14d      	bne.n	80002a2 <button_reading+0x156>
				debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000206:	4a2d      	ldr	r2, [pc, #180]	; (80002bc <button_reading+0x170>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	4413      	add	r3, r2
 800020c:	781a      	ldrb	r2, [r3, #0]
 800020e:	492c      	ldr	r1, [pc, #176]	; (80002c0 <button_reading+0x174>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	440b      	add	r3, r1
 8000214:	781b      	ldrb	r3, [r3, #0]
		if(debounceButtonBuffer0[i] == debounceButtonBuffer1[i] &&
 8000216:	429a      	cmp	r2, r3
 8000218:	d143      	bne.n	80002a2 <button_reading+0x156>
			//if input stable at present different from previous
			if(buttonBuffer[i] != debounceButtonBuffer2[i]){
 800021a:	4a2d      	ldr	r2, [pc, #180]	; (80002d0 <button_reading+0x184>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4413      	add	r3, r2
 8000220:	781a      	ldrb	r2, [r3, #0]
 8000222:	4927      	ldr	r1, [pc, #156]	; (80002c0 <button_reading+0x174>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	440b      	add	r3, r1
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	429a      	cmp	r2, r3
 800022c:	d019      	beq.n	8000262 <button_reading+0x116>
				//update input to buffer
				buttonBuffer[i] = debounceButtonBuffer2[i];
 800022e:	4a24      	ldr	r2, [pc, #144]	; (80002c0 <button_reading+0x174>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4413      	add	r3, r2
 8000234:	7819      	ldrb	r1, [r3, #0]
 8000236:	4a26      	ldr	r2, [pc, #152]	; (80002d0 <button_reading+0x184>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4413      	add	r3, r2
 800023c:	460a      	mov	r2, r1
 800023e:	701a      	strb	r2, [r3, #0]
				//if input is pressed
				if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000240:	4a23      	ldr	r2, [pc, #140]	; (80002d0 <button_reading+0x184>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4413      	add	r3, r2
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d12a      	bne.n	80002a2 <button_reading+0x156>
					//turn flag on
					flagForButtonPress[i] = 1;
 800024c:	4a21      	ldr	r2, [pc, #132]	; (80002d4 <button_reading+0x188>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4413      	add	r3, r2
 8000252:	2201      	movs	r2, #1
 8000254:	701a      	strb	r2, [r3, #0]
					//set counter
					counterForButtonPress1s[i] = DURATION_FOR_PRESSED;
 8000256:	4a20      	ldr	r2, [pc, #128]	; (80002d8 <button_reading+0x18c>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2164      	movs	r1, #100	; 0x64
 800025c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000260:	e01f      	b.n	80002a2 <button_reading+0x156>
				}
			}
			//if input is stable and no change (present = previous)
			else{
				//decrease counter
				counterForButtonPress1s[i]--;
 8000262:	4a1d      	ldr	r2, [pc, #116]	; (80002d8 <button_reading+0x18c>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800026a:	3b01      	subs	r3, #1
 800026c:	b299      	uxth	r1, r3
 800026e:	4a1a      	ldr	r2, [pc, #104]	; (80002d8 <button_reading+0x18c>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				//when counter is 0, reset counter
				//and if button is press -> turn flag1s on
				if(counterForButtonPress1s[i] == 0){
 8000276:	4a18      	ldr	r2, [pc, #96]	; (80002d8 <button_reading+0x18c>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d10f      	bne.n	80002a2 <button_reading+0x156>
					if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000282:	4a13      	ldr	r2, [pc, #76]	; (80002d0 <button_reading+0x184>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4413      	add	r3, r2
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d104      	bne.n	8000298 <button_reading+0x14c>
						flagForButtonPress1s[i] = 1;
 800028e:	4a13      	ldr	r2, [pc, #76]	; (80002dc <button_reading+0x190>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	4413      	add	r3, r2
 8000294:	2201      	movs	r2, #1
 8000296:	701a      	strb	r2, [r3, #0]
					}
					counterForButtonPress1s[i] = DURATION_FOR_PRESSED;
 8000298:	4a0f      	ldr	r2, [pc, #60]	; (80002d8 <button_reading+0x18c>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2164      	movs	r1, #100	; 0x64
 800029e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < N0_OF_BUTTONS; i ++){
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	3301      	adds	r3, #1
 80002a6:	607b      	str	r3, [r7, #4]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2b03      	cmp	r3, #3
 80002ac:	f77f af54 	ble.w	8000158 <button_reading+0xc>
				}
			}
		}
	}
}
 80002b0:	bf00      	nop
 80002b2:	bf00      	nop
 80002b4:	3708      	adds	r7, #8
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	2000003c 	.word	0x2000003c
 80002c0:	20000040 	.word	0x20000040
 80002c4:	20000038 	.word	0x20000038
 80002c8:	40010800 	.word	0x40010800
 80002cc:	40010c00 	.word	0x40010c00
 80002d0:	20000034 	.word	0x20000034
 80002d4:	20000048 	.word	0x20000048
 80002d8:	2000004c 	.word	0x2000004c
 80002dc:	20000044 	.word	0x20000044

080002e0 <buzzerRun>:

const int a = (BASE_DELAY - LAST_DELAY) / BASE_TIME;
const int b = LAST_DELAY;

void buzzerRun()
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	if (timer5_flag == 1)
 80002e4:	4b25      	ldr	r3, [pc, #148]	; (800037c <buzzerRun+0x9c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d130      	bne.n	800034e <buzzerRun+0x6e>
	{
		setTimer5(delay);
 80002ec:	4b24      	ldr	r3, [pc, #144]	; (8000380 <buzzerRun+0xa0>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 fa35 	bl	8000760 <setTimer5>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, value[i]);
 80002f6:	4b23      	ldr	r3, [pc, #140]	; (8000384 <buzzerRun+0xa4>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a23      	ldr	r2, [pc, #140]	; (8000388 <buzzerRun+0xa8>)
 80002fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000300:	4b22      	ldr	r3, [pc, #136]	; (800038c <buzzerRun+0xac>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	635a      	str	r2, [r3, #52]	; 0x34
		i = (i + 1) % 2;
 8000306:	4b1f      	ldr	r3, [pc, #124]	; (8000384 <buzzerRun+0xa4>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	3301      	adds	r3, #1
 800030c:	2b00      	cmp	r3, #0
 800030e:	f003 0301 	and.w	r3, r3, #1
 8000312:	bfb8      	it	lt
 8000314:	425b      	neglt	r3, r3
 8000316:	4a1b      	ldr	r2, [pc, #108]	; (8000384 <buzzerRun+0xa4>)
 8000318:	6013      	str	r3, [r2, #0]
		// This is the equation with desired coefficients
		delay = a * SEG_counter + b;
 800031a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800031e:	461a      	mov	r2, r3
 8000320:	4b1b      	ldr	r3, [pc, #108]	; (8000390 <buzzerRun+0xb0>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	fb02 f303 	mul.w	r3, r2, r3
 8000328:	22c8      	movs	r2, #200	; 0xc8
 800032a:	4413      	add	r3, r2
 800032c:	461a      	mov	r2, r3
 800032e:	4b14      	ldr	r3, [pc, #80]	; (8000380 <buzzerRun+0xa0>)
 8000330:	601a      	str	r2, [r3, #0]
		value[0] += 10;
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <buzzerRun+0xa8>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	330a      	adds	r3, #10
 8000338:	4a13      	ldr	r2, [pc, #76]	; (8000388 <buzzerRun+0xa8>)
 800033a:	6013      	str	r3, [r2, #0]
		if (value[0] >= 999)
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <buzzerRun+0xa8>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000344:	4293      	cmp	r3, r2
 8000346:	dd02      	ble.n	800034e <buzzerRun+0x6e>
			value[0] = 100;
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <buzzerRun+0xa8>)
 800034a:	2264      	movs	r2, #100	; 0x64
 800034c:	601a      	str	r2, [r3, #0]
	}
	if (timer4_flag == 1)
 800034e:	4b11      	ldr	r3, [pc, #68]	; (8000394 <buzzerRun+0xb4>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d10f      	bne.n	8000376 <buzzerRun+0x96>
	{
		setTimer4(10000);
 8000356:	f242 7010 	movw	r0, #10000	; 0x2710
 800035a:	f000 f9e9 	bl	8000730 <setTimer4>
		SEG_counter--;
 800035e:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <buzzerRun+0xb0>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	3b01      	subs	r3, #1
 8000364:	4a0a      	ldr	r2, [pc, #40]	; (8000390 <buzzerRun+0xb0>)
 8000366:	6013      	str	r3, [r2, #0]
		if (SEG_counter <= 0)
 8000368:	4b09      	ldr	r3, [pc, #36]	; (8000390 <buzzerRun+0xb0>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d102      	bne.n	8000376 <buzzerRun+0x96>
			SEG_counter = BASE_TIME;
 8000370:	4b07      	ldr	r3, [pc, #28]	; (8000390 <buzzerRun+0xb0>)
 8000372:	220a      	movs	r2, #10
 8000374:	601a      	str	r2, [r3, #0]
	}
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000150 	.word	0x20000150
 8000380:	20000008 	.word	0x20000008
 8000384:	20000054 	.word	0x20000054
 8000388:	20000000 	.word	0x20000000
 800038c:	200000e8 	.word	0x200000e8
 8000390:	20000058 	.word	0x20000058
 8000394:	20000148 	.word	0x20000148

08000398 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800039c:	f000 fbd6 	bl	8000b4c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80003a0:	f000 f824 	bl	80003ec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80003a4:	f000 f950 	bl	8000648 <MX_GPIO_Init>
	MX_TIM2_Init();
 80003a8:	f000 f862 	bl	8000470 <MX_TIM2_Init>
	MX_TIM3_Init();
 80003ac:	f000 f8ac 	bl	8000508 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 80003b0:	f000 f920 	bl	80005f4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80003b4:	480a      	ldr	r0, [pc, #40]	; (80003e0 <main+0x48>)
 80003b6:	f001 fc07 	bl	8001bc8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80003ba:	2100      	movs	r1, #0
 80003bc:	4809      	ldr	r0, [pc, #36]	; (80003e4 <main+0x4c>)
 80003be:	f001 fcad 	bl	8001d1c <HAL_TIM_PWM_Start>
	//state = INIT;
	setTimer5(BASE_DELAY);
 80003c2:	f241 3088 	movw	r0, #5000	; 0x1388
 80003c6:	f000 f9cb 	bl	8000760 <setTimer5>
	setTimer4(10000);
 80003ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80003ce:	f000 f9af 	bl	8000730 <setTimer4>

	SEG_counter = 10; // Delete later
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <main+0x50>)
 80003d4:	220a      	movs	r2, #10
 80003d6:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		//fsm_automatic_run();
		//fsm_manual_run();
		buzzerRun();
 80003d8:	f7ff ff82 	bl	80002e0 <buzzerRun>
 80003dc:	e7fc      	b.n	80003d8 <main+0x40>
 80003de:	bf00      	nop
 80003e0:	200000a0 	.word	0x200000a0
 80003e4:	200000e8 	.word	0x200000e8
 80003e8:	20000058 	.word	0x20000058

080003ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b090      	sub	sp, #64	; 0x40
 80003f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f2:	f107 0318 	add.w	r3, r7, #24
 80003f6:	2228      	movs	r2, #40	; 0x28
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f002 ff12 	bl	8003224 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	605a      	str	r2, [r3, #4]
 8000408:	609a      	str	r2, [r3, #8]
 800040a:	60da      	str	r2, [r3, #12]
 800040c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800040e:	2302      	movs	r3, #2
 8000410:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000412:	2301      	movs	r3, #1
 8000414:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000416:	2310      	movs	r3, #16
 8000418:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041a:	2302      	movs	r3, #2
 800041c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800041e:	2300      	movs	r3, #0
 8000420:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000422:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000426:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000428:	f107 0318 	add.w	r3, r7, #24
 800042c:	4618      	mov	r0, r3
 800042e:	f000 ff61 	bl	80012f4 <HAL_RCC_OscConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0x50>
	{
		Error_Handler();
 8000438:	f000 f974 	bl	8000724 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043c:	230f      	movs	r3, #15
 800043e:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000440:	2302      	movs	r3, #2
 8000442:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800044c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2102      	movs	r1, #2
 8000456:	4618      	mov	r0, r3
 8000458:	f001 f9ce 	bl	80017f8 <HAL_RCC_ClockConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x7a>
	{
		Error_Handler();
 8000462:	f000 f95f 	bl	8000724 <Error_Handler>
	}
}
 8000466:	bf00      	nop
 8000468:	3740      	adds	r7, #64	; 0x40
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000476:	f107 0308 	add.w	r3, r7, #8
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000484:	463b      	mov	r3, r7
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800048c:	4b1d      	ldr	r3, [pc, #116]	; (8000504 <MX_TIM2_Init+0x94>)
 800048e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000492:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 63;
 8000494:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <MX_TIM2_Init+0x94>)
 8000496:	223f      	movs	r2, #63	; 0x3f
 8000498:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800049a:	4b1a      	ldr	r3, [pc, #104]	; (8000504 <MX_TIM2_Init+0x94>)
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 80004a0:	4b18      	ldr	r3, [pc, #96]	; (8000504 <MX_TIM2_Init+0x94>)
 80004a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004a6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004a8:	4b16      	ldr	r3, [pc, #88]	; (8000504 <MX_TIM2_Init+0x94>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ae:	4b15      	ldr	r3, [pc, #84]	; (8000504 <MX_TIM2_Init+0x94>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004b4:	4813      	ldr	r0, [pc, #76]	; (8000504 <MX_TIM2_Init+0x94>)
 80004b6:	f001 fb37 	bl	8001b28 <HAL_TIM_Base_Init>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 80004c0:	f000 f930 	bl	8000724 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004c8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004ca:	f107 0308 	add.w	r3, r7, #8
 80004ce:	4619      	mov	r1, r3
 80004d0:	480c      	ldr	r0, [pc, #48]	; (8000504 <MX_TIM2_Init+0x94>)
 80004d2:	f001 fe8b 	bl	80021ec <HAL_TIM_ConfigClockSource>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 80004dc:	f000 f922 	bl	8000724 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e0:	2300      	movs	r3, #0
 80004e2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e4:	2300      	movs	r3, #0
 80004e6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004e8:	463b      	mov	r3, r7
 80004ea:	4619      	mov	r1, r3
 80004ec:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_TIM2_Init+0x94>)
 80004ee:	f002 fa09 	bl	8002904 <HAL_TIMEx_MasterConfigSynchronization>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 80004f8:	f000 f914 	bl	8000724 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80004fc:	bf00      	nop
 80004fe:	3718      	adds	r7, #24
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	200000a0 	.word	0x200000a0

08000508 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08e      	sub	sp, #56	; 0x38
 800050c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800050e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800051c:	f107 0320 	add.w	r3, r7, #32
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]
 8000534:	615a      	str	r2, [r3, #20]
 8000536:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000538:	4b2c      	ldr	r3, [pc, #176]	; (80005ec <MX_TIM3_Init+0xe4>)
 800053a:	4a2d      	ldr	r2, [pc, #180]	; (80005f0 <MX_TIM3_Init+0xe8>)
 800053c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 63;
 800053e:	4b2b      	ldr	r3, [pc, #172]	; (80005ec <MX_TIM3_Init+0xe4>)
 8000540:	223f      	movs	r2, #63	; 0x3f
 8000542:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000544:	4b29      	ldr	r3, [pc, #164]	; (80005ec <MX_TIM3_Init+0xe4>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 999;
 800054a:	4b28      	ldr	r3, [pc, #160]	; (80005ec <MX_TIM3_Init+0xe4>)
 800054c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000550:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000552:	4b26      	ldr	r3, [pc, #152]	; (80005ec <MX_TIM3_Init+0xe4>)
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000558:	4b24      	ldr	r3, [pc, #144]	; (80005ec <MX_TIM3_Init+0xe4>)
 800055a:	2200      	movs	r2, #0
 800055c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800055e:	4823      	ldr	r0, [pc, #140]	; (80005ec <MX_TIM3_Init+0xe4>)
 8000560:	f001 fae2 	bl	8001b28 <HAL_TIM_Base_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_TIM3_Init+0x66>
	{
		Error_Handler();
 800056a:	f000 f8db 	bl	8000724 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800056e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000572:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000574:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000578:	4619      	mov	r1, r3
 800057a:	481c      	ldr	r0, [pc, #112]	; (80005ec <MX_TIM3_Init+0xe4>)
 800057c:	f001 fe36 	bl	80021ec <HAL_TIM_ConfigClockSource>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_TIM3_Init+0x82>
	{
		Error_Handler();
 8000586:	f000 f8cd 	bl	8000724 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800058a:	4818      	ldr	r0, [pc, #96]	; (80005ec <MX_TIM3_Init+0xe4>)
 800058c:	f001 fb6e 	bl	8001c6c <HAL_TIM_PWM_Init>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_TIM3_Init+0x92>
	{
		Error_Handler();
 8000596:	f000 f8c5 	bl	8000724 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800059a:	2300      	movs	r3, #0
 800059c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800059e:	2300      	movs	r3, #0
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	4619      	mov	r1, r3
 80005a8:	4810      	ldr	r0, [pc, #64]	; (80005ec <MX_TIM3_Init+0xe4>)
 80005aa:	f002 f9ab 	bl	8002904 <HAL_TIMEx_MasterConfigSynchronization>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM3_Init+0xb0>
	{
		Error_Handler();
 80005b4:	f000 f8b6 	bl	8000724 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005b8:	2360      	movs	r3, #96	; 0x60
 80005ba:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2200      	movs	r2, #0
 80005cc:	4619      	mov	r1, r3
 80005ce:	4807      	ldr	r0, [pc, #28]	; (80005ec <MX_TIM3_Init+0xe4>)
 80005d0:	f001 fd4e 	bl	8002070 <HAL_TIM_PWM_ConfigChannel>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_TIM3_Init+0xd6>
	{
		Error_Handler();
 80005da:	f000 f8a3 	bl	8000724 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80005de:	4803      	ldr	r0, [pc, #12]	; (80005ec <MX_TIM3_Init+0xe4>)
 80005e0:	f000 f9be 	bl	8000960 <HAL_TIM_MspPostInit>

}
 80005e4:	bf00      	nop
 80005e6:	3738      	adds	r7, #56	; 0x38
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200000e8 	.word	0x200000e8
 80005f0:	40000400 	.word	0x40000400

080005f4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_USART2_UART_Init+0x4c>)
 80005fa:	4a12      	ldr	r2, [pc, #72]	; (8000644 <MX_USART2_UART_Init+0x50>)
 80005fc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <MX_USART2_UART_Init+0x4c>)
 8000600:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000604:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_USART2_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_USART2_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <MX_USART2_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_USART2_UART_Init+0x4c>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <MX_USART2_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_USART2_UART_Init+0x4c>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_USART2_UART_Init+0x4c>)
 800062c:	f002 f9da 	bl	80029e4 <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000636:	f000 f875 	bl	8000724 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	2000005c 	.word	0x2000005c
 8000644:	40004400 	.word	0x40004400

08000648 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800065c:	4b2e      	ldr	r3, [pc, #184]	; (8000718 <MX_GPIO_Init+0xd0>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a2d      	ldr	r2, [pc, #180]	; (8000718 <MX_GPIO_Init+0xd0>)
 8000662:	f043 0304 	orr.w	r3, r3, #4
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <MX_GPIO_Init+0xd0>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0304 	and.w	r3, r3, #4
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000674:	4b28      	ldr	r3, [pc, #160]	; (8000718 <MX_GPIO_Init+0xd0>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a27      	ldr	r2, [pc, #156]	; (8000718 <MX_GPIO_Init+0xd0>)
 800067a:	f043 0308 	orr.w	r3, r3, #8
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b25      	ldr	r3, [pc, #148]	; (8000718 <MX_GPIO_Init+0xd0>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0308 	and.w	r3, r3, #8
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, PEDE_LIGHT_A_Pin|LIGHT1_B_Pin|LIGHT2_B_Pin|LIGHT2_A_Pin, GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000692:	4822      	ldr	r0, [pc, #136]	; (800071c <MX_GPIO_Init+0xd4>)
 8000694:	f000 fe15 	bl	80012c2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, PEDE_LIGHT_B_Pin|LIGHT1_A_Pin, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800069e:	4820      	ldr	r0, [pc, #128]	; (8000720 <MX_GPIO_Init+0xd8>)
 80006a0:	f000 fe0f 	bl	80012c2 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PEDE_BUTTON_Pin BUTTON1_Pin BUTTON2_Pin */
	GPIO_InitStruct.Pin = PEDE_BUTTON_Pin|BUTTON1_Pin|BUTTON2_Pin;
 80006a4:	2313      	movs	r3, #19
 80006a6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	4619      	mov	r1, r3
 80006b6:	481a      	ldr	r0, [pc, #104]	; (8000720 <MX_GPIO_Init+0xd8>)
 80006b8:	f000 fc68 	bl	8000f8c <HAL_GPIO_Init>

	/*Configure GPIO pin : BUTTON3_Pin */
	GPIO_InitStruct.Pin = BUTTON3_Pin;
 80006bc:	2301      	movs	r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	4619      	mov	r1, r3
 80006ce:	4813      	ldr	r0, [pc, #76]	; (800071c <MX_GPIO_Init+0xd4>)
 80006d0:	f000 fc5c 	bl	8000f8c <HAL_GPIO_Init>

	/*Configure GPIO pins : PEDE_LIGHT_A_Pin LIGHT1_B_Pin LIGHT2_B_Pin LIGHT2_A_Pin */
	GPIO_InitStruct.Pin = PEDE_LIGHT_A_Pin|LIGHT1_B_Pin|LIGHT2_B_Pin|LIGHT2_A_Pin;
 80006d4:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80006d8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2302      	movs	r3, #2
 80006e4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	4619      	mov	r1, r3
 80006ec:	480b      	ldr	r0, [pc, #44]	; (800071c <MX_GPIO_Init+0xd4>)
 80006ee:	f000 fc4d 	bl	8000f8c <HAL_GPIO_Init>

	/*Configure GPIO pins : PEDE_LIGHT_B_Pin LIGHT1_A_Pin */
	GPIO_InitStruct.Pin = PEDE_LIGHT_B_Pin|LIGHT1_A_Pin;
 80006f2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80006f6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2302      	movs	r3, #2
 8000702:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	4619      	mov	r1, r3
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_GPIO_Init+0xd8>)
 800070c:	f000 fc3e 	bl	8000f8c <HAL_GPIO_Init>

}
 8000710:	bf00      	nop
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40021000 	.word	0x40021000
 800071c:	40010c00 	.word	0x40010c00
 8000720:	40010800 	.word	0x40010800

08000724 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800072c:	e7fe      	b.n	800072c <Error_Handler+0x8>
	...

08000730 <setTimer4>:
	timer3_counter = duration/TIMER_CYCLE;
	timer3_flag = 0;
}

void setTimer4(uint32_t duration)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TIMER_CYCLE;
 8000738:	230a      	movs	r3, #10
 800073a:	461a      	mov	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000742:	461a      	mov	r2, r3
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <setTimer4+0x28>)
 8000746:	601a      	str	r2, [r3, #0]
	timer4_flag = 0;
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <setTimer4+0x2c>)
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	2000014c 	.word	0x2000014c
 800075c:	20000148 	.word	0x20000148

08000760 <setTimer5>:

void setTimer5(uint32_t duration)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TIMER_CYCLE;
 8000768:	230a      	movs	r3, #10
 800076a:	461a      	mov	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000772:	461a      	mov	r2, r3
 8000774:	4b04      	ldr	r3, [pc, #16]	; (8000788 <setTimer5+0x28>)
 8000776:	601a      	str	r2, [r3, #0]
	timer5_flag = 0;
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <setTimer5+0x2c>)
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	20000154 	.word	0x20000154
 800078c:	20000150 	.word	0x20000150

08000790 <timerRun>:


void timerRun(){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	if(timer1_counter >0){
 8000794:	4b29      	ldr	r3, [pc, #164]	; (800083c <timerRun+0xac>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	dd0b      	ble.n	80007b4 <timerRun+0x24>
		timer1_counter--;
 800079c:	4b27      	ldr	r3, [pc, #156]	; (800083c <timerRun+0xac>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	3b01      	subs	r3, #1
 80007a2:	4a26      	ldr	r2, [pc, #152]	; (800083c <timerRun+0xac>)
 80007a4:	6013      	str	r3, [r2, #0]
		if(timer1_counter <=0){
 80007a6:	4b25      	ldr	r3, [pc, #148]	; (800083c <timerRun+0xac>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	dc02      	bgt.n	80007b4 <timerRun+0x24>
			timer1_flag =1;
 80007ae:	4b24      	ldr	r3, [pc, #144]	; (8000840 <timerRun+0xb0>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter >0){
 80007b4:	4b23      	ldr	r3, [pc, #140]	; (8000844 <timerRun+0xb4>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	dd0b      	ble.n	80007d4 <timerRun+0x44>
			timer2_counter--;
 80007bc:	4b21      	ldr	r3, [pc, #132]	; (8000844 <timerRun+0xb4>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	3b01      	subs	r3, #1
 80007c2:	4a20      	ldr	r2, [pc, #128]	; (8000844 <timerRun+0xb4>)
 80007c4:	6013      	str	r3, [r2, #0]
			if(timer2_counter <=0){
 80007c6:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <timerRun+0xb4>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	dc02      	bgt.n	80007d4 <timerRun+0x44>
				timer2_flag =1;
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <timerRun+0xb8>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer3_counter >0){
 80007d4:	4b1d      	ldr	r3, [pc, #116]	; (800084c <timerRun+0xbc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	dd0b      	ble.n	80007f4 <timerRun+0x64>
			timer3_counter--;
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <timerRun+0xbc>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	4a1a      	ldr	r2, [pc, #104]	; (800084c <timerRun+0xbc>)
 80007e4:	6013      	str	r3, [r2, #0]
			if(timer3_counter <=0){
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <timerRun+0xbc>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	dc02      	bgt.n	80007f4 <timerRun+0x64>
				timer3_flag =1;
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <timerRun+0xc0>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	601a      	str	r2, [r3, #0]
			}
	}
	if(timer4_counter >0){
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <timerRun+0xc4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	dd0b      	ble.n	8000814 <timerRun+0x84>
				timer4_counter--;
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <timerRun+0xc4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	3b01      	subs	r3, #1
 8000802:	4a14      	ldr	r2, [pc, #80]	; (8000854 <timerRun+0xc4>)
 8000804:	6013      	str	r3, [r2, #0]
				if(timer4_counter <=0){
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <timerRun+0xc4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	dc02      	bgt.n	8000814 <timerRun+0x84>
					timer4_flag =1;
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <timerRun+0xc8>)
 8000810:	2201      	movs	r2, #1
 8000812:	601a      	str	r2, [r3, #0]
				}
		}
	if(timer5_counter >0){
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <timerRun+0xcc>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	dd0b      	ble.n	8000834 <timerRun+0xa4>
				timer5_counter--;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <timerRun+0xcc>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	3b01      	subs	r3, #1
 8000822:	4a0e      	ldr	r2, [pc, #56]	; (800085c <timerRun+0xcc>)
 8000824:	6013      	str	r3, [r2, #0]
				if(timer5_counter <=0){
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <timerRun+0xcc>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	dc02      	bgt.n	8000834 <timerRun+0xa4>
					timer5_flag =1;
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <timerRun+0xd0>)
 8000830:	2201      	movs	r2, #1
 8000832:	601a      	str	r2, [r3, #0]
				}
		}
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	20000134 	.word	0x20000134
 8000840:	20000130 	.word	0x20000130
 8000844:	2000013c 	.word	0x2000013c
 8000848:	20000138 	.word	0x20000138
 800084c:	20000144 	.word	0x20000144
 8000850:	20000140 	.word	0x20000140
 8000854:	2000014c 	.word	0x2000014c
 8000858:	20000148 	.word	0x20000148
 800085c:	20000154 	.word	0x20000154
 8000860:	20000150 	.word	0x20000150

08000864 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	button_reading();
 800086c:	f7ff fc6e 	bl	800014c <button_reading>
	timerRun();
 8000870:	f7ff ff8e 	bl	8000790 <timerRun>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <HAL_MspInit+0x5c>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	4a14      	ldr	r2, [pc, #80]	; (80008d8 <HAL_MspInit+0x5c>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6193      	str	r3, [r2, #24]
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_MspInit+0x5c>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <HAL_MspInit+0x5c>)
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <HAL_MspInit+0x5c>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	61d3      	str	r3, [r2, #28]
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <HAL_MspInit+0x5c>)
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <HAL_MspInit+0x60>)
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	4a04      	ldr	r2, [pc, #16]	; (80008dc <HAL_MspInit+0x60>)
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	3714      	adds	r7, #20
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40010000 	.word	0x40010000

080008e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008f0:	d114      	bne.n	800091c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008f2:	4b19      	ldr	r3, [pc, #100]	; (8000958 <HAL_TIM_Base_MspInit+0x78>)
 80008f4:	69db      	ldr	r3, [r3, #28]
 80008f6:	4a18      	ldr	r2, [pc, #96]	; (8000958 <HAL_TIM_Base_MspInit+0x78>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	61d3      	str	r3, [r2, #28]
 80008fe:	4b16      	ldr	r3, [pc, #88]	; (8000958 <HAL_TIM_Base_MspInit+0x78>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	201c      	movs	r0, #28
 8000910:	f000 fa55 	bl	8000dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000914:	201c      	movs	r0, #28
 8000916:	f000 fa6e 	bl	8000df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800091a:	e018      	b.n	800094e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a0e      	ldr	r2, [pc, #56]	; (800095c <HAL_TIM_Base_MspInit+0x7c>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d113      	bne.n	800094e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <HAL_TIM_Base_MspInit+0x78>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <HAL_TIM_Base_MspInit+0x78>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	61d3      	str	r3, [r2, #28]
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_TIM_Base_MspInit+0x78>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	201d      	movs	r0, #29
 8000944:	f000 fa3b 	bl	8000dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000948:	201d      	movs	r0, #29
 800094a:	f000 fa54 	bl	8000df6 <HAL_NVIC_EnableIRQ>
}
 800094e:	bf00      	nop
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000
 800095c:	40000400 	.word	0x40000400

08000960 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a0f      	ldr	r2, [pc, #60]	; (80009b8 <HAL_TIM_MspPostInit+0x58>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d117      	bne.n	80009b0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000980:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <HAL_TIM_MspPostInit+0x5c>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	4a0d      	ldr	r2, [pc, #52]	; (80009bc <HAL_TIM_MspPostInit+0x5c>)
 8000986:	f043 0304 	orr.w	r3, r3, #4
 800098a:	6193      	str	r3, [r2, #24]
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <HAL_TIM_MspPostInit+0x5c>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f003 0304 	and.w	r3, r3, #4
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PEDE_BUZZER_Pin;
 8000998:	2340      	movs	r3, #64	; 0x40
 800099a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2302      	movs	r3, #2
 80009a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PEDE_BUZZER_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	4619      	mov	r1, r3
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <HAL_TIM_MspPostInit+0x60>)
 80009ac:	f000 faee 	bl	8000f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80009b0:	bf00      	nop
 80009b2:	3720      	adds	r7, #32
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40000400 	.word	0x40000400
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40010800 	.word	0x40010800

080009c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a1f      	ldr	r2, [pc, #124]	; (8000a5c <HAL_UART_MspInit+0x98>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d137      	bne.n	8000a54 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009e4:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <HAL_UART_MspInit+0x9c>)
 80009e6:	69db      	ldr	r3, [r3, #28]
 80009e8:	4a1d      	ldr	r2, [pc, #116]	; (8000a60 <HAL_UART_MspInit+0x9c>)
 80009ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ee:	61d3      	str	r3, [r2, #28]
 80009f0:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <HAL_UART_MspInit+0x9c>)
 80009f2:	69db      	ldr	r3, [r3, #28]
 80009f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <HAL_UART_MspInit+0x9c>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a17      	ldr	r2, [pc, #92]	; (8000a60 <HAL_UART_MspInit+0x9c>)
 8000a02:	f043 0304 	orr.w	r3, r3, #4
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <HAL_UART_MspInit+0x9c>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0304 	and.w	r3, r3, #4
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a14:	2304      	movs	r3, #4
 8000a16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	4619      	mov	r1, r3
 8000a26:	480f      	ldr	r0, [pc, #60]	; (8000a64 <HAL_UART_MspInit+0xa0>)
 8000a28:	f000 fab0 	bl	8000f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a2c:	2308      	movs	r3, #8
 8000a2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	f107 0310 	add.w	r3, r7, #16
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4809      	ldr	r0, [pc, #36]	; (8000a64 <HAL_UART_MspInit+0xa0>)
 8000a40:	f000 faa4 	bl	8000f8c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2100      	movs	r1, #0
 8000a48:	2026      	movs	r0, #38	; 0x26
 8000a4a:	f000 f9b8 	bl	8000dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a4e:	2026      	movs	r0, #38	; 0x26
 8000a50:	f000 f9d1 	bl	8000df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a54:	bf00      	nop
 8000a56:	3720      	adds	r7, #32
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40004400 	.word	0x40004400
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40010800 	.word	0x40010800

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <NMI_Handler+0x4>

08000a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <HardFault_Handler+0x4>

08000a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <MemManage_Handler+0x4>

08000a7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr

08000a92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr

08000a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr

08000aaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aae:	f000 f893 	bl	8000bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000abc:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <TIM2_IRQHandler+0x10>)
 8000abe:	f001 f9cf 	bl	8001e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200000a0 	.word	0x200000a0

08000acc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <TIM3_IRQHandler+0x10>)
 8000ad2:	f001 f9c5 	bl	8001e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200000e8 	.word	0x200000e8

08000ae0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <USART2_IRQHandler+0x10>)
 8000ae6:	f001 ffcb 	bl	8002a80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2000005c 	.word	0x2000005c

08000af4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b02:	490d      	ldr	r1, [pc, #52]	; (8000b38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b04:	4a0d      	ldr	r2, [pc, #52]	; (8000b3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b08:	e002      	b.n	8000b10 <LoopCopyDataInit>

08000b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0e:	3304      	adds	r3, #4

08000b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b14:	d3f9      	bcc.n	8000b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b18:	4c0a      	ldr	r4, [pc, #40]	; (8000b44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b1c:	e001      	b.n	8000b22 <LoopFillZerobss>

08000b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b20:	3204      	adds	r2, #4

08000b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b24:	d3fb      	bcc.n	8000b1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b26:	f7ff ffe5 	bl	8000af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2a:	f002 fb57 	bl	80031dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b2e:	f7ff fc33 	bl	8000398 <main>
  bx lr
 8000b32:	4770      	bx	lr
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b38:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000b3c:	0800327c 	.word	0x0800327c
  ldr r2, =_sbss
 8000b40:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000b44:	2000015c 	.word	0x2000015c

08000b48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC1_2_IRQHandler>
	...

08000b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_Init+0x28>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <HAL_Init+0x28>)
 8000b56:	f043 0310 	orr.w	r3, r3, #16
 8000b5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f000 f923 	bl	8000da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b62:	200f      	movs	r0, #15
 8000b64:	f000 f808 	bl	8000b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b68:	f7ff fe88 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40022000 	.word	0x40022000

08000b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_InitTick+0x54>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_InitTick+0x58>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f93b 	bl	8000e12 <HAL_SYSTICK_Config>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e00e      	b.n	8000bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d80a      	bhi.n	8000bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bac:	2200      	movs	r2, #0
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	f000 f903 	bl	8000dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb8:	4a06      	ldr	r2, [pc, #24]	; (8000bd4 <HAL_InitTick+0x5c>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e000      	b.n	8000bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	2000000c 	.word	0x2000000c
 8000bd0:	20000014 	.word	0x20000014
 8000bd4:	20000010 	.word	0x20000010

08000bd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <HAL_IncTick+0x1c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_IncTick+0x20>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	4a03      	ldr	r2, [pc, #12]	; (8000bf8 <HAL_IncTick+0x20>)
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	20000014 	.word	0x20000014
 8000bf8:	20000158 	.word	0x20000158

08000bfc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000c00:	4b02      	ldr	r3, [pc, #8]	; (8000c0c <HAL_GetTick+0x10>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	20000158 	.word	0x20000158

08000c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <__NVIC_GetPriorityGrouping+0x18>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	f003 0307 	and.w	r3, r3, #7
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	db0b      	blt.n	8000c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f003 021f 	and.w	r2, r3, #31
 8000c8c:	4906      	ldr	r1, [pc, #24]	; (8000ca8 <__NVIC_EnableIRQ+0x34>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	2001      	movs	r0, #1
 8000c96:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db0a      	blt.n	8000cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	490c      	ldr	r1, [pc, #48]	; (8000cf8 <__NVIC_SetPriority+0x4c>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd4:	e00a      	b.n	8000cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4908      	ldr	r1, [pc, #32]	; (8000cfc <__NVIC_SetPriority+0x50>)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	3b04      	subs	r3, #4
 8000ce4:	0112      	lsls	r2, r2, #4
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	761a      	strb	r2, [r3, #24]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f1c3 0307 	rsb	r3, r3, #7
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf28      	it	cs
 8000d1e:	2304      	movcs	r3, #4
 8000d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d902      	bls.n	8000d30 <NVIC_EncodePriority+0x30>
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	e000      	b.n	8000d32 <NVIC_EncodePriority+0x32>
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43d9      	mvns	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	4313      	orrs	r3, r2
         );
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3724      	adds	r7, #36	; 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d74:	d301      	bcc.n	8000d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00f      	b.n	8000d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <SysTick_Config+0x40>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d82:	210f      	movs	r1, #15
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f7ff ff90 	bl	8000cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <SysTick_Config+0x40>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <SysTick_Config+0x40>)
 8000d94:	2207      	movs	r2, #7
 8000d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	e000e010 	.word	0xe000e010

08000da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ff2d 	bl	8000c10 <__NVIC_SetPriorityGrouping>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b086      	sub	sp, #24
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd0:	f7ff ff42 	bl	8000c58 <__NVIC_GetPriorityGrouping>
 8000dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	68b9      	ldr	r1, [r7, #8]
 8000dda:	6978      	ldr	r0, [r7, #20]
 8000ddc:	f7ff ff90 	bl	8000d00 <NVIC_EncodePriority>
 8000de0:	4602      	mov	r2, r0
 8000de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff5f 	bl	8000cac <__NVIC_SetPriority>
}
 8000dee:	bf00      	nop
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff35 	bl	8000c74 <__NVIC_EnableIRQ>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ffa2 	bl	8000d64 <SysTick_Config>
 8000e20:	4603      	mov	r3, r0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b085      	sub	sp, #20
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d008      	beq.n	8000e52 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2204      	movs	r2, #4
 8000e44:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e020      	b.n	8000e94 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f022 020e 	bic.w	r2, r2, #14
 8000e60:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f022 0201 	bic.w	r2, r2, #1
 8000e70:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e80:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2201      	movs	r2, #1
 8000e86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
	...

08000ea0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d005      	beq.n	8000ec2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2204      	movs	r2, #4
 8000eba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	73fb      	strb	r3, [r7, #15]
 8000ec0:	e051      	b.n	8000f66 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f022 020e 	bic.w	r2, r2, #14
 8000ed0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f022 0201 	bic.w	r2, r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a22      	ldr	r2, [pc, #136]	; (8000f70 <HAL_DMA_Abort_IT+0xd0>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d029      	beq.n	8000f40 <HAL_DMA_Abort_IT+0xa0>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a20      	ldr	r2, [pc, #128]	; (8000f74 <HAL_DMA_Abort_IT+0xd4>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d022      	beq.n	8000f3c <HAL_DMA_Abort_IT+0x9c>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a1f      	ldr	r2, [pc, #124]	; (8000f78 <HAL_DMA_Abort_IT+0xd8>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d01a      	beq.n	8000f36 <HAL_DMA_Abort_IT+0x96>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a1d      	ldr	r2, [pc, #116]	; (8000f7c <HAL_DMA_Abort_IT+0xdc>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d012      	beq.n	8000f30 <HAL_DMA_Abort_IT+0x90>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a1c      	ldr	r2, [pc, #112]	; (8000f80 <HAL_DMA_Abort_IT+0xe0>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d00a      	beq.n	8000f2a <HAL_DMA_Abort_IT+0x8a>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a1a      	ldr	r2, [pc, #104]	; (8000f84 <HAL_DMA_Abort_IT+0xe4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d102      	bne.n	8000f24 <HAL_DMA_Abort_IT+0x84>
 8000f1e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f22:	e00e      	b.n	8000f42 <HAL_DMA_Abort_IT+0xa2>
 8000f24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f28:	e00b      	b.n	8000f42 <HAL_DMA_Abort_IT+0xa2>
 8000f2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f2e:	e008      	b.n	8000f42 <HAL_DMA_Abort_IT+0xa2>
 8000f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f34:	e005      	b.n	8000f42 <HAL_DMA_Abort_IT+0xa2>
 8000f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f3a:	e002      	b.n	8000f42 <HAL_DMA_Abort_IT+0xa2>
 8000f3c:	2310      	movs	r3, #16
 8000f3e:	e000      	b.n	8000f42 <HAL_DMA_Abort_IT+0xa2>
 8000f40:	2301      	movs	r3, #1
 8000f42:	4a11      	ldr	r2, [pc, #68]	; (8000f88 <HAL_DMA_Abort_IT+0xe8>)
 8000f44:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	4798      	blx	r3
    } 
  }
  return status;
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40020008 	.word	0x40020008
 8000f74:	4002001c 	.word	0x4002001c
 8000f78:	40020030 	.word	0x40020030
 8000f7c:	40020044 	.word	0x40020044
 8000f80:	40020058 	.word	0x40020058
 8000f84:	4002006c 	.word	0x4002006c
 8000f88:	40020000 	.word	0x40020000

08000f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b08b      	sub	sp, #44	; 0x2c
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9e:	e169      	b.n	8001274 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	69fa      	ldr	r2, [r7, #28]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	f040 8158 	bne.w	800126e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	4a9a      	ldr	r2, [pc, #616]	; (800122c <HAL_GPIO_Init+0x2a0>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d05e      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000fc8:	4a98      	ldr	r2, [pc, #608]	; (800122c <HAL_GPIO_Init+0x2a0>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d875      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000fce:	4a98      	ldr	r2, [pc, #608]	; (8001230 <HAL_GPIO_Init+0x2a4>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d058      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000fd4:	4a96      	ldr	r2, [pc, #600]	; (8001230 <HAL_GPIO_Init+0x2a4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d86f      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000fda:	4a96      	ldr	r2, [pc, #600]	; (8001234 <HAL_GPIO_Init+0x2a8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d052      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000fe0:	4a94      	ldr	r2, [pc, #592]	; (8001234 <HAL_GPIO_Init+0x2a8>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d869      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000fe6:	4a94      	ldr	r2, [pc, #592]	; (8001238 <HAL_GPIO_Init+0x2ac>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d04c      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000fec:	4a92      	ldr	r2, [pc, #584]	; (8001238 <HAL_GPIO_Init+0x2ac>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d863      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000ff2:	4a92      	ldr	r2, [pc, #584]	; (800123c <HAL_GPIO_Init+0x2b0>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d046      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000ff8:	4a90      	ldr	r2, [pc, #576]	; (800123c <HAL_GPIO_Init+0x2b0>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d85d      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000ffe:	2b12      	cmp	r3, #18
 8001000:	d82a      	bhi.n	8001058 <HAL_GPIO_Init+0xcc>
 8001002:	2b12      	cmp	r3, #18
 8001004:	d859      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8001006:	a201      	add	r2, pc, #4	; (adr r2, 800100c <HAL_GPIO_Init+0x80>)
 8001008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100c:	08001087 	.word	0x08001087
 8001010:	08001061 	.word	0x08001061
 8001014:	08001073 	.word	0x08001073
 8001018:	080010b5 	.word	0x080010b5
 800101c:	080010bb 	.word	0x080010bb
 8001020:	080010bb 	.word	0x080010bb
 8001024:	080010bb 	.word	0x080010bb
 8001028:	080010bb 	.word	0x080010bb
 800102c:	080010bb 	.word	0x080010bb
 8001030:	080010bb 	.word	0x080010bb
 8001034:	080010bb 	.word	0x080010bb
 8001038:	080010bb 	.word	0x080010bb
 800103c:	080010bb 	.word	0x080010bb
 8001040:	080010bb 	.word	0x080010bb
 8001044:	080010bb 	.word	0x080010bb
 8001048:	080010bb 	.word	0x080010bb
 800104c:	080010bb 	.word	0x080010bb
 8001050:	08001069 	.word	0x08001069
 8001054:	0800107d 	.word	0x0800107d
 8001058:	4a79      	ldr	r2, [pc, #484]	; (8001240 <HAL_GPIO_Init+0x2b4>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d013      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800105e:	e02c      	b.n	80010ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	623b      	str	r3, [r7, #32]
          break;
 8001066:	e029      	b.n	80010bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	3304      	adds	r3, #4
 800106e:	623b      	str	r3, [r7, #32]
          break;
 8001070:	e024      	b.n	80010bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	3308      	adds	r3, #8
 8001078:	623b      	str	r3, [r7, #32]
          break;
 800107a:	e01f      	b.n	80010bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	330c      	adds	r3, #12
 8001082:	623b      	str	r3, [r7, #32]
          break;
 8001084:	e01a      	b.n	80010bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d102      	bne.n	8001094 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800108e:	2304      	movs	r3, #4
 8001090:	623b      	str	r3, [r7, #32]
          break;
 8001092:	e013      	b.n	80010bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d105      	bne.n	80010a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800109c:	2308      	movs	r3, #8
 800109e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69fa      	ldr	r2, [r7, #28]
 80010a4:	611a      	str	r2, [r3, #16]
          break;
 80010a6:	e009      	b.n	80010bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a8:	2308      	movs	r3, #8
 80010aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	615a      	str	r2, [r3, #20]
          break;
 80010b2:	e003      	b.n	80010bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
          break;
 80010b8:	e000      	b.n	80010bc <HAL_GPIO_Init+0x130>
          break;
 80010ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	2bff      	cmp	r3, #255	; 0xff
 80010c0:	d801      	bhi.n	80010c6 <HAL_GPIO_Init+0x13a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	e001      	b.n	80010ca <HAL_GPIO_Init+0x13e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3304      	adds	r3, #4
 80010ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	2bff      	cmp	r3, #255	; 0xff
 80010d0:	d802      	bhi.n	80010d8 <HAL_GPIO_Init+0x14c>
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	e002      	b.n	80010de <HAL_GPIO_Init+0x152>
 80010d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010da:	3b08      	subs	r3, #8
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	210f      	movs	r1, #15
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	401a      	ands	r2, r3
 80010f0:	6a39      	ldr	r1, [r7, #32]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	431a      	orrs	r2, r3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 80b1 	beq.w	800126e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800110c:	4b4d      	ldr	r3, [pc, #308]	; (8001244 <HAL_GPIO_Init+0x2b8>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a4c      	ldr	r2, [pc, #304]	; (8001244 <HAL_GPIO_Init+0x2b8>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b4a      	ldr	r3, [pc, #296]	; (8001244 <HAL_GPIO_Init+0x2b8>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001124:	4a48      	ldr	r2, [pc, #288]	; (8001248 <HAL_GPIO_Init+0x2bc>)
 8001126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	3302      	adds	r3, #2
 800112c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001130:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	220f      	movs	r2, #15
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	4013      	ands	r3, r2
 8001146:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a40      	ldr	r2, [pc, #256]	; (800124c <HAL_GPIO_Init+0x2c0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d013      	beq.n	8001178 <HAL_GPIO_Init+0x1ec>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a3f      	ldr	r2, [pc, #252]	; (8001250 <HAL_GPIO_Init+0x2c4>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d00d      	beq.n	8001174 <HAL_GPIO_Init+0x1e8>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a3e      	ldr	r2, [pc, #248]	; (8001254 <HAL_GPIO_Init+0x2c8>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d007      	beq.n	8001170 <HAL_GPIO_Init+0x1e4>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a3d      	ldr	r2, [pc, #244]	; (8001258 <HAL_GPIO_Init+0x2cc>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d101      	bne.n	800116c <HAL_GPIO_Init+0x1e0>
 8001168:	2303      	movs	r3, #3
 800116a:	e006      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 800116c:	2304      	movs	r3, #4
 800116e:	e004      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 8001170:	2302      	movs	r3, #2
 8001172:	e002      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 8001174:	2301      	movs	r3, #1
 8001176:	e000      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 8001178:	2300      	movs	r3, #0
 800117a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800117c:	f002 0203 	and.w	r2, r2, #3
 8001180:	0092      	lsls	r2, r2, #2
 8001182:	4093      	lsls	r3, r2
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	4313      	orrs	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800118a:	492f      	ldr	r1, [pc, #188]	; (8001248 <HAL_GPIO_Init+0x2bc>)
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	3302      	adds	r3, #2
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d006      	beq.n	80011b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011a4:	4b2d      	ldr	r3, [pc, #180]	; (800125c <HAL_GPIO_Init+0x2d0>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	492c      	ldr	r1, [pc, #176]	; (800125c <HAL_GPIO_Init+0x2d0>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	600b      	str	r3, [r1, #0]
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011b2:	4b2a      	ldr	r3, [pc, #168]	; (800125c <HAL_GPIO_Init+0x2d0>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	4928      	ldr	r1, [pc, #160]	; (800125c <HAL_GPIO_Init+0x2d0>)
 80011bc:	4013      	ands	r3, r2
 80011be:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d006      	beq.n	80011da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011cc:	4b23      	ldr	r3, [pc, #140]	; (800125c <HAL_GPIO_Init+0x2d0>)
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	4922      	ldr	r1, [pc, #136]	; (800125c <HAL_GPIO_Init+0x2d0>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	604b      	str	r3, [r1, #4]
 80011d8:	e006      	b.n	80011e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <HAL_GPIO_Init+0x2d0>)
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	491e      	ldr	r1, [pc, #120]	; (800125c <HAL_GPIO_Init+0x2d0>)
 80011e4:	4013      	ands	r3, r2
 80011e6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d006      	beq.n	8001202 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <HAL_GPIO_Init+0x2d0>)
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	4918      	ldr	r1, [pc, #96]	; (800125c <HAL_GPIO_Init+0x2d0>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	608b      	str	r3, [r1, #8]
 8001200:	e006      	b.n	8001210 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001202:	4b16      	ldr	r3, [pc, #88]	; (800125c <HAL_GPIO_Init+0x2d0>)
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	43db      	mvns	r3, r3
 800120a:	4914      	ldr	r1, [pc, #80]	; (800125c <HAL_GPIO_Init+0x2d0>)
 800120c:	4013      	ands	r3, r2
 800120e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d021      	beq.n	8001260 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <HAL_GPIO_Init+0x2d0>)
 800121e:	68da      	ldr	r2, [r3, #12]
 8001220:	490e      	ldr	r1, [pc, #56]	; (800125c <HAL_GPIO_Init+0x2d0>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	60cb      	str	r3, [r1, #12]
 8001228:	e021      	b.n	800126e <HAL_GPIO_Init+0x2e2>
 800122a:	bf00      	nop
 800122c:	10320000 	.word	0x10320000
 8001230:	10310000 	.word	0x10310000
 8001234:	10220000 	.word	0x10220000
 8001238:	10210000 	.word	0x10210000
 800123c:	10120000 	.word	0x10120000
 8001240:	10110000 	.word	0x10110000
 8001244:	40021000 	.word	0x40021000
 8001248:	40010000 	.word	0x40010000
 800124c:	40010800 	.word	0x40010800
 8001250:	40010c00 	.word	0x40010c00
 8001254:	40011000 	.word	0x40011000
 8001258:	40011400 	.word	0x40011400
 800125c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_GPIO_Init+0x304>)
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	43db      	mvns	r3, r3
 8001268:	4909      	ldr	r1, [pc, #36]	; (8001290 <HAL_GPIO_Init+0x304>)
 800126a:	4013      	ands	r3, r2
 800126c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	3301      	adds	r3, #1
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	fa22 f303 	lsr.w	r3, r2, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	f47f ae8e 	bne.w	8000fa0 <HAL_GPIO_Init+0x14>
  }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	372c      	adds	r7, #44	; 0x2c
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	40010400 	.word	0x40010400

08001294 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	4013      	ands	r3, r2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012ac:	2301      	movs	r3, #1
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e001      	b.n	80012b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr

080012c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	460b      	mov	r3, r1
 80012cc:	807b      	strh	r3, [r7, #2]
 80012ce:	4613      	mov	r3, r2
 80012d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012d2:	787b      	ldrb	r3, [r7, #1]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012d8:	887a      	ldrh	r2, [r7, #2]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012de:	e003      	b.n	80012e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012e0:	887b      	ldrh	r3, [r7, #2]
 80012e2:	041a      	lsls	r2, r3, #16
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	611a      	str	r2, [r3, #16]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
	...

080012f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e272      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 8087 	beq.w	8001422 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001314:	4b92      	ldr	r3, [pc, #584]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 030c 	and.w	r3, r3, #12
 800131c:	2b04      	cmp	r3, #4
 800131e:	d00c      	beq.n	800133a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001320:	4b8f      	ldr	r3, [pc, #572]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 030c 	and.w	r3, r3, #12
 8001328:	2b08      	cmp	r3, #8
 800132a:	d112      	bne.n	8001352 <HAL_RCC_OscConfig+0x5e>
 800132c:	4b8c      	ldr	r3, [pc, #560]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001338:	d10b      	bne.n	8001352 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133a:	4b89      	ldr	r3, [pc, #548]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d06c      	beq.n	8001420 <HAL_RCC_OscConfig+0x12c>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d168      	bne.n	8001420 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e24c      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800135a:	d106      	bne.n	800136a <HAL_RCC_OscConfig+0x76>
 800135c:	4b80      	ldr	r3, [pc, #512]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a7f      	ldr	r2, [pc, #508]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	e02e      	b.n	80013c8 <HAL_RCC_OscConfig+0xd4>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0x98>
 8001372:	4b7b      	ldr	r3, [pc, #492]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a7a      	ldr	r2, [pc, #488]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b78      	ldr	r3, [pc, #480]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a77      	ldr	r2, [pc, #476]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e01d      	b.n	80013c8 <HAL_RCC_OscConfig+0xd4>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0xbc>
 8001396:	4b72      	ldr	r3, [pc, #456]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a71      	ldr	r2, [pc, #452]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 800139c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b6f      	ldr	r3, [pc, #444]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a6e      	ldr	r2, [pc, #440]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e00b      	b.n	80013c8 <HAL_RCC_OscConfig+0xd4>
 80013b0:	4b6b      	ldr	r3, [pc, #428]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a6a      	ldr	r2, [pc, #424]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b68      	ldr	r3, [pc, #416]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a67      	ldr	r2, [pc, #412]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d013      	beq.n	80013f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fc14 	bl	8000bfc <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d8:	f7ff fc10 	bl	8000bfc <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	; 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e200      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ea:	4b5d      	ldr	r3, [pc, #372]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0xe4>
 80013f6:	e014      	b.n	8001422 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fc00 	bl	8000bfc <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001400:	f7ff fbfc 	bl	8000bfc <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	; 0x64
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e1ec      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001412:	4b53      	ldr	r3, [pc, #332]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x10c>
 800141e:	e000      	b.n	8001422 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d063      	beq.n	80014f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800142e:	4b4c      	ldr	r3, [pc, #304]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 030c 	and.w	r3, r3, #12
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00b      	beq.n	8001452 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800143a:	4b49      	ldr	r3, [pc, #292]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b08      	cmp	r3, #8
 8001444:	d11c      	bne.n	8001480 <HAL_RCC_OscConfig+0x18c>
 8001446:	4b46      	ldr	r3, [pc, #280]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d116      	bne.n	8001480 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001452:	4b43      	ldr	r3, [pc, #268]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d005      	beq.n	800146a <HAL_RCC_OscConfig+0x176>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d001      	beq.n	800146a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e1c0      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146a:	4b3d      	ldr	r3, [pc, #244]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4939      	ldr	r1, [pc, #228]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 800147a:	4313      	orrs	r3, r2
 800147c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147e:	e03a      	b.n	80014f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d020      	beq.n	80014ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001488:	4b36      	ldr	r3, [pc, #216]	; (8001564 <HAL_RCC_OscConfig+0x270>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148e:	f7ff fbb5 	bl	8000bfc <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001496:	f7ff fbb1 	bl	8000bfc <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e1a1      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a8:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b4:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	4927      	ldr	r1, [pc, #156]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	600b      	str	r3, [r1, #0]
 80014c8:	e015      	b.n	80014f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ca:	4b26      	ldr	r3, [pc, #152]	; (8001564 <HAL_RCC_OscConfig+0x270>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fb94 	bl	8000bfc <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d8:	f7ff fb90 	bl	8000bfc <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e180      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ea:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d03a      	beq.n	8001578 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d019      	beq.n	800153e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <HAL_RCC_OscConfig+0x274>)
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001510:	f7ff fb74 	bl	8000bfc <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001518:	f7ff fb70 	bl	8000bfc <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e160      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <HAL_RCC_OscConfig+0x26c>)
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001536:	2001      	movs	r0, #1
 8001538:	f000 fad8 	bl	8001aec <RCC_Delay>
 800153c:	e01c      	b.n	8001578 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <HAL_RCC_OscConfig+0x274>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001544:	f7ff fb5a 	bl	8000bfc <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800154a:	e00f      	b.n	800156c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800154c:	f7ff fb56 	bl	8000bfc <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d908      	bls.n	800156c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e146      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000
 8001564:	42420000 	.word	0x42420000
 8001568:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800156c:	4b92      	ldr	r3, [pc, #584]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1e9      	bne.n	800154c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 80a6 	beq.w	80016d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800158a:	4b8b      	ldr	r3, [pc, #556]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10d      	bne.n	80015b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	4b88      	ldr	r3, [pc, #544]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	4a87      	ldr	r2, [pc, #540]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	61d3      	str	r3, [r2, #28]
 80015a2:	4b85      	ldr	r3, [pc, #532]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ae:	2301      	movs	r3, #1
 80015b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b2:	4b82      	ldr	r3, [pc, #520]	; (80017bc <HAL_RCC_OscConfig+0x4c8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d118      	bne.n	80015f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015be:	4b7f      	ldr	r3, [pc, #508]	; (80017bc <HAL_RCC_OscConfig+0x4c8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a7e      	ldr	r2, [pc, #504]	; (80017bc <HAL_RCC_OscConfig+0x4c8>)
 80015c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fb17 	bl	8000bfc <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d2:	f7ff fb13 	bl	8000bfc <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b64      	cmp	r3, #100	; 0x64
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e103      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e4:	4b75      	ldr	r3, [pc, #468]	; (80017bc <HAL_RCC_OscConfig+0x4c8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f0      	beq.n	80015d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d106      	bne.n	8001606 <HAL_RCC_OscConfig+0x312>
 80015f8:	4b6f      	ldr	r3, [pc, #444]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	4a6e      	ldr	r2, [pc, #440]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6213      	str	r3, [r2, #32]
 8001604:	e02d      	b.n	8001662 <HAL_RCC_OscConfig+0x36e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0x334>
 800160e:	4b6a      	ldr	r3, [pc, #424]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	4a69      	ldr	r2, [pc, #420]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001614:	f023 0301 	bic.w	r3, r3, #1
 8001618:	6213      	str	r3, [r2, #32]
 800161a:	4b67      	ldr	r3, [pc, #412]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	4a66      	ldr	r2, [pc, #408]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001620:	f023 0304 	bic.w	r3, r3, #4
 8001624:	6213      	str	r3, [r2, #32]
 8001626:	e01c      	b.n	8001662 <HAL_RCC_OscConfig+0x36e>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	2b05      	cmp	r3, #5
 800162e:	d10c      	bne.n	800164a <HAL_RCC_OscConfig+0x356>
 8001630:	4b61      	ldr	r3, [pc, #388]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	4a60      	ldr	r2, [pc, #384]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001636:	f043 0304 	orr.w	r3, r3, #4
 800163a:	6213      	str	r3, [r2, #32]
 800163c:	4b5e      	ldr	r3, [pc, #376]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4a5d      	ldr	r2, [pc, #372]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6213      	str	r3, [r2, #32]
 8001648:	e00b      	b.n	8001662 <HAL_RCC_OscConfig+0x36e>
 800164a:	4b5b      	ldr	r3, [pc, #364]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	4a5a      	ldr	r2, [pc, #360]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001650:	f023 0301 	bic.w	r3, r3, #1
 8001654:	6213      	str	r3, [r2, #32]
 8001656:	4b58      	ldr	r3, [pc, #352]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	4a57      	ldr	r2, [pc, #348]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	f023 0304 	bic.w	r3, r3, #4
 8001660:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d015      	beq.n	8001696 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166a:	f7ff fac7 	bl	8000bfc <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001670:	e00a      	b.n	8001688 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001672:	f7ff fac3 	bl	8000bfc <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001680:	4293      	cmp	r3, r2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e0b1      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001688:	4b4b      	ldr	r3, [pc, #300]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0ee      	beq.n	8001672 <HAL_RCC_OscConfig+0x37e>
 8001694:	e014      	b.n	80016c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001696:	f7ff fab1 	bl	8000bfc <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169c:	e00a      	b.n	80016b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800169e:	f7ff faad 	bl	8000bfc <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e09b      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b4:	4b40      	ldr	r3, [pc, #256]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1ee      	bne.n	800169e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016c0:	7dfb      	ldrb	r3, [r7, #23]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d105      	bne.n	80016d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c6:	4b3c      	ldr	r3, [pc, #240]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	4a3b      	ldr	r2, [pc, #236]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 8087 	beq.w	80017ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016dc:	4b36      	ldr	r3, [pc, #216]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d061      	beq.n	80017ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d146      	bne.n	800177e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f0:	4b33      	ldr	r3, [pc, #204]	; (80017c0 <HAL_RCC_OscConfig+0x4cc>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f6:	f7ff fa81 	bl	8000bfc <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016fe:	f7ff fa7d 	bl	8000bfc <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e06d      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001710:	4b29      	ldr	r3, [pc, #164]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1f0      	bne.n	80016fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001724:	d108      	bne.n	8001738 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001726:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	4921      	ldr	r1, [pc, #132]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001738:	4b1f      	ldr	r3, [pc, #124]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a19      	ldr	r1, [r3, #32]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	430b      	orrs	r3, r1
 800174a:	491b      	ldr	r1, [pc, #108]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800174c:	4313      	orrs	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <HAL_RCC_OscConfig+0x4cc>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001756:	f7ff fa51 	bl	8000bfc <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175e:	f7ff fa4d 	bl	8000bfc <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e03d      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x46a>
 800177c:	e035      	b.n	80017ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <HAL_RCC_OscConfig+0x4cc>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff fa3a 	bl	8000bfc <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178c:	f7ff fa36 	bl	8000bfc <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e026      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x498>
 80017aa:	e01e      	b.n	80017ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69db      	ldr	r3, [r3, #28]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d107      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e019      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40007000 	.word	0x40007000
 80017c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_RCC_OscConfig+0x500>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d001      	beq.n	80017ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40021000 	.word	0x40021000

080017f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0d0      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800180c:	4b6a      	ldr	r3, [pc, #424]	; (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d910      	bls.n	800183c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181a:	4b67      	ldr	r3, [pc, #412]	; (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 0207 	bic.w	r2, r3, #7
 8001822:	4965      	ldr	r1, [pc, #404]	; (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b63      	ldr	r3, [pc, #396]	; (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0b8      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d020      	beq.n	800188a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001854:	4b59      	ldr	r3, [pc, #356]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4a58      	ldr	r2, [pc, #352]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800185e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800186c:	4b53      	ldr	r3, [pc, #332]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	4a52      	ldr	r2, [pc, #328]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001876:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001878:	4b50      	ldr	r3, [pc, #320]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	494d      	ldr	r1, [pc, #308]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	4313      	orrs	r3, r2
 8001888:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d040      	beq.n	8001918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	4b47      	ldr	r3, [pc, #284]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d115      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e07f      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d107      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b6:	4b41      	ldr	r3, [pc, #260]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d109      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e073      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c6:	4b3d      	ldr	r3, [pc, #244]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e06b      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018d6:	4b39      	ldr	r3, [pc, #228]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f023 0203 	bic.w	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4936      	ldr	r1, [pc, #216]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018e8:	f7ff f988 	bl	8000bfc <HAL_GetTick>
 80018ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ee:	e00a      	b.n	8001906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f0:	f7ff f984 	bl	8000bfc <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e053      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001906:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 020c 	and.w	r2, r3, #12
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	429a      	cmp	r2, r3
 8001916:	d1eb      	bne.n	80018f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001918:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d210      	bcs.n	8001948 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001926:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 0207 	bic.w	r2, r3, #7
 800192e:	4922      	ldr	r1, [pc, #136]	; (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e032      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d008      	beq.n	8001966 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	4916      	ldr	r1, [pc, #88]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	4313      	orrs	r3, r2
 8001964:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d009      	beq.n	8001986 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001972:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	490e      	ldr	r1, [pc, #56]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	4313      	orrs	r3, r2
 8001984:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001986:	f000 f821 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 800198a:	4602      	mov	r2, r0
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	490a      	ldr	r1, [pc, #40]	; (80019c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001998:	5ccb      	ldrb	r3, [r1, r3]
 800199a:	fa22 f303 	lsr.w	r3, r2, r3
 800199e:	4a09      	ldr	r2, [pc, #36]	; (80019c4 <HAL_RCC_ClockConfig+0x1cc>)
 80019a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_RCC_ClockConfig+0x1d0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff f8e6 	bl	8000b78 <HAL_InitTick>

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40022000 	.word	0x40022000
 80019bc:	40021000 	.word	0x40021000
 80019c0:	0800325c 	.word	0x0800325c
 80019c4:	2000000c 	.word	0x2000000c
 80019c8:	20000010 	.word	0x20000010

080019cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019cc:	b490      	push	{r4, r7}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019d2:	4b29      	ldr	r3, [pc, #164]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xac>)
 80019d4:	1d3c      	adds	r4, r7, #4
 80019d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019dc:	f240 2301 	movw	r3, #513	; 0x201
 80019e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
 80019e6:	2300      	movs	r3, #0
 80019e8:	61bb      	str	r3, [r7, #24]
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019f6:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xb0>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d002      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0x40>
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d003      	beq.n	8001a12 <HAL_RCC_GetSysClockFreq+0x46>
 8001a0a:	e02b      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a0c:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a0e:	623b      	str	r3, [r7, #32]
      break;
 8001a10:	e02b      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	0c9b      	lsrs	r3, r3, #18
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	3328      	adds	r3, #40	; 0x28
 8001a1c:	443b      	add	r3, r7
 8001a1e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a22:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d012      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	0c5b      	lsrs	r3, r3, #17
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	3328      	adds	r3, #40	; 0x28
 8001a3a:	443b      	add	r3, r7
 8001a3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a40:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	4a0e      	ldr	r2, [pc, #56]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a46:	fb03 f202 	mul.w	r2, r3, r2
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
 8001a52:	e004      	b.n	8001a5e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a58:	fb02 f303 	mul.w	r3, r2, r3
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	623b      	str	r3, [r7, #32]
      break;
 8001a62:	e002      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a66:	623b      	str	r3, [r7, #32]
      break;
 8001a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3728      	adds	r7, #40	; 0x28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc90      	pop	{r4, r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	0800324c 	.word	0x0800324c
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	007a1200 	.word	0x007a1200
 8001a84:	003d0900 	.word	0x003d0900

08001a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a8c:	4b02      	ldr	r3, [pc, #8]	; (8001a98 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	2000000c 	.word	0x2000000c

08001a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001aa0:	f7ff fff2 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	4903      	ldr	r1, [pc, #12]	; (8001ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ab2:	5ccb      	ldrb	r3, [r1, r3]
 8001ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	0800326c 	.word	0x0800326c

08001ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ac8:	f7ff ffde 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001acc:	4602      	mov	r2, r0
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	0adb      	lsrs	r3, r3, #11
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	4903      	ldr	r1, [pc, #12]	; (8001ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ada:	5ccb      	ldrb	r3, [r1, r3]
 8001adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	0800326c 	.word	0x0800326c

08001aec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001af4:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <RCC_Delay+0x34>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <RCC_Delay+0x38>)
 8001afa:	fba2 2303 	umull	r2, r3, r2, r3
 8001afe:	0a5b      	lsrs	r3, r3, #9
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	fb02 f303 	mul.w	r3, r2, r3
 8001b06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b08:	bf00      	nop
  }
  while (Delay --);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1e5a      	subs	r2, r3, #1
 8001b0e:	60fa      	str	r2, [r7, #12]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f9      	bne.n	8001b08 <RCC_Delay+0x1c>
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	2000000c 	.word	0x2000000c
 8001b24:	10624dd3 	.word	0x10624dd3

08001b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e041      	b.n	8001bbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7fe fec6 	bl	80008e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2202      	movs	r2, #2
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3304      	adds	r3, #4
 8001b64:	4619      	mov	r1, r3
 8001b66:	4610      	mov	r0, r2
 8001b68:	f000 fc28 	bl	80023bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d001      	beq.n	8001be0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e03a      	b.n	8001c56 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2202      	movs	r2, #2
 8001be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a18      	ldr	r2, [pc, #96]	; (8001c60 <HAL_TIM_Base_Start_IT+0x98>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d00e      	beq.n	8001c20 <HAL_TIM_Base_Start_IT+0x58>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c0a:	d009      	beq.n	8001c20 <HAL_TIM_Base_Start_IT+0x58>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <HAL_TIM_Base_Start_IT+0x9c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d004      	beq.n	8001c20 <HAL_TIM_Base_Start_IT+0x58>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a13      	ldr	r2, [pc, #76]	; (8001c68 <HAL_TIM_Base_Start_IT+0xa0>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d111      	bne.n	8001c44 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d010      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f042 0201 	orr.w	r2, r2, #1
 8001c40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c42:	e007      	b.n	8001c54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0201 	orr.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	40012c00 	.word	0x40012c00
 8001c64:	40000400 	.word	0x40000400
 8001c68:	40000800 	.word	0x40000800

08001c6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e041      	b.n	8001d02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d106      	bne.n	8001c98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f839 	bl	8001d0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4610      	mov	r0, r2
 8001cac:	f000 fb86 	bl	80023bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d109      	bne.n	8001d40 <HAL_TIM_PWM_Start+0x24>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	bf14      	ite	ne
 8001d38:	2301      	movne	r3, #1
 8001d3a:	2300      	moveq	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	e022      	b.n	8001d86 <HAL_TIM_PWM_Start+0x6a>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d109      	bne.n	8001d5a <HAL_TIM_PWM_Start+0x3e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	bf14      	ite	ne
 8001d52:	2301      	movne	r3, #1
 8001d54:	2300      	moveq	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	e015      	b.n	8001d86 <HAL_TIM_PWM_Start+0x6a>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d109      	bne.n	8001d74 <HAL_TIM_PWM_Start+0x58>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	bf14      	ite	ne
 8001d6c:	2301      	movne	r3, #1
 8001d6e:	2300      	moveq	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	e008      	b.n	8001d86 <HAL_TIM_PWM_Start+0x6a>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	bf14      	ite	ne
 8001d80:	2301      	movne	r3, #1
 8001d82:	2300      	moveq	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e05e      	b.n	8001e4c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d104      	bne.n	8001d9e <HAL_TIM_PWM_Start+0x82>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2202      	movs	r2, #2
 8001d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d9c:	e013      	b.n	8001dc6 <HAL_TIM_PWM_Start+0xaa>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d104      	bne.n	8001dae <HAL_TIM_PWM_Start+0x92>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2202      	movs	r2, #2
 8001da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dac:	e00b      	b.n	8001dc6 <HAL_TIM_PWM_Start+0xaa>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d104      	bne.n	8001dbe <HAL_TIM_PWM_Start+0xa2>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dbc:	e003      	b.n	8001dc6 <HAL_TIM_PWM_Start+0xaa>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	6839      	ldr	r1, [r7, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 fd74 	bl	80028bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1e      	ldr	r2, [pc, #120]	; (8001e54 <HAL_TIM_PWM_Start+0x138>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d107      	bne.n	8001dee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <HAL_TIM_PWM_Start+0x138>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d00e      	beq.n	8001e16 <HAL_TIM_PWM_Start+0xfa>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e00:	d009      	beq.n	8001e16 <HAL_TIM_PWM_Start+0xfa>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a14      	ldr	r2, [pc, #80]	; (8001e58 <HAL_TIM_PWM_Start+0x13c>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d004      	beq.n	8001e16 <HAL_TIM_PWM_Start+0xfa>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a12      	ldr	r2, [pc, #72]	; (8001e5c <HAL_TIM_PWM_Start+0x140>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d111      	bne.n	8001e3a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2b06      	cmp	r3, #6
 8001e26:	d010      	beq.n	8001e4a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e38:	e007      	b.n	8001e4a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f042 0201 	orr.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40012c00 	.word	0x40012c00
 8001e58:	40000400 	.word	0x40000400
 8001e5c:	40000800 	.word	0x40000800

08001e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d122      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d11b      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0202 	mvn.w	r2, #2
 8001e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fa6f 	bl	8002386 <HAL_TIM_IC_CaptureCallback>
 8001ea8:	e005      	b.n	8001eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 fa62 	bl	8002374 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 fa71 	bl	8002398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d122      	bne.n	8001f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d11b      	bne.n	8001f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0204 	mvn.w	r2, #4
 8001ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 fa45 	bl	8002386 <HAL_TIM_IC_CaptureCallback>
 8001efc:	e005      	b.n	8001f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 fa38 	bl	8002374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 fa47 	bl	8002398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d122      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d11b      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0208 	mvn.w	r2, #8
 8001f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2204      	movs	r2, #4
 8001f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 fa1b 	bl	8002386 <HAL_TIM_IC_CaptureCallback>
 8001f50:	e005      	b.n	8001f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 fa0e 	bl	8002374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 fa1d 	bl	8002398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b10      	cmp	r3, #16
 8001f70:	d122      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	2b10      	cmp	r3, #16
 8001f7e:	d11b      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0210 	mvn.w	r2, #16
 8001f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f9f1 	bl	8002386 <HAL_TIM_IC_CaptureCallback>
 8001fa4:	e005      	b.n	8001fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f9e4 	bl	8002374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f9f3 	bl	8002398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d107      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0201 	mvn.w	r2, #1
 8001fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7fe fc40 	bl	8000864 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fee:	2b80      	cmp	r3, #128	; 0x80
 8001ff0:	d10e      	bne.n	8002010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffc:	2b80      	cmp	r3, #128	; 0x80
 8001ffe:	d107      	bne.n	8002010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 fce1 	bl	80029d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201a:	2b40      	cmp	r3, #64	; 0x40
 800201c:	d10e      	bne.n	800203c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002028:	2b40      	cmp	r3, #64	; 0x40
 800202a:	d107      	bne.n	800203c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f9b7 	bl	80023aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	2b20      	cmp	r3, #32
 8002048:	d10e      	bne.n	8002068 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0320 	and.w	r3, r3, #32
 8002054:	2b20      	cmp	r3, #32
 8002056:	d107      	bne.n	8002068 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0220 	mvn.w	r2, #32
 8002060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fcac 	bl	80029c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002086:	2302      	movs	r3, #2
 8002088:	e0ac      	b.n	80021e4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b0c      	cmp	r3, #12
 8002096:	f200 809f 	bhi.w	80021d8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800209a:	a201      	add	r2, pc, #4	; (adr r2, 80020a0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800209c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a0:	080020d5 	.word	0x080020d5
 80020a4:	080021d9 	.word	0x080021d9
 80020a8:	080021d9 	.word	0x080021d9
 80020ac:	080021d9 	.word	0x080021d9
 80020b0:	08002115 	.word	0x08002115
 80020b4:	080021d9 	.word	0x080021d9
 80020b8:	080021d9 	.word	0x080021d9
 80020bc:	080021d9 	.word	0x080021d9
 80020c0:	08002157 	.word	0x08002157
 80020c4:	080021d9 	.word	0x080021d9
 80020c8:	080021d9 	.word	0x080021d9
 80020cc:	080021d9 	.word	0x080021d9
 80020d0:	08002197 	.word	0x08002197
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 f9d0 	bl	8002480 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699a      	ldr	r2, [r3, #24]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0208 	orr.w	r2, r2, #8
 80020ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	699a      	ldr	r2, [r3, #24]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0204 	bic.w	r2, r2, #4
 80020fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6999      	ldr	r1, [r3, #24]
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	619a      	str	r2, [r3, #24]
      break;
 8002112:	e062      	b.n	80021da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	4618      	mov	r0, r3
 800211c:	f000 fa16 	bl	800254c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	699a      	ldr	r2, [r3, #24]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800212e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699a      	ldr	r2, [r3, #24]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800213e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6999      	ldr	r1, [r3, #24]
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	021a      	lsls	r2, r3, #8
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	619a      	str	r2, [r3, #24]
      break;
 8002154:	e041      	b.n	80021da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68b9      	ldr	r1, [r7, #8]
 800215c:	4618      	mov	r0, r3
 800215e:	f000 fa5f 	bl	8002620 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	69da      	ldr	r2, [r3, #28]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f042 0208 	orr.w	r2, r2, #8
 8002170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	69da      	ldr	r2, [r3, #28]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0204 	bic.w	r2, r2, #4
 8002180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	69d9      	ldr	r1, [r3, #28]
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	61da      	str	r2, [r3, #28]
      break;
 8002194:	e021      	b.n	80021da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	4618      	mov	r0, r3
 800219e:	f000 faa9 	bl	80026f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	69da      	ldr	r2, [r3, #28]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	69da      	ldr	r2, [r3, #28]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	69d9      	ldr	r1, [r3, #28]
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	021a      	lsls	r2, r3, #8
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	61da      	str	r2, [r3, #28]
      break;
 80021d6:	e000      	b.n	80021da <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80021d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_TIM_ConfigClockSource+0x18>
 8002200:	2302      	movs	r3, #2
 8002202:	e0b3      	b.n	800236c <HAL_TIM_ConfigClockSource+0x180>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002222:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800222a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800223c:	d03e      	beq.n	80022bc <HAL_TIM_ConfigClockSource+0xd0>
 800223e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002242:	f200 8087 	bhi.w	8002354 <HAL_TIM_ConfigClockSource+0x168>
 8002246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800224a:	f000 8085 	beq.w	8002358 <HAL_TIM_ConfigClockSource+0x16c>
 800224e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002252:	d87f      	bhi.n	8002354 <HAL_TIM_ConfigClockSource+0x168>
 8002254:	2b70      	cmp	r3, #112	; 0x70
 8002256:	d01a      	beq.n	800228e <HAL_TIM_ConfigClockSource+0xa2>
 8002258:	2b70      	cmp	r3, #112	; 0x70
 800225a:	d87b      	bhi.n	8002354 <HAL_TIM_ConfigClockSource+0x168>
 800225c:	2b60      	cmp	r3, #96	; 0x60
 800225e:	d050      	beq.n	8002302 <HAL_TIM_ConfigClockSource+0x116>
 8002260:	2b60      	cmp	r3, #96	; 0x60
 8002262:	d877      	bhi.n	8002354 <HAL_TIM_ConfigClockSource+0x168>
 8002264:	2b50      	cmp	r3, #80	; 0x50
 8002266:	d03c      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0xf6>
 8002268:	2b50      	cmp	r3, #80	; 0x50
 800226a:	d873      	bhi.n	8002354 <HAL_TIM_ConfigClockSource+0x168>
 800226c:	2b40      	cmp	r3, #64	; 0x40
 800226e:	d058      	beq.n	8002322 <HAL_TIM_ConfigClockSource+0x136>
 8002270:	2b40      	cmp	r3, #64	; 0x40
 8002272:	d86f      	bhi.n	8002354 <HAL_TIM_ConfigClockSource+0x168>
 8002274:	2b30      	cmp	r3, #48	; 0x30
 8002276:	d064      	beq.n	8002342 <HAL_TIM_ConfigClockSource+0x156>
 8002278:	2b30      	cmp	r3, #48	; 0x30
 800227a:	d86b      	bhi.n	8002354 <HAL_TIM_ConfigClockSource+0x168>
 800227c:	2b20      	cmp	r3, #32
 800227e:	d060      	beq.n	8002342 <HAL_TIM_ConfigClockSource+0x156>
 8002280:	2b20      	cmp	r3, #32
 8002282:	d867      	bhi.n	8002354 <HAL_TIM_ConfigClockSource+0x168>
 8002284:	2b00      	cmp	r3, #0
 8002286:	d05c      	beq.n	8002342 <HAL_TIM_ConfigClockSource+0x156>
 8002288:	2b10      	cmp	r3, #16
 800228a:	d05a      	beq.n	8002342 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800228c:	e062      	b.n	8002354 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6899      	ldr	r1, [r3, #8]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f000 faee 	bl	800287e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80022b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	609a      	str	r2, [r3, #8]
      break;
 80022ba:	e04e      	b.n	800235a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	6899      	ldr	r1, [r3, #8]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f000 fad7 	bl	800287e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022de:	609a      	str	r2, [r3, #8]
      break;
 80022e0:	e03b      	b.n	800235a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	6859      	ldr	r1, [r3, #4]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	461a      	mov	r2, r3
 80022f0:	f000 fa4e 	bl	8002790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2150      	movs	r1, #80	; 0x50
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 faa5 	bl	800284a <TIM_ITRx_SetConfig>
      break;
 8002300:	e02b      	b.n	800235a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	6859      	ldr	r1, [r3, #4]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	461a      	mov	r2, r3
 8002310:	f000 fa6c 	bl	80027ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2160      	movs	r1, #96	; 0x60
 800231a:	4618      	mov	r0, r3
 800231c:	f000 fa95 	bl	800284a <TIM_ITRx_SetConfig>
      break;
 8002320:	e01b      	b.n	800235a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	6859      	ldr	r1, [r3, #4]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	461a      	mov	r2, r3
 8002330:	f000 fa2e 	bl	8002790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2140      	movs	r1, #64	; 0x40
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fa85 	bl	800284a <TIM_ITRx_SetConfig>
      break;
 8002340:	e00b      	b.n	800235a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4619      	mov	r1, r3
 800234c:	4610      	mov	r0, r2
 800234e:	f000 fa7c 	bl	800284a <TIM_ITRx_SetConfig>
        break;
 8002352:	e002      	b.n	800235a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002354:	bf00      	nop
 8002356:	e000      	b.n	800235a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002358:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr

08002386 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr

080023aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a29      	ldr	r2, [pc, #164]	; (8002474 <TIM_Base_SetConfig+0xb8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d00b      	beq.n	80023ec <TIM_Base_SetConfig+0x30>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023da:	d007      	beq.n	80023ec <TIM_Base_SetConfig+0x30>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a26      	ldr	r2, [pc, #152]	; (8002478 <TIM_Base_SetConfig+0xbc>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d003      	beq.n	80023ec <TIM_Base_SetConfig+0x30>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a25      	ldr	r2, [pc, #148]	; (800247c <TIM_Base_SetConfig+0xc0>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d108      	bne.n	80023fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a1c      	ldr	r2, [pc, #112]	; (8002474 <TIM_Base_SetConfig+0xb8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00b      	beq.n	800241e <TIM_Base_SetConfig+0x62>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240c:	d007      	beq.n	800241e <TIM_Base_SetConfig+0x62>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a19      	ldr	r2, [pc, #100]	; (8002478 <TIM_Base_SetConfig+0xbc>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d003      	beq.n	800241e <TIM_Base_SetConfig+0x62>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a18      	ldr	r2, [pc, #96]	; (800247c <TIM_Base_SetConfig+0xc0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d108      	bne.n	8002430 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	4313      	orrs	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	4313      	orrs	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a07      	ldr	r2, [pc, #28]	; (8002474 <TIM_Base_SetConfig+0xb8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d103      	bne.n	8002464 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	615a      	str	r2, [r3, #20]
}
 800246a:	bf00      	nop
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr
 8002474:	40012c00 	.word	0x40012c00
 8002478:	40000400 	.word	0x40000400
 800247c:	40000800 	.word	0x40000800

08002480 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002480:	b480      	push	{r7}
 8002482:	b087      	sub	sp, #28
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	f023 0201 	bic.w	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f023 0303 	bic.w	r3, r3, #3
 80024b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f023 0302 	bic.w	r3, r3, #2
 80024c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a1c      	ldr	r2, [pc, #112]	; (8002548 <TIM_OC1_SetConfig+0xc8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d10c      	bne.n	80024f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f023 0308 	bic.w	r3, r3, #8
 80024e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f023 0304 	bic.w	r3, r3, #4
 80024f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a13      	ldr	r2, [pc, #76]	; (8002548 <TIM_OC1_SetConfig+0xc8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d111      	bne.n	8002522 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800250c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	621a      	str	r2, [r3, #32]
}
 800253c:	bf00      	nop
 800253e:	371c      	adds	r7, #28
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40012c00 	.word	0x40012c00

0800254c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	f023 0210 	bic.w	r2, r3, #16
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800257a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002582:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4313      	orrs	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f023 0320 	bic.w	r3, r3, #32
 8002596:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a1d      	ldr	r2, [pc, #116]	; (800261c <TIM_OC2_SetConfig+0xd0>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d10d      	bne.n	80025c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	4313      	orrs	r3, r2
 80025be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a14      	ldr	r2, [pc, #80]	; (800261c <TIM_OC2_SetConfig+0xd0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d113      	bne.n	80025f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	621a      	str	r2, [r3, #32]
}
 8002612:	bf00      	nop
 8002614:	371c      	adds	r7, #28
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr
 800261c:	40012c00 	.word	0x40012c00

08002620 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002620:	b480      	push	{r7}
 8002622:	b087      	sub	sp, #28
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f023 0303 	bic.w	r3, r3, #3
 8002656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	4313      	orrs	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	021b      	lsls	r3, r3, #8
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	4313      	orrs	r3, r2
 8002674:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a1d      	ldr	r2, [pc, #116]	; (80026f0 <TIM_OC3_SetConfig+0xd0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d10d      	bne.n	800269a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002684:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	021b      	lsls	r3, r3, #8
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	4313      	orrs	r3, r2
 8002690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002698:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a14      	ldr	r2, [pc, #80]	; (80026f0 <TIM_OC3_SetConfig+0xd0>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d113      	bne.n	80026ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	621a      	str	r2, [r3, #32]
}
 80026e4:	bf00      	nop
 80026e6:	371c      	adds	r7, #28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40012c00 	.word	0x40012c00

080026f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800272a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4313      	orrs	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800273e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	031b      	lsls	r3, r3, #12
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a0f      	ldr	r2, [pc, #60]	; (800278c <TIM_OC4_SetConfig+0x98>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d109      	bne.n	8002768 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800275a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	019b      	lsls	r3, r3, #6
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	4313      	orrs	r3, r2
 8002766:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	621a      	str	r2, [r3, #32]
}
 8002782:	bf00      	nop
 8002784:	371c      	adds	r7, #28
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	40012c00 	.word	0x40012c00

08002790 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	f023 0201 	bic.w	r2, r3, #1
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f023 030a 	bic.w	r3, r3, #10
 80027cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	621a      	str	r2, [r3, #32]
}
 80027e2:	bf00      	nop
 80027e4:	371c      	adds	r7, #28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	f023 0210 	bic.w	r2, r3, #16
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002816:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	031b      	lsls	r3, r3, #12
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	4313      	orrs	r3, r2
 8002820:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002828:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	621a      	str	r2, [r3, #32]
}
 8002840:	bf00      	nop
 8002842:	371c      	adds	r7, #28
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr

0800284a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800284a:	b480      	push	{r7}
 800284c:	b085      	sub	sp, #20
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002860:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	f043 0307 	orr.w	r3, r3, #7
 800286c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	609a      	str	r2, [r3, #8]
}
 8002874:	bf00      	nop
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800287e:	b480      	push	{r7}
 8002880:	b087      	sub	sp, #28
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
 800288a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002898:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	021a      	lsls	r2, r3, #8
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	609a      	str	r2, [r3, #8]
}
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	2201      	movs	r2, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a1a      	ldr	r2, [r3, #32]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	43db      	mvns	r3, r3
 80028de:	401a      	ands	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a1a      	ldr	r2, [r3, #32]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 031f 	and.w	r3, r3, #31
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	fa01 f303 	lsl.w	r3, r1, r3
 80028f4:	431a      	orrs	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	621a      	str	r2, [r3, #32]
}
 80028fa:	bf00      	nop
 80028fc:	371c      	adds	r7, #28
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002918:	2302      	movs	r3, #2
 800291a:	e046      	b.n	80029aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002942:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4313      	orrs	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a16      	ldr	r2, [pc, #88]	; (80029b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d00e      	beq.n	800297e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002968:	d009      	beq.n	800297e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a12      	ldr	r2, [pc, #72]	; (80029b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d004      	beq.n	800297e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a10      	ldr	r2, [pc, #64]	; (80029bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d10c      	bne.n	8002998 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002984:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	4313      	orrs	r3, r2
 800298e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr
 80029b4:	40012c00 	.word	0x40012c00
 80029b8:	40000400 	.word	0x40000400
 80029bc:	40000800 	.word	0x40000800

080029c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e03f      	b.n	8002a76 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fd ffda 	bl	80009c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2224      	movs	r2, #36	; 0x24
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fb49 	bl	80030c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695a      	ldr	r2, [r3, #20]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08a      	sub	sp, #40	; 0x28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10d      	bne.n	8002ad2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	f003 0320 	and.w	r3, r3, #32
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x52>
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 fa4f 	bl	8002f6e <UART_Receive_IT>
      return;
 8002ad0:	e17b      	b.n	8002dca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 80b1 	beq.w	8002c3c <HAL_UART_IRQHandler+0x1bc>
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d105      	bne.n	8002af0 <HAL_UART_IRQHandler+0x70>
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 80a6 	beq.w	8002c3c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <HAL_UART_IRQHandler+0x90>
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	f043 0201 	orr.w	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_UART_IRQHandler+0xb0>
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	f043 0202 	orr.w	r2, r3, #2
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <HAL_UART_IRQHandler+0xd0>
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	f043 0204 	orr.w	r2, r3, #4
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00f      	beq.n	8002b7a <HAL_UART_IRQHandler+0xfa>
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	f003 0320 	and.w	r3, r3, #32
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d104      	bne.n	8002b6e <HAL_UART_IRQHandler+0xee>
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f043 0208 	orr.w	r2, r3, #8
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 811e 	beq.w	8002dc0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d007      	beq.n	8002b9e <HAL_UART_IRQHandler+0x11e>
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f9e8 	bl	8002f6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf14      	ite	ne
 8002bac:	2301      	movne	r3, #1
 8002bae:	2300      	moveq	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d102      	bne.n	8002bc6 <HAL_UART_IRQHandler+0x146>
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d031      	beq.n	8002c2a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f92a 	bl	8002e20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d023      	beq.n	8002c22 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002be8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d013      	beq.n	8002c1a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf6:	4a76      	ldr	r2, [pc, #472]	; (8002dd0 <HAL_UART_IRQHandler+0x350>)
 8002bf8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe f94e 	bl	8000ea0 <HAL_DMA_Abort_IT>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d016      	beq.n	8002c38 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c14:	4610      	mov	r0, r2
 8002c16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c18:	e00e      	b.n	8002c38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f8ec 	bl	8002df8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c20:	e00a      	b.n	8002c38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f8e8 	bl	8002df8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c28:	e006      	b.n	8002c38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f8e4 	bl	8002df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c36:	e0c3      	b.n	8002dc0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c38:	bf00      	nop
    return;
 8002c3a:	e0c1      	b.n	8002dc0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	f040 80a1 	bne.w	8002d88 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 809b 	beq.w	8002d88 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 8095 	beq.w	8002d88 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d04e      	beq.n	8002d20 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002c8c:	8a3b      	ldrh	r3, [r7, #16]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 8098 	beq.w	8002dc4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c98:	8a3a      	ldrh	r2, [r7, #16]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	f080 8092 	bcs.w	8002dc4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8a3a      	ldrh	r2, [r7, #16]
 8002ca4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d02b      	beq.n	8002d08 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cbe:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0201 	bic.w	r2, r2, #1
 8002cce:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cde:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0210 	bic.w	r2, r2, #16
 8002cfc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fe f891 	bl	8000e2a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	4619      	mov	r1, r3
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f876 	bl	8002e0a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d1e:	e051      	b.n	8002dc4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d047      	beq.n	8002dc8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002d38:	8a7b      	ldrh	r3, [r7, #18]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d044      	beq.n	8002dc8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d4c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695a      	ldr	r2, [r3, #20]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0201 	bic.w	r2, r2, #1
 8002d5c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0210 	bic.w	r2, r2, #16
 8002d7a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d7c:	8a7b      	ldrh	r3, [r7, #18]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f842 	bl	8002e0a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d86:	e01f      	b.n	8002dc8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d008      	beq.n	8002da4 <HAL_UART_IRQHandler+0x324>
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f87f 	bl	8002ea0 <UART_Transmit_IT>
    return;
 8002da2:	e012      	b.n	8002dca <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00d      	beq.n	8002dca <HAL_UART_IRQHandler+0x34a>
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f8c0 	bl	8002f3e <UART_EndTransmit_IT>
    return;
 8002dbe:	e004      	b.n	8002dca <HAL_UART_IRQHandler+0x34a>
    return;
 8002dc0:	bf00      	nop
 8002dc2:	e002      	b.n	8002dca <HAL_UART_IRQHandler+0x34a>
      return;
 8002dc4:	bf00      	nop
 8002dc6:	e000      	b.n	8002dca <HAL_UART_IRQHandler+0x34a>
      return;
 8002dc8:	bf00      	nop
  }
}
 8002dca:	3728      	adds	r7, #40	; 0x28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	08002e79 	.word	0x08002e79

08002dd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr

08002de6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr

08002df8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr

08002e0a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	460b      	mov	r3, r1
 8002e14:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr

08002e20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e36:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d107      	bne.n	8002e60 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0210 	bic.w	r2, r2, #16
 8002e5e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f7ff ffb0 	bl	8002df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e98:	bf00      	nop
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b21      	cmp	r3, #33	; 0x21
 8002eb2:	d13e      	bne.n	8002f32 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ebc:	d114      	bne.n	8002ee8 <UART_Transmit_IT+0x48>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d110      	bne.n	8002ee8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eda:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	1c9a      	adds	r2, r3, #2
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	621a      	str	r2, [r3, #32]
 8002ee6:	e008      	b.n	8002efa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	1c59      	adds	r1, r3, #1
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6211      	str	r1, [r2, #32]
 8002ef2:	781a      	ldrb	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	4619      	mov	r1, r3
 8002f08:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10f      	bne.n	8002f2e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e000      	b.n	8002f34 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f32:	2302      	movs	r3, #2
  }
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff ff38 	bl	8002dd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b086      	sub	sp, #24
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b22      	cmp	r3, #34	; 0x22
 8002f80:	f040 8099 	bne.w	80030b6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f8c:	d117      	bne.n	8002fbe <UART_Receive_IT+0x50>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d113      	bne.n	8002fbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	1c9a      	adds	r2, r3, #2
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	629a      	str	r2, [r3, #40]	; 0x28
 8002fbc:	e026      	b.n	800300c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd0:	d007      	beq.n	8002fe2 <UART_Receive_IT+0x74>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10a      	bne.n	8002ff0 <UART_Receive_IT+0x82>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	e008      	b.n	8003002 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003010:	b29b      	uxth	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b29b      	uxth	r3, r3
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	4619      	mov	r1, r3
 800301a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800301c:	2b00      	cmp	r3, #0
 800301e:	d148      	bne.n	80030b2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0220 	bic.w	r2, r2, #32
 800302e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800303e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0201 	bic.w	r2, r2, #1
 800304e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305c:	2b01      	cmp	r3, #1
 800305e:	d123      	bne.n	80030a8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0210 	bic.w	r2, r2, #16
 8003074:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	2b10      	cmp	r3, #16
 8003082:	d10a      	bne.n	800309a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800309e:	4619      	mov	r1, r3
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff feb2 	bl	8002e0a <HAL_UARTEx_RxEventCallback>
 80030a6:	e002      	b.n	80030ae <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff fe9c 	bl	8002de6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	e002      	b.n	80030b8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e000      	b.n	80030b8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
  }
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030fa:	f023 030c 	bic.w	r3, r3, #12
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6812      	ldr	r2, [r2, #0]
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	430b      	orrs	r3, r1
 8003106:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699a      	ldr	r2, [r3, #24]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a2c      	ldr	r2, [pc, #176]	; (80031d4 <UART_SetConfig+0x114>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d103      	bne.n	8003130 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003128:	f7fe fccc 	bl	8001ac4 <HAL_RCC_GetPCLK2Freq>
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	e002      	b.n	8003136 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003130:	f7fe fcb4 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
 8003134:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	009a      	lsls	r2, r3, #2
 8003140:	441a      	add	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	fbb2 f3f3 	udiv	r3, r2, r3
 800314c:	4a22      	ldr	r2, [pc, #136]	; (80031d8 <UART_SetConfig+0x118>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	0119      	lsls	r1, r3, #4
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	009a      	lsls	r2, r3, #2
 8003160:	441a      	add	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	fbb2 f2f3 	udiv	r2, r2, r3
 800316c:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <UART_SetConfig+0x118>)
 800316e:	fba3 0302 	umull	r0, r3, r3, r2
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	2064      	movs	r0, #100	; 0x64
 8003176:	fb00 f303 	mul.w	r3, r0, r3
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	3332      	adds	r3, #50	; 0x32
 8003180:	4a15      	ldr	r2, [pc, #84]	; (80031d8 <UART_SetConfig+0x118>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800318c:	4419      	add	r1, r3
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	009a      	lsls	r2, r3, #2
 8003198:	441a      	add	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031a4:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <UART_SetConfig+0x118>)
 80031a6:	fba3 0302 	umull	r0, r3, r3, r2
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	2064      	movs	r0, #100	; 0x64
 80031ae:	fb00 f303 	mul.w	r3, r0, r3
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	3332      	adds	r3, #50	; 0x32
 80031b8:	4a07      	ldr	r2, [pc, #28]	; (80031d8 <UART_SetConfig+0x118>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	f003 020f 	and.w	r2, r3, #15
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	440a      	add	r2, r1
 80031ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031cc:	bf00      	nop
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40013800 	.word	0x40013800
 80031d8:	51eb851f 	.word	0x51eb851f

080031dc <__libc_init_array>:
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	2600      	movs	r6, #0
 80031e0:	4d0c      	ldr	r5, [pc, #48]	; (8003214 <__libc_init_array+0x38>)
 80031e2:	4c0d      	ldr	r4, [pc, #52]	; (8003218 <__libc_init_array+0x3c>)
 80031e4:	1b64      	subs	r4, r4, r5
 80031e6:	10a4      	asrs	r4, r4, #2
 80031e8:	42a6      	cmp	r6, r4
 80031ea:	d109      	bne.n	8003200 <__libc_init_array+0x24>
 80031ec:	f000 f822 	bl	8003234 <_init>
 80031f0:	2600      	movs	r6, #0
 80031f2:	4d0a      	ldr	r5, [pc, #40]	; (800321c <__libc_init_array+0x40>)
 80031f4:	4c0a      	ldr	r4, [pc, #40]	; (8003220 <__libc_init_array+0x44>)
 80031f6:	1b64      	subs	r4, r4, r5
 80031f8:	10a4      	asrs	r4, r4, #2
 80031fa:	42a6      	cmp	r6, r4
 80031fc:	d105      	bne.n	800320a <__libc_init_array+0x2e>
 80031fe:	bd70      	pop	{r4, r5, r6, pc}
 8003200:	f855 3b04 	ldr.w	r3, [r5], #4
 8003204:	4798      	blx	r3
 8003206:	3601      	adds	r6, #1
 8003208:	e7ee      	b.n	80031e8 <__libc_init_array+0xc>
 800320a:	f855 3b04 	ldr.w	r3, [r5], #4
 800320e:	4798      	blx	r3
 8003210:	3601      	adds	r6, #1
 8003212:	e7f2      	b.n	80031fa <__libc_init_array+0x1e>
 8003214:	08003274 	.word	0x08003274
 8003218:	08003274 	.word	0x08003274
 800321c:	08003274 	.word	0x08003274
 8003220:	08003278 	.word	0x08003278

08003224 <memset>:
 8003224:	4603      	mov	r3, r0
 8003226:	4402      	add	r2, r0
 8003228:	4293      	cmp	r3, r2
 800322a:	d100      	bne.n	800322e <memset+0xa>
 800322c:	4770      	bx	lr
 800322e:	f803 1b01 	strb.w	r1, [r3], #1
 8003232:	e7f9      	b.n	8003228 <memset+0x4>

08003234 <_init>:
 8003234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003236:	bf00      	nop
 8003238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800323a:	bc08      	pop	{r3}
 800323c:	469e      	mov	lr, r3
 800323e:	4770      	bx	lr

08003240 <_fini>:
 8003240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003242:	bf00      	nop
 8003244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003246:	bc08      	pop	{r3}
 8003248:	469e      	mov	lr, r3
 800324a:	4770      	bx	lr
