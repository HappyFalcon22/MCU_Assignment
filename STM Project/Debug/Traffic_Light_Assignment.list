
Traffic_Light_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080044d8  080044d8  000144d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004544  08004544  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08004544  08004544  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004544  08004544  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004544  08004544  00014544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800454c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000088  080045d4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  080045d4  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c512  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002206  00000000  00000000  0002c5c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  0002e7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  0002f540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017dba  00000000  00000000  000301a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4a7  00000000  00000000  00047f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad07  00000000  00000000  00057401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2108  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039dc  00000000  00000000  000e2158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	080044c0 	.word	0x080044c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	080044c0 	.word	0x080044c0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <button_reading>:
//we define counter for the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

//read 3 button and modify flag buffer when button is pressed
//this function is called in timer interupt
void button_reading(){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS; i ++){
 8000162:	2300      	movs	r3, #0
 8000164:	607b      	str	r3, [r7, #4]
 8000166:	e0a7      	b.n	80002b8 <button_reading+0x15c>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000168:	4a58      	ldr	r2, [pc, #352]	; (80002cc <button_reading+0x170>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	4413      	add	r3, r2
 800016e:	7819      	ldrb	r1, [r3, #0]
 8000170:	4a57      	ldr	r2, [pc, #348]	; (80002d0 <button_reading+0x174>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	4413      	add	r3, r2
 8000176:	460a      	mov	r2, r1
 8000178:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 800017a:	4a56      	ldr	r2, [pc, #344]	; (80002d4 <button_reading+0x178>)
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	4413      	add	r3, r2
 8000180:	7819      	ldrb	r1, [r3, #0]
 8000182:	4a52      	ldr	r2, [pc, #328]	; (80002cc <button_reading+0x170>)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	4413      	add	r3, r2
 8000188:	460a      	mov	r2, r1
 800018a:	701a      	strb	r2, [r3, #0]
		//read raw button to buffer0
		if(i == 0){
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d10b      	bne.n	80001aa <button_reading+0x4e>
			debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000192:	2102      	movs	r1, #2
 8000194:	4850      	ldr	r0, [pc, #320]	; (80002d8 <button_reading+0x17c>)
 8000196:	f001 fc4f 	bl	8001a38 <HAL_GPIO_ReadPin>
 800019a:	4603      	mov	r3, r0
 800019c:	4619      	mov	r1, r3
 800019e:	4a4d      	ldr	r2, [pc, #308]	; (80002d4 <button_reading+0x178>)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	4413      	add	r3, r2
 80001a4:	460a      	mov	r2, r1
 80001a6:	701a      	strb	r2, [r3, #0]
 80001a8:	e02b      	b.n	8000202 <button_reading+0xa6>
		}
		else if(i == 1){
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2b01      	cmp	r3, #1
 80001ae:	d10b      	bne.n	80001c8 <button_reading+0x6c>
			debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80001b0:	2110      	movs	r1, #16
 80001b2:	4849      	ldr	r0, [pc, #292]	; (80002d8 <button_reading+0x17c>)
 80001b4:	f001 fc40 	bl	8001a38 <HAL_GPIO_ReadPin>
 80001b8:	4603      	mov	r3, r0
 80001ba:	4619      	mov	r1, r3
 80001bc:	4a45      	ldr	r2, [pc, #276]	; (80002d4 <button_reading+0x178>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	4413      	add	r3, r2
 80001c2:	460a      	mov	r2, r1
 80001c4:	701a      	strb	r2, [r3, #0]
 80001c6:	e01c      	b.n	8000202 <button_reading+0xa6>
		}
		else if(i == 2){
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	2b02      	cmp	r3, #2
 80001cc:	d10b      	bne.n	80001e6 <button_reading+0x8a>
			debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 80001ce:	2101      	movs	r1, #1
 80001d0:	4842      	ldr	r0, [pc, #264]	; (80002dc <button_reading+0x180>)
 80001d2:	f001 fc31 	bl	8001a38 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	4619      	mov	r1, r3
 80001da:	4a3e      	ldr	r2, [pc, #248]	; (80002d4 <button_reading+0x178>)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4413      	add	r3, r2
 80001e0:	460a      	mov	r2, r1
 80001e2:	701a      	strb	r2, [r3, #0]
 80001e4:	e00d      	b.n	8000202 <button_reading+0xa6>
		}
		else if(i == 3){
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	2b03      	cmp	r3, #3
 80001ea:	d10a      	bne.n	8000202 <button_reading+0xa6>
			debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(PEDE_BUTTON_GPIO_Port, PEDE_BUTTON_Pin);
 80001ec:	2101      	movs	r1, #1
 80001ee:	483a      	ldr	r0, [pc, #232]	; (80002d8 <button_reading+0x17c>)
 80001f0:	f001 fc22 	bl	8001a38 <HAL_GPIO_ReadPin>
 80001f4:	4603      	mov	r3, r0
 80001f6:	4619      	mov	r1, r3
 80001f8:	4a36      	ldr	r2, [pc, #216]	; (80002d4 <button_reading+0x178>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4413      	add	r3, r2
 80001fe:	460a      	mov	r2, r1
 8000200:	701a      	strb	r2, [r3, #0]
		}
		//if input is stable: 3 recently input is equal
		if(debounceButtonBuffer0[i] == debounceButtonBuffer1[i] &&
 8000202:	4a34      	ldr	r2, [pc, #208]	; (80002d4 <button_reading+0x178>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4413      	add	r3, r2
 8000208:	781a      	ldrb	r2, [r3, #0]
 800020a:	4930      	ldr	r1, [pc, #192]	; (80002cc <button_reading+0x170>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	440b      	add	r3, r1
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	429a      	cmp	r2, r3
 8000214:	d14d      	bne.n	80002b2 <button_reading+0x156>
				debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000216:	4a2d      	ldr	r2, [pc, #180]	; (80002cc <button_reading+0x170>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4413      	add	r3, r2
 800021c:	781a      	ldrb	r2, [r3, #0]
 800021e:	492c      	ldr	r1, [pc, #176]	; (80002d0 <button_reading+0x174>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	440b      	add	r3, r1
 8000224:	781b      	ldrb	r3, [r3, #0]
		if(debounceButtonBuffer0[i] == debounceButtonBuffer1[i] &&
 8000226:	429a      	cmp	r2, r3
 8000228:	d143      	bne.n	80002b2 <button_reading+0x156>
			//if input stable at present different from previous
			if(buttonBuffer[i] != debounceButtonBuffer2[i]){
 800022a:	4a2d      	ldr	r2, [pc, #180]	; (80002e0 <button_reading+0x184>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4413      	add	r3, r2
 8000230:	781a      	ldrb	r2, [r3, #0]
 8000232:	4927      	ldr	r1, [pc, #156]	; (80002d0 <button_reading+0x174>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	440b      	add	r3, r1
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	429a      	cmp	r2, r3
 800023c:	d019      	beq.n	8000272 <button_reading+0x116>
				//update input to buffer
				buttonBuffer[i] = debounceButtonBuffer2[i];
 800023e:	4a24      	ldr	r2, [pc, #144]	; (80002d0 <button_reading+0x174>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4413      	add	r3, r2
 8000244:	7819      	ldrb	r1, [r3, #0]
 8000246:	4a26      	ldr	r2, [pc, #152]	; (80002e0 <button_reading+0x184>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4413      	add	r3, r2
 800024c:	460a      	mov	r2, r1
 800024e:	701a      	strb	r2, [r3, #0]
				//if input is pressed
				if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000250:	4a23      	ldr	r2, [pc, #140]	; (80002e0 <button_reading+0x184>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4413      	add	r3, r2
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d12a      	bne.n	80002b2 <button_reading+0x156>
					//turn flag on
					flagForButtonPress[i] = 1;
 800025c:	4a21      	ldr	r2, [pc, #132]	; (80002e4 <button_reading+0x188>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4413      	add	r3, r2
 8000262:	2201      	movs	r2, #1
 8000264:	701a      	strb	r2, [r3, #0]
					//set counter
					counterForButtonPress1s[i] = DURATION_FOR_PRESSED;
 8000266:	4a20      	ldr	r2, [pc, #128]	; (80002e8 <button_reading+0x18c>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2164      	movs	r1, #100	; 0x64
 800026c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000270:	e01f      	b.n	80002b2 <button_reading+0x156>
				}
			}
			//if input is stable and no change (present = previous)
			else{
				//decrease counter
				counterForButtonPress1s[i]--;
 8000272:	4a1d      	ldr	r2, [pc, #116]	; (80002e8 <button_reading+0x18c>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800027a:	3b01      	subs	r3, #1
 800027c:	b299      	uxth	r1, r3
 800027e:	4a1a      	ldr	r2, [pc, #104]	; (80002e8 <button_reading+0x18c>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				//when counter is 0, reset counter
				//and if button is press -> turn flag1s on
				if(counterForButtonPress1s[i] == 0){
 8000286:	4a18      	ldr	r2, [pc, #96]	; (80002e8 <button_reading+0x18c>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d10f      	bne.n	80002b2 <button_reading+0x156>
					if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000292:	4a13      	ldr	r2, [pc, #76]	; (80002e0 <button_reading+0x184>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4413      	add	r3, r2
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d104      	bne.n	80002a8 <button_reading+0x14c>
						flagForButtonPress1s[i] = 1;
 800029e:	4a13      	ldr	r2, [pc, #76]	; (80002ec <button_reading+0x190>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	4413      	add	r3, r2
 80002a4:	2201      	movs	r2, #1
 80002a6:	701a      	strb	r2, [r3, #0]
					}
					counterForButtonPress1s[i] = DURATION_FOR_PRESSED;
 80002a8:	4a0f      	ldr	r2, [pc, #60]	; (80002e8 <button_reading+0x18c>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2164      	movs	r1, #100	; 0x64
 80002ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < N0_OF_BUTTONS; i ++){
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	3301      	adds	r3, #1
 80002b6:	607b      	str	r3, [r7, #4]
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b03      	cmp	r3, #3
 80002bc:	f77f af54 	ble.w	8000168 <button_reading+0xc>
				}
			}
		}
	}
}
 80002c0:	bf00      	nop
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	200000ac 	.word	0x200000ac
 80002d0:	200000b0 	.word	0x200000b0
 80002d4:	200000a8 	.word	0x200000a8
 80002d8:	40010800 	.word	0x40010800
 80002dc:	40010c00 	.word	0x40010c00
 80002e0:	200000a4 	.word	0x200000a4
 80002e4:	200000b8 	.word	0x200000b8
 80002e8:	200000bc 	.word	0x200000bc
 80002ec:	200000b4 	.word	0x200000b4

080002f0 <is_button1_pressed>:

//this function check if Mode_select_button is pressed or not
//and reset its flag
int is_button1_pressed()
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	if(flagForButtonPress[0] == 1){
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <is_button1_pressed+0x20>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d104      	bne.n	8000306 <is_button1_pressed+0x16>
		flagForButtonPress[0] = 0;
 80002fc:	4b04      	ldr	r3, [pc, #16]	; (8000310 <is_button1_pressed+0x20>)
 80002fe:	2200      	movs	r2, #0
 8000300:	701a      	strb	r2, [r3, #0]
		return 1;
 8000302:	2301      	movs	r3, #1
 8000304:	e000      	b.n	8000308 <is_button1_pressed+0x18>
	}
	return 0;
 8000306:	2300      	movs	r3, #0
}
 8000308:	4618      	mov	r0, r3
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr
 8000310:	200000b8 	.word	0x200000b8

08000314 <is_button2_pressed>:

//this fuction check if time_adjust_button is pressed or not
//and reset its flag
int is_button2_pressed()
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
	if(flagForButtonPress[1] == 1){
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <is_button2_pressed+0x20>)
 800031a:	785b      	ldrb	r3, [r3, #1]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d104      	bne.n	800032a <is_button2_pressed+0x16>
		flagForButtonPress[1] = 0;
 8000320:	4b04      	ldr	r3, [pc, #16]	; (8000334 <is_button2_pressed+0x20>)
 8000322:	2200      	movs	r2, #0
 8000324:	705a      	strb	r2, [r3, #1]
		return 1;
 8000326:	2301      	movs	r3, #1
 8000328:	e000      	b.n	800032c <is_button2_pressed+0x18>
	}
	return 0;
 800032a:	2300      	movs	r3, #0
}
 800032c:	4618      	mov	r0, r3
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	200000b8 	.word	0x200000b8

08000338 <is_button3_pressed>:

//this function check if set_button is pressed or not
//and reset its flag
int is_button3_pressed()
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
	if(flagForButtonPress[2] == 1){
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <is_button3_pressed+0x20>)
 800033e:	789b      	ldrb	r3, [r3, #2]
 8000340:	2b01      	cmp	r3, #1
 8000342:	d104      	bne.n	800034e <is_button3_pressed+0x16>
		flagForButtonPress[2] = 0;
 8000344:	4b04      	ldr	r3, [pc, #16]	; (8000358 <is_button3_pressed+0x20>)
 8000346:	2200      	movs	r2, #0
 8000348:	709a      	strb	r2, [r3, #2]
		return 1;
 800034a:	2301      	movs	r3, #1
 800034c:	e000      	b.n	8000350 <is_button3_pressed+0x18>
	}
	return 0;
 800034e:	2300      	movs	r3, #0
}
 8000350:	4618      	mov	r0, r3
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	200000b8 	.word	0x200000b8

0800035c <is_button2_press1s>:
}

//the function check if time_adjust_button is pressed more than 1s or not
//reset the flag and turn on again every 1s if it is keep pressing
int is_button2_press1s()
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
	if(flagForButtonPress1s[1]==1){
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <is_button2_press1s+0x20>)
 8000362:	785b      	ldrb	r3, [r3, #1]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d104      	bne.n	8000372 <is_button2_press1s+0x16>
		flagForButtonPress1s[1] = 0;
 8000368:	4b04      	ldr	r3, [pc, #16]	; (800037c <is_button2_press1s+0x20>)
 800036a:	2200      	movs	r2, #0
 800036c:	705a      	strb	r2, [r3, #1]
		return 1;
 800036e:	2301      	movs	r3, #1
 8000370:	e000      	b.n	8000374 <is_button2_press1s+0x18>
	}
	return 0;
 8000372:	2300      	movs	r3, #0
}
 8000374:	4618      	mov	r0, r3
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr
 800037c:	200000b4 	.word	0x200000b4

08000380 <fsm_automatic_run>:
 * Timer1: control time of road1
 * Timer2: control time of road2
 * Timer3: count down for uart in auto
 */
void fsm_automatic_run()
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0

	switch(state)
 8000384:	4bb4      	ldr	r3, [pc, #720]	; (8000658 <fsm_automatic_run+0x2d8>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b05      	cmp	r3, #5
 800038a:	f200 8160 	bhi.w	800064e <fsm_automatic_run+0x2ce>
 800038e:	a201      	add	r2, pc, #4	; (adr r2, 8000394 <fsm_automatic_run+0x14>)
 8000390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000394:	080003ad 	.word	0x080003ad
 8000398:	08000433 	.word	0x08000433
 800039c:	080004bd 	.word	0x080004bd
 80003a0:	0800064f 	.word	0x0800064f
 80003a4:	08000551 	.word	0x08000551
 80003a8:	080005bd 	.word	0x080005bd
	{
	case INIT:
		if(yellow_time + green_time != red_time){
 80003ac:	4bab      	ldr	r3, [pc, #684]	; (800065c <fsm_automatic_run+0x2dc>)
 80003ae:	681a      	ldr	r2, [r3, #0]
 80003b0:	4bab      	ldr	r3, [pc, #684]	; (8000660 <fsm_automatic_run+0x2e0>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	441a      	add	r2, r3
 80003b6:	4bab      	ldr	r3, [pc, #684]	; (8000664 <fsm_automatic_run+0x2e4>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d019      	beq.n	80003f2 <fsm_automatic_run+0x72>
			//error state
			//trap here until mode_button is pressed
			//and go to RED_ADJUST mode to change value again
			turn_all_led_off();
 80003be:	f000 ff35 	bl	800122c <turn_all_led_off>
			if(is_button1_pressed()){
 80003c2:	f7ff ff95 	bl	80002f0 <is_button1_pressed>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	f000 8142 	beq.w	8000652 <fsm_automatic_run+0x2d2>
				state = RED_ADJUST;
 80003ce:	4ba2      	ldr	r3, [pc, #648]	; (8000658 <fsm_automatic_run+0x2d8>)
 80003d0:	220b      	movs	r2, #11
 80003d2:	701a      	strb	r2, [r3, #0]
				//display temp time
				SEG_counter = temp_red_time/1000;
 80003d4:	4ba4      	ldr	r3, [pc, #656]	; (8000668 <fsm_automatic_run+0x2e8>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4aa4      	ldr	r2, [pc, #656]	; (800066c <fsm_automatic_run+0x2ec>)
 80003da:	fba2 2303 	umull	r2, r3, r2, r3
 80003de:	099b      	lsrs	r3, r3, #6
 80003e0:	4aa3      	ldr	r2, [pc, #652]	; (8000670 <fsm_automatic_run+0x2f0>)
 80003e2:	6013      	str	r3, [r2, #0]
				UART_Parse();
 80003e4:	f000 ff40 	bl	8001268 <UART_Parse>
				//reset all button flag
				is_button2_pressed();
 80003e8:	f7ff ff94 	bl	8000314 <is_button2_pressed>
				is_button3_pressed();
 80003ec:	f7ff ffa4 	bl	8000338 <is_button3_pressed>
			}
			break;
 80003f0:	e12f      	b.n	8000652 <fsm_automatic_run+0x2d2>
		}
		//no error, prepare for changing to S1

		//send time via uart
		SEG_counter = green_time/1000;
 80003f2:	4b9b      	ldr	r3, [pc, #620]	; (8000660 <fsm_automatic_run+0x2e0>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a9d      	ldr	r2, [pc, #628]	; (800066c <fsm_automatic_run+0x2ec>)
 80003f8:	fba2 2303 	umull	r2, r3, r2, r3
 80003fc:	099b      	lsrs	r3, r3, #6
 80003fe:	4a9c      	ldr	r2, [pc, #624]	; (8000670 <fsm_automatic_run+0x2f0>)
 8000400:	6013      	str	r3, [r2, #0]
		UART_Parse();
 8000402:	f000 ff31 	bl	8001268 <UART_Parse>

		setTimer4(1000);// Init the counter
 8000406:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800040a:	f000 fc45 	bl	8000c98 <setTimer4>
		setTimer1(green_time);
 800040e:	4b94      	ldr	r3, [pc, #592]	; (8000660 <fsm_automatic_run+0x2e0>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4618      	mov	r0, r3
 8000414:	f000 fbf8 	bl	8000c08 <setTimer1>
		setTimer2(red_time);
 8000418:	4b92      	ldr	r3, [pc, #584]	; (8000664 <fsm_automatic_run+0x2e4>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4618      	mov	r0, r3
 800041e:	f000 fc0b 	bl	8000c38 <setTimer2>
		setTimer3(1000);
 8000422:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000426:	f000 fc1f 	bl	8000c68 <setTimer3>
		state = S1;
 800042a:	4b8b      	ldr	r3, [pc, #556]	; (8000658 <fsm_automatic_run+0x2d8>)
 800042c:	2201      	movs	r2, #1
 800042e:	701a      	strb	r2, [r3, #0]
		break;
 8000430:	e12d      	b.n	800068e <fsm_automatic_run+0x30e>
	case S1:
		green1_on();
 8000432:	f000 feb3 	bl	800119c <green1_on>
		red2_on();
 8000436:	f000 fea1 	bl	800117c <red2_on>
		//uart count down
		if(timer3_flag == 1){
 800043a:	4b8e      	ldr	r3, [pc, #568]	; (8000674 <fsm_automatic_run+0x2f4>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	2b01      	cmp	r3, #1
 8000440:	d10a      	bne.n	8000458 <fsm_automatic_run+0xd8>
			SEG_counter--;
 8000442:	4b8b      	ldr	r3, [pc, #556]	; (8000670 <fsm_automatic_run+0x2f0>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	3b01      	subs	r3, #1
 8000448:	4a89      	ldr	r2, [pc, #548]	; (8000670 <fsm_automatic_run+0x2f0>)
 800044a:	6013      	str	r3, [r2, #0]
			UART_Parse();
 800044c:	f000 ff0c 	bl	8001268 <UART_Parse>
			setTimer3(1000);
 8000450:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000454:	f000 fc08 	bl	8000c68 <setTimer3>
		}

		//road1 timeout -> turn to state S2
		if(timer1_flag == 1){
 8000458:	4b87      	ldr	r3, [pc, #540]	; (8000678 <fsm_automatic_run+0x2f8>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b01      	cmp	r3, #1
 800045e:	d115      	bne.n	800048c <fsm_automatic_run+0x10c>
			setTimer1(yellow_time);
 8000460:	4b7e      	ldr	r3, [pc, #504]	; (800065c <fsm_automatic_run+0x2dc>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4618      	mov	r0, r3
 8000466:	f000 fbcf 	bl	8000c08 <setTimer1>
			state = S2;
 800046a:	4b7b      	ldr	r3, [pc, #492]	; (8000658 <fsm_automatic_run+0x2d8>)
 800046c:	2202      	movs	r2, #2
 800046e:	701a      	strb	r2, [r3, #0]
			SEG_counter = yellow_time/1000;
 8000470:	4b7a      	ldr	r3, [pc, #488]	; (800065c <fsm_automatic_run+0x2dc>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a7d      	ldr	r2, [pc, #500]	; (800066c <fsm_automatic_run+0x2ec>)
 8000476:	fba2 2303 	umull	r2, r3, r2, r3
 800047a:	099b      	lsrs	r3, r3, #6
 800047c:	4a7c      	ldr	r2, [pc, #496]	; (8000670 <fsm_automatic_run+0x2f0>)
 800047e:	6013      	str	r3, [r2, #0]
			UART_Parse();
 8000480:	f000 fef2 	bl	8001268 <UART_Parse>
			setTimer3(1000);
 8000484:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000488:	f000 fbee 	bl	8000c68 <setTimer3>
		}

		//Mode_button is pressed -> turn to manual: RED_ADJUST
		if(is_button1_pressed()){
 800048c:	f7ff ff30 	bl	80002f0 <is_button1_pressed>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	f000 80f4 	beq.w	8000680 <fsm_automatic_run+0x300>
			state = RED_ADJUST;
 8000498:	4b6f      	ldr	r3, [pc, #444]	; (8000658 <fsm_automatic_run+0x2d8>)
 800049a:	220b      	movs	r2, #11
 800049c:	701a      	strb	r2, [r3, #0]
			//display temp time
			SEG_counter = temp_red_time/1000;
 800049e:	4b72      	ldr	r3, [pc, #456]	; (8000668 <fsm_automatic_run+0x2e8>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a72      	ldr	r2, [pc, #456]	; (800066c <fsm_automatic_run+0x2ec>)
 80004a4:	fba2 2303 	umull	r2, r3, r2, r3
 80004a8:	099b      	lsrs	r3, r3, #6
 80004aa:	4a71      	ldr	r2, [pc, #452]	; (8000670 <fsm_automatic_run+0x2f0>)
 80004ac:	6013      	str	r3, [r2, #0]
			UART_Parse();
 80004ae:	f000 fedb 	bl	8001268 <UART_Parse>
			//reset all button flag
			is_button2_pressed();
 80004b2:	f7ff ff2f 	bl	8000314 <is_button2_pressed>
			is_button3_pressed();
 80004b6:	f7ff ff3f 	bl	8000338 <is_button3_pressed>
		}
		break;
 80004ba:	e0e1      	b.n	8000680 <fsm_automatic_run+0x300>
	case S2:
		yellow1_on();
 80004bc:	f000 fe92 	bl	80011e4 <yellow1_on>
		red2_on();
 80004c0:	f000 fe5c 	bl	800117c <red2_on>

		//uart count down
		if(timer3_flag == 1){
 80004c4:	4b6b      	ldr	r3, [pc, #428]	; (8000674 <fsm_automatic_run+0x2f4>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d10a      	bne.n	80004e2 <fsm_automatic_run+0x162>
			SEG_counter--;
 80004cc:	4b68      	ldr	r3, [pc, #416]	; (8000670 <fsm_automatic_run+0x2f0>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	3b01      	subs	r3, #1
 80004d2:	4a67      	ldr	r2, [pc, #412]	; (8000670 <fsm_automatic_run+0x2f0>)
 80004d4:	6013      	str	r3, [r2, #0]
			UART_Parse();
 80004d6:	f000 fec7 	bl	8001268 <UART_Parse>
			setTimer3(1000);
 80004da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004de:	f000 fbc3 	bl	8000c68 <setTimer3>
		}

		//road1 timeout -> turn to state S3
		if(timer1_flag == 1){
 80004e2:	4b65      	ldr	r3, [pc, #404]	; (8000678 <fsm_automatic_run+0x2f8>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d11a      	bne.n	8000520 <fsm_automatic_run+0x1a0>
			setTimer1(red_time);
 80004ea:	4b5e      	ldr	r3, [pc, #376]	; (8000664 <fsm_automatic_run+0x2e4>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 fb8a 	bl	8000c08 <setTimer1>
			setTimer2(green_time);
 80004f4:	4b5a      	ldr	r3, [pc, #360]	; (8000660 <fsm_automatic_run+0x2e0>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 fb9d 	bl	8000c38 <setTimer2>
			state = S3;
 80004fe:	4b56      	ldr	r3, [pc, #344]	; (8000658 <fsm_automatic_run+0x2d8>)
 8000500:	2204      	movs	r2, #4
 8000502:	701a      	strb	r2, [r3, #0]

			SEG_counter = red_time/1000;
 8000504:	4b57      	ldr	r3, [pc, #348]	; (8000664 <fsm_automatic_run+0x2e4>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a58      	ldr	r2, [pc, #352]	; (800066c <fsm_automatic_run+0x2ec>)
 800050a:	fba2 2303 	umull	r2, r3, r2, r3
 800050e:	099b      	lsrs	r3, r3, #6
 8000510:	4a57      	ldr	r2, [pc, #348]	; (8000670 <fsm_automatic_run+0x2f0>)
 8000512:	6013      	str	r3, [r2, #0]
			UART_Parse();
 8000514:	f000 fea8 	bl	8001268 <UART_Parse>
			setTimer3(1000);
 8000518:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800051c:	f000 fba4 	bl	8000c68 <setTimer3>
		}


		//Mode_button is pressed -> turn to RED_ADJUST
		if(is_button1_pressed()){
 8000520:	f7ff fee6 	bl	80002f0 <is_button1_pressed>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	f000 80ac 	beq.w	8000684 <fsm_automatic_run+0x304>
			state = RED_ADJUST;
 800052c:	4b4a      	ldr	r3, [pc, #296]	; (8000658 <fsm_automatic_run+0x2d8>)
 800052e:	220b      	movs	r2, #11
 8000530:	701a      	strb	r2, [r3, #0]
			//display temp time
			SEG_counter = temp_red_time/1000;
 8000532:	4b4d      	ldr	r3, [pc, #308]	; (8000668 <fsm_automatic_run+0x2e8>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a4d      	ldr	r2, [pc, #308]	; (800066c <fsm_automatic_run+0x2ec>)
 8000538:	fba2 2303 	umull	r2, r3, r2, r3
 800053c:	099b      	lsrs	r3, r3, #6
 800053e:	4a4c      	ldr	r2, [pc, #304]	; (8000670 <fsm_automatic_run+0x2f0>)
 8000540:	6013      	str	r3, [r2, #0]
			UART_Parse();
 8000542:	f000 fe91 	bl	8001268 <UART_Parse>
			//reset all button flag
			is_button2_pressed();
 8000546:	f7ff fee5 	bl	8000314 <is_button2_pressed>
			is_button3_pressed();
 800054a:	f7ff fef5 	bl	8000338 <is_button3_pressed>
		}
		break;
 800054e:	e099      	b.n	8000684 <fsm_automatic_run+0x304>
	case S3:
		red1_on();
 8000550:	f000 fe00 	bl	8001154 <red1_on>
		green2_on();
 8000554:	f000 fe36 	bl	80011c4 <green2_on>

		//uart count down
		if(timer3_flag == 1){
 8000558:	4b46      	ldr	r3, [pc, #280]	; (8000674 <fsm_automatic_run+0x2f4>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d10a      	bne.n	8000576 <fsm_automatic_run+0x1f6>
			SEG_counter--;
 8000560:	4b43      	ldr	r3, [pc, #268]	; (8000670 <fsm_automatic_run+0x2f0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	3b01      	subs	r3, #1
 8000566:	4a42      	ldr	r2, [pc, #264]	; (8000670 <fsm_automatic_run+0x2f0>)
 8000568:	6013      	str	r3, [r2, #0]
			UART_Parse();
 800056a:	f000 fe7d 	bl	8001268 <UART_Parse>
			setTimer3(1000);
 800056e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000572:	f000 fb79 	bl	8000c68 <setTimer3>
		}

		//road2 timeout -> turn to state S4
		if(timer2_flag == 1){
 8000576:	4b41      	ldr	r3, [pc, #260]	; (800067c <fsm_automatic_run+0x2fc>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d107      	bne.n	800058e <fsm_automatic_run+0x20e>
			setTimer2(yellow_time);
 800057e:	4b37      	ldr	r3, [pc, #220]	; (800065c <fsm_automatic_run+0x2dc>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4618      	mov	r0, r3
 8000584:	f000 fb58 	bl	8000c38 <setTimer2>
			state = S4;
 8000588:	4b33      	ldr	r3, [pc, #204]	; (8000658 <fsm_automatic_run+0x2d8>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
		}

		//Mode_button is pressed -> turn to manual RED_ADJUST
		if(is_button1_pressed()){
 800058e:	f7ff feaf 	bl	80002f0 <is_button1_pressed>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d077      	beq.n	8000688 <fsm_automatic_run+0x308>
			state = RED_ADJUST;
 8000598:	4b2f      	ldr	r3, [pc, #188]	; (8000658 <fsm_automatic_run+0x2d8>)
 800059a:	220b      	movs	r2, #11
 800059c:	701a      	strb	r2, [r3, #0]
			//display temp time
			SEG_counter = temp_red_time/1000;
 800059e:	4b32      	ldr	r3, [pc, #200]	; (8000668 <fsm_automatic_run+0x2e8>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a32      	ldr	r2, [pc, #200]	; (800066c <fsm_automatic_run+0x2ec>)
 80005a4:	fba2 2303 	umull	r2, r3, r2, r3
 80005a8:	099b      	lsrs	r3, r3, #6
 80005aa:	4a31      	ldr	r2, [pc, #196]	; (8000670 <fsm_automatic_run+0x2f0>)
 80005ac:	6013      	str	r3, [r2, #0]
			UART_Parse();
 80005ae:	f000 fe5b 	bl	8001268 <UART_Parse>
			//reset all button flag
			is_button2_pressed();
 80005b2:	f7ff feaf 	bl	8000314 <is_button2_pressed>
			is_button3_pressed();
 80005b6:	f7ff febf 	bl	8000338 <is_button3_pressed>
		}
		break;
 80005ba:	e065      	b.n	8000688 <fsm_automatic_run+0x308>
	case S4:
		red1_on();
 80005bc:	f000 fdca 	bl	8001154 <red1_on>
		yellow2_on();
 80005c0:	f000 fe24 	bl	800120c <yellow2_on>

		//uart count down
		if(timer3_flag == 1){
 80005c4:	4b2b      	ldr	r3, [pc, #172]	; (8000674 <fsm_automatic_run+0x2f4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d10a      	bne.n	80005e2 <fsm_automatic_run+0x262>
			SEG_counter--;
 80005cc:	4b28      	ldr	r3, [pc, #160]	; (8000670 <fsm_automatic_run+0x2f0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	3b01      	subs	r3, #1
 80005d2:	4a27      	ldr	r2, [pc, #156]	; (8000670 <fsm_automatic_run+0x2f0>)
 80005d4:	6013      	str	r3, [r2, #0]
			UART_Parse();
 80005d6:	f000 fe47 	bl	8001268 <UART_Parse>
			setTimer3(1000);
 80005da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005de:	f000 fb43 	bl	8000c68 <setTimer3>
		}

		//road2 timeout -> turn to state S1
		if(timer2_flag == 1){
 80005e2:	4b26      	ldr	r3, [pc, #152]	; (800067c <fsm_automatic_run+0x2fc>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d11a      	bne.n	8000620 <fsm_automatic_run+0x2a0>
			setTimer1(green_time);
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <fsm_automatic_run+0x2e0>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 fb0a 	bl	8000c08 <setTimer1>
			setTimer2(red_time);
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <fsm_automatic_run+0x2e4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 fb1d 	bl	8000c38 <setTimer2>
			state = S1;
 80005fe:	4b16      	ldr	r3, [pc, #88]	; (8000658 <fsm_automatic_run+0x2d8>)
 8000600:	2201      	movs	r2, #1
 8000602:	701a      	strb	r2, [r3, #0]
			SEG_counter = green_time/1000;
 8000604:	4b16      	ldr	r3, [pc, #88]	; (8000660 <fsm_automatic_run+0x2e0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a18      	ldr	r2, [pc, #96]	; (800066c <fsm_automatic_run+0x2ec>)
 800060a:	fba2 2303 	umull	r2, r3, r2, r3
 800060e:	099b      	lsrs	r3, r3, #6
 8000610:	4a17      	ldr	r2, [pc, #92]	; (8000670 <fsm_automatic_run+0x2f0>)
 8000612:	6013      	str	r3, [r2, #0]
			UART_Parse();
 8000614:	f000 fe28 	bl	8001268 <UART_Parse>
			setTimer3(1000);
 8000618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061c:	f000 fb24 	bl	8000c68 <setTimer3>
		}

		//Mode_button is pressed -> turn to manual RED_ADJUST
		if(is_button1_pressed()){
 8000620:	f7ff fe66 	bl	80002f0 <is_button1_pressed>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d030      	beq.n	800068c <fsm_automatic_run+0x30c>
			state = RED_ADJUST;
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <fsm_automatic_run+0x2d8>)
 800062c:	220b      	movs	r2, #11
 800062e:	701a      	strb	r2, [r3, #0]
			//display temp time
			SEG_counter = temp_red_time/1000;
 8000630:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <fsm_automatic_run+0x2e8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a0d      	ldr	r2, [pc, #52]	; (800066c <fsm_automatic_run+0x2ec>)
 8000636:	fba2 2303 	umull	r2, r3, r2, r3
 800063a:	099b      	lsrs	r3, r3, #6
 800063c:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <fsm_automatic_run+0x2f0>)
 800063e:	6013      	str	r3, [r2, #0]
			UART_Parse();
 8000640:	f000 fe12 	bl	8001268 <UART_Parse>
			//reset all button flag
			is_button2_pressed();
 8000644:	f7ff fe66 	bl	8000314 <is_button2_pressed>
			is_button3_pressed();
 8000648:	f7ff fe76 	bl	8000338 <is_button3_pressed>
		}
		break;
 800064c:	e01e      	b.n	800068c <fsm_automatic_run+0x30c>
	default:
		break;
 800064e:	bf00      	nop
 8000650:	e01d      	b.n	800068e <fsm_automatic_run+0x30e>
			break;
 8000652:	bf00      	nop
 8000654:	e01b      	b.n	800068e <fsm_automatic_run+0x30e>
 8000656:	bf00      	nop
 8000658:	200000c8 	.word	0x200000c8
 800065c:	20000008 	.word	0x20000008
 8000660:	20000004 	.word	0x20000004
 8000664:	20000000 	.word	0x20000000
 8000668:	2000000c 	.word	0x2000000c
 800066c:	10624dd3 	.word	0x10624dd3
 8000670:	200000c4 	.word	0x200000c4
 8000674:	200001b0 	.word	0x200001b0
 8000678:	200001a0 	.word	0x200001a0
 800067c:	200001a8 	.word	0x200001a8
		break;
 8000680:	bf00      	nop
 8000682:	e004      	b.n	800068e <fsm_automatic_run+0x30e>
		break;
 8000684:	bf00      	nop
 8000686:	e002      	b.n	800068e <fsm_automatic_run+0x30e>
		break;
 8000688:	bf00      	nop
 800068a:	e000      	b.n	800068e <fsm_automatic_run+0x30e>
		break;
 800068c:	bf00      	nop
	}
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop

08000694 <fsm_manual_run>:
 * Button1: change mode AUTO -> RED_ADJUST -> YELLOW_ADJUST -> GREEN_ADJUST
 * Button2: change time corresponding to mode
 * Button3: save time
 */
void fsm_manual_run()
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	switch(state)
 8000698:	4b71      	ldr	r3, [pc, #452]	; (8000860 <fsm_manual_run+0x1cc>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b0d      	cmp	r3, #13
 800069e:	d052      	beq.n	8000746 <fsm_manual_run+0xb2>
 80006a0:	2b0d      	cmp	r3, #13
 80006a2:	f300 80d4 	bgt.w	800084e <fsm_manual_run+0x1ba>
 80006a6:	2b0b      	cmp	r3, #11
 80006a8:	f000 8088 	beq.w	80007bc <fsm_manual_run+0x128>
 80006ac:	2b0c      	cmp	r3, #12
 80006ae:	f040 80ce 	bne.w	800084e <fsm_manual_run+0x1ba>
	{
	case YELLOW_ADJUST:
		yellow_blink();
 80006b2:	f000 fd2b 	bl	800110c <yellow_blink>

		//when time_button pressed -> increase time by 1
		//when keep pressing -> increase 1 every 1 second
		//range of time is [1-30]
		if(is_button2_pressed() || is_button2_press1s()){
 80006b6:	f7ff fe2d 	bl	8000314 <is_button2_pressed>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d104      	bne.n	80006ca <fsm_manual_run+0x36>
 80006c0:	f7ff fe4c 	bl	800035c <is_button2_press1s>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d018      	beq.n	80006fc <fsm_manual_run+0x68>
			temp_yellow_time = temp_yellow_time% 30000 + 1000;
 80006ca:	4b66      	ldr	r3, [pc, #408]	; (8000864 <fsm_manual_run+0x1d0>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	4b66      	ldr	r3, [pc, #408]	; (8000868 <fsm_manual_run+0x1d4>)
 80006d0:	fba3 1302 	umull	r1, r3, r3, r2
 80006d4:	0b5b      	lsrs	r3, r3, #13
 80006d6:	f247 5130 	movw	r1, #30000	; 0x7530
 80006da:	fb01 f303 	mul.w	r3, r1, r3
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80006e4:	4a5f      	ldr	r2, [pc, #380]	; (8000864 <fsm_manual_run+0x1d0>)
 80006e6:	6013      	str	r3, [r2, #0]
			SEG_counter = temp_yellow_time/1000;
 80006e8:	4b5e      	ldr	r3, [pc, #376]	; (8000864 <fsm_manual_run+0x1d0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a5f      	ldr	r2, [pc, #380]	; (800086c <fsm_manual_run+0x1d8>)
 80006ee:	fba2 2303 	umull	r2, r3, r2, r3
 80006f2:	099b      	lsrs	r3, r3, #6
 80006f4:	4a5e      	ldr	r2, [pc, #376]	; (8000870 <fsm_manual_run+0x1dc>)
 80006f6:	6013      	str	r3, [r2, #0]
			UART_Parse();
 80006f8:	f000 fdb6 	bl	8001268 <UART_Parse>
		}

		//set_button is pressed -> save temp value
		if(is_button3_pressed()){
 80006fc:	f7ff fe1c 	bl	8000338 <is_button3_pressed>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d003      	beq.n	800070e <fsm_manual_run+0x7a>
			yellow_time = temp_yellow_time;
 8000706:	4b57      	ldr	r3, [pc, #348]	; (8000864 <fsm_manual_run+0x1d0>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a5a      	ldr	r2, [pc, #360]	; (8000874 <fsm_manual_run+0x1e0>)
 800070c:	6013      	str	r3, [r2, #0]
		}

		//Mode_button is pressed -> turn to GREEN_ADJUST
		if(is_button1_pressed()){
 800070e:	f7ff fdef 	bl	80002f0 <is_button1_pressed>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	f000 809c 	beq.w	8000852 <fsm_manual_run+0x1be>
			state = GREEN_ADJUST;
 800071a:	4b51      	ldr	r3, [pc, #324]	; (8000860 <fsm_manual_run+0x1cc>)
 800071c:	220d      	movs	r2, #13
 800071e:	701a      	strb	r2, [r3, #0]
			green1_on();
 8000720:	f000 fd3c 	bl	800119c <green1_on>
			green2_on();
 8000724:	f000 fd4e 	bl	80011c4 <green2_on>
			//reset all button flag
			is_button2_pressed();
 8000728:	f7ff fdf4 	bl	8000314 <is_button2_pressed>
			is_button3_pressed();
 800072c:	f7ff fe04 	bl	8000338 <is_button3_pressed>

			SEG_counter = temp_green_time/1000;
 8000730:	4b51      	ldr	r3, [pc, #324]	; (8000878 <fsm_manual_run+0x1e4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a4d      	ldr	r2, [pc, #308]	; (800086c <fsm_manual_run+0x1d8>)
 8000736:	fba2 2303 	umull	r2, r3, r2, r3
 800073a:	099b      	lsrs	r3, r3, #6
 800073c:	4a4c      	ldr	r2, [pc, #304]	; (8000870 <fsm_manual_run+0x1dc>)
 800073e:	6013      	str	r3, [r2, #0]
			UART_Parse();
 8000740:	f000 fd92 	bl	8001268 <UART_Parse>
		}
		break;
 8000744:	e085      	b.n	8000852 <fsm_manual_run+0x1be>
	case GREEN_ADJUST:
		green_blink();
 8000746:	f000 fcad 	bl	80010a4 <green_blink>

		//when time_button pressed -> increase time by 1
		//when keep pressing -> increase 1 every 1 second
		//range of time is [1-30]
		if(is_button2_pressed() || is_button2_press1s()){
 800074a:	f7ff fde3 	bl	8000314 <is_button2_pressed>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d104      	bne.n	800075e <fsm_manual_run+0xca>
 8000754:	f7ff fe02 	bl	800035c <is_button2_press1s>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d018      	beq.n	8000790 <fsm_manual_run+0xfc>
			temp_green_time = temp_green_time% 30000 + 1000;
 800075e:	4b46      	ldr	r3, [pc, #280]	; (8000878 <fsm_manual_run+0x1e4>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b41      	ldr	r3, [pc, #260]	; (8000868 <fsm_manual_run+0x1d4>)
 8000764:	fba3 1302 	umull	r1, r3, r3, r2
 8000768:	0b5b      	lsrs	r3, r3, #13
 800076a:	f247 5130 	movw	r1, #30000	; 0x7530
 800076e:	fb01 f303 	mul.w	r3, r1, r3
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000778:	4a3f      	ldr	r2, [pc, #252]	; (8000878 <fsm_manual_run+0x1e4>)
 800077a:	6013      	str	r3, [r2, #0]
			SEG_counter = temp_green_time/1000;
 800077c:	4b3e      	ldr	r3, [pc, #248]	; (8000878 <fsm_manual_run+0x1e4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a3a      	ldr	r2, [pc, #232]	; (800086c <fsm_manual_run+0x1d8>)
 8000782:	fba2 2303 	umull	r2, r3, r2, r3
 8000786:	099b      	lsrs	r3, r3, #6
 8000788:	4a39      	ldr	r2, [pc, #228]	; (8000870 <fsm_manual_run+0x1dc>)
 800078a:	6013      	str	r3, [r2, #0]
			UART_Parse();
 800078c:	f000 fd6c 	bl	8001268 <UART_Parse>
		}

		//set_button is pressed -> save temp value
		if(is_button3_pressed()){
 8000790:	f7ff fdd2 	bl	8000338 <is_button3_pressed>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d003      	beq.n	80007a2 <fsm_manual_run+0x10e>
			green_time = temp_green_time;
 800079a:	4b37      	ldr	r3, [pc, #220]	; (8000878 <fsm_manual_run+0x1e4>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a37      	ldr	r2, [pc, #220]	; (800087c <fsm_manual_run+0x1e8>)
 80007a0:	6013      	str	r3, [r2, #0]
		}

		//Mode_button is pressed -> turn to INIT
		if(is_button1_pressed()){
 80007a2:	f7ff fda5 	bl	80002f0 <is_button1_pressed>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d054      	beq.n	8000856 <fsm_manual_run+0x1c2>
			state = INIT;
 80007ac:	4b2c      	ldr	r3, [pc, #176]	; (8000860 <fsm_manual_run+0x1cc>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
			//reset all button flag
			is_button2_pressed();
 80007b2:	f7ff fdaf 	bl	8000314 <is_button2_pressed>
			is_button3_pressed();
 80007b6:	f7ff fdbf 	bl	8000338 <is_button3_pressed>
		}
		break;
 80007ba:	e04c      	b.n	8000856 <fsm_manual_run+0x1c2>
	case RED_ADJUST:
		red_blink();
 80007bc:	f000 fc8a 	bl	80010d4 <red_blink>

		//when time_button pressed -> increase time by 1
		//when keep pressing -> increase 1 every 1 second
		//range of time is [1-30]
		if(is_button2_pressed() || is_button2_press1s()){
 80007c0:	f7ff fda8 	bl	8000314 <is_button2_pressed>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d104      	bne.n	80007d4 <fsm_manual_run+0x140>
 80007ca:	f7ff fdc7 	bl	800035c <is_button2_press1s>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d018      	beq.n	8000806 <fsm_manual_run+0x172>
			temp_red_time = temp_red_time% 30000 + 1000;
 80007d4:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <fsm_manual_run+0x1ec>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b23      	ldr	r3, [pc, #140]	; (8000868 <fsm_manual_run+0x1d4>)
 80007da:	fba3 1302 	umull	r1, r3, r3, r2
 80007de:	0b5b      	lsrs	r3, r3, #13
 80007e0:	f247 5130 	movw	r1, #30000	; 0x7530
 80007e4:	fb01 f303 	mul.w	r3, r1, r3
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80007ee:	4a24      	ldr	r2, [pc, #144]	; (8000880 <fsm_manual_run+0x1ec>)
 80007f0:	6013      	str	r3, [r2, #0]
			SEG_counter = temp_red_time/1000;
 80007f2:	4b23      	ldr	r3, [pc, #140]	; (8000880 <fsm_manual_run+0x1ec>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a1d      	ldr	r2, [pc, #116]	; (800086c <fsm_manual_run+0x1d8>)
 80007f8:	fba2 2303 	umull	r2, r3, r2, r3
 80007fc:	099b      	lsrs	r3, r3, #6
 80007fe:	4a1c      	ldr	r2, [pc, #112]	; (8000870 <fsm_manual_run+0x1dc>)
 8000800:	6013      	str	r3, [r2, #0]
			UART_Parse();
 8000802:	f000 fd31 	bl	8001268 <UART_Parse>
		}
		//set_button is pressed -> save temp value
		if(is_button3_pressed()){
 8000806:	f7ff fd97 	bl	8000338 <is_button3_pressed>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d003      	beq.n	8000818 <fsm_manual_run+0x184>
			red_time = temp_red_time;
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <fsm_manual_run+0x1ec>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <fsm_manual_run+0x1f0>)
 8000816:	6013      	str	r3, [r2, #0]
		}

		//Mode_button is pressed -> turn to YELLOW_ADJUST
		if(is_button1_pressed()){
 8000818:	f7ff fd6a 	bl	80002f0 <is_button1_pressed>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d01b      	beq.n	800085a <fsm_manual_run+0x1c6>
			state = YELLOW_ADJUST;
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <fsm_manual_run+0x1cc>)
 8000824:	220c      	movs	r2, #12
 8000826:	701a      	strb	r2, [r3, #0]
			yellow1_on();
 8000828:	f000 fcdc 	bl	80011e4 <yellow1_on>
			yellow2_on();
 800082c:	f000 fcee 	bl	800120c <yellow2_on>
			//reset all button flag
			is_button2_pressed();
 8000830:	f7ff fd70 	bl	8000314 <is_button2_pressed>
			is_button3_pressed();
 8000834:	f7ff fd80 	bl	8000338 <is_button3_pressed>

			SEG_counter = temp_yellow_time/1000;
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <fsm_manual_run+0x1d0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a0b      	ldr	r2, [pc, #44]	; (800086c <fsm_manual_run+0x1d8>)
 800083e:	fba2 2303 	umull	r2, r3, r2, r3
 8000842:	099b      	lsrs	r3, r3, #6
 8000844:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <fsm_manual_run+0x1dc>)
 8000846:	6013      	str	r3, [r2, #0]
			UART_Parse();
 8000848:	f000 fd0e 	bl	8001268 <UART_Parse>
		}
		break;
 800084c:	e005      	b.n	800085a <fsm_manual_run+0x1c6>
	default:
		break;
 800084e:	bf00      	nop
 8000850:	e004      	b.n	800085c <fsm_manual_run+0x1c8>
		break;
 8000852:	bf00      	nop
 8000854:	e002      	b.n	800085c <fsm_manual_run+0x1c8>
		break;
 8000856:	bf00      	nop
 8000858:	e000      	b.n	800085c <fsm_manual_run+0x1c8>
		break;
 800085a:	bf00      	nop
	}
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	200000c8 	.word	0x200000c8
 8000864:	20000014 	.word	0x20000014
 8000868:	45e7b273 	.word	0x45e7b273
 800086c:	10624dd3 	.word	0x10624dd3
 8000870:	200000c4 	.word	0x200000c4
 8000874:	20000008 	.word	0x20000008
 8000878:	20000010 	.word	0x20000010
 800087c:	20000004 	.word	0x20000004
 8000880:	2000000c 	.word	0x2000000c
 8000884:	20000000 	.word	0x20000000

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088c:	f000 fd30 	bl	80012f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000890:	f000 f818 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000894:	f000 f944 	bl	8000b20 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000898:	f000 f856 	bl	8000948 <MX_TIM2_Init>
  MX_TIM3_Init();
 800089c:	f000 f8a0 	bl	80009e0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80008a0:	f000 f914 	bl	8000acc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80008a4:	4805      	ldr	r0, [pc, #20]	; (80008bc <main+0x34>)
 80008a6:	f001 fd79 	bl	800239c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80008aa:	2100      	movs	r1, #0
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <main+0x38>)
 80008ae:	f001 fe1f 	bl	80024f0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		fsm_automatic_run();
 80008b2:	f7ff fd65 	bl	8000380 <fsm_automatic_run>
		fsm_manual_run();
 80008b6:	f7ff feed 	bl	8000694 <fsm_manual_run>
		fsm_automatic_run();
 80008ba:	e7fa      	b.n	80008b2 <main+0x2a>
 80008bc:	20000110 	.word	0x20000110
 80008c0:	20000158 	.word	0x20000158

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b090      	sub	sp, #64	; 0x40
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0318 	add.w	r3, r7, #24
 80008ce:	2228      	movs	r2, #40	; 0x28
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f003 f972 	bl	8003bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e6:	2302      	movs	r3, #2
 80008e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ea:	2301      	movs	r3, #1
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ee:	2310      	movs	r3, #16
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f2:	2302      	movs	r3, #2
 80008f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80008f6:	2300      	movs	r3, #0
 80008f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80008fa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80008fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000900:	f107 0318 	add.w	r3, r7, #24
 8000904:	4618      	mov	r0, r3
 8000906:	f001 f8df 	bl	8001ac8 <HAL_RCC_OscConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000910:	f000 f974 	bl	8000bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000914:	230f      	movs	r3, #15
 8000916:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000918:	2302      	movs	r3, #2
 800091a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2102      	movs	r1, #2
 800092e:	4618      	mov	r0, r3
 8000930:	f001 fb4c 	bl	8001fcc <HAL_RCC_ClockConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800093a:	f000 f95f 	bl	8000bfc <Error_Handler>
  }
}
 800093e:	bf00      	nop
 8000940:	3740      	adds	r7, #64	; 0x40
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095c:	463b      	mov	r3, r7
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000964:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_TIM2_Init+0x94>)
 8000966:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800096a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <MX_TIM2_Init+0x94>)
 800096e:	223f      	movs	r2, #63	; 0x3f
 8000970:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000972:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_TIM2_Init+0x94>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000978:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_TIM2_Init+0x94>)
 800097a:	f242 720f 	movw	r2, #9999	; 0x270f
 800097e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000980:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_TIM2_Init+0x94>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <MX_TIM2_Init+0x94>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800098c:	4813      	ldr	r0, [pc, #76]	; (80009dc <MX_TIM2_Init+0x94>)
 800098e:	f001 fcb5 	bl	80022fc <HAL_TIM_Base_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000998:	f000 f930 	bl	8000bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	4619      	mov	r1, r3
 80009a8:	480c      	ldr	r0, [pc, #48]	; (80009dc <MX_TIM2_Init+0x94>)
 80009aa:	f002 f809 	bl	80029c0 <HAL_TIM_ConfigClockSource>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009b4:	f000 f922 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b8:	2300      	movs	r3, #0
 80009ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009c0:	463b      	mov	r3, r7
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_TIM2_Init+0x94>)
 80009c6:	f002 fb87 	bl	80030d8 <HAL_TIMEx_MasterConfigSynchronization>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009d0:	f000 f914 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000110 	.word	0x20000110

080009e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08e      	sub	sp, #56	; 0x38
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f4:	f107 0320 	add.w	r3, r7, #32
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
 8000a0c:	615a      	str	r2, [r3, #20]
 8000a0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a10:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <MX_TIM3_Init+0xe4>)
 8000a12:	4a2d      	ldr	r2, [pc, #180]	; (8000ac8 <MX_TIM3_Init+0xe8>)
 8000a14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000a16:	4b2b      	ldr	r3, [pc, #172]	; (8000ac4 <MX_TIM3_Init+0xe4>)
 8000a18:	223f      	movs	r2, #63	; 0x3f
 8000a1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <MX_TIM3_Init+0xe4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000a22:	4b28      	ldr	r3, [pc, #160]	; (8000ac4 <MX_TIM3_Init+0xe4>)
 8000a24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2a:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <MX_TIM3_Init+0xe4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a30:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <MX_TIM3_Init+0xe4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a36:	4823      	ldr	r0, [pc, #140]	; (8000ac4 <MX_TIM3_Init+0xe4>)
 8000a38:	f001 fc60 	bl	80022fc <HAL_TIM_Base_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000a42:	f000 f8db 	bl	8000bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a50:	4619      	mov	r1, r3
 8000a52:	481c      	ldr	r0, [pc, #112]	; (8000ac4 <MX_TIM3_Init+0xe4>)
 8000a54:	f001 ffb4 	bl	80029c0 <HAL_TIM_ConfigClockSource>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000a5e:	f000 f8cd 	bl	8000bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a62:	4818      	ldr	r0, [pc, #96]	; (8000ac4 <MX_TIM3_Init+0xe4>)
 8000a64:	f001 fcec 	bl	8002440 <HAL_TIM_PWM_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000a6e:	f000 f8c5 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a7a:	f107 0320 	add.w	r3, r7, #32
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4810      	ldr	r0, [pc, #64]	; (8000ac4 <MX_TIM3_Init+0xe4>)
 8000a82:	f002 fb29 	bl	80030d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a8c:	f000 f8b6 	bl	8000bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a90:	2360      	movs	r3, #96	; 0x60
 8000a92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <MX_TIM3_Init+0xe4>)
 8000aa8:	f001 fecc 	bl	8002844 <HAL_TIM_PWM_ConfigChannel>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000ab2:	f000 f8a3 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ab6:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <MX_TIM3_Init+0xe4>)
 8000ab8:	f000 f9ee 	bl	8000e98 <HAL_TIM_MspPostInit>

}
 8000abc:	bf00      	nop
 8000abe:	3738      	adds	r7, #56	; 0x38
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000158 	.word	0x20000158
 8000ac8:	40000400 	.word	0x40000400

08000acc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <MX_USART2_UART_Init+0x50>)
 8000ad4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000adc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000b04:	f002 fb58 	bl	80031b8 <HAL_UART_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b0e:	f000 f875 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200000cc 	.word	0x200000cc
 8000b1c:	40004400 	.word	0x40004400

08000b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	4b2e      	ldr	r3, [pc, #184]	; (8000bf0 <MX_GPIO_Init+0xd0>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a2d      	ldr	r2, [pc, #180]	; (8000bf0 <MX_GPIO_Init+0xd0>)
 8000b3a:	f043 0304 	orr.w	r3, r3, #4
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b2b      	ldr	r3, [pc, #172]	; (8000bf0 <MX_GPIO_Init+0xd0>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4c:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <MX_GPIO_Init+0xd0>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a27      	ldr	r2, [pc, #156]	; (8000bf0 <MX_GPIO_Init+0xd0>)
 8000b52:	f043 0308 	orr.w	r3, r3, #8
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b25      	ldr	r3, [pc, #148]	; (8000bf0 <MX_GPIO_Init+0xd0>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PEDE_LIGHT_A_Pin|LIGHT1_B_Pin|LIGHT2_B_Pin|LIGHT2_A_Pin, GPIO_PIN_SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000b6a:	4822      	ldr	r0, [pc, #136]	; (8000bf4 <MX_GPIO_Init+0xd4>)
 8000b6c:	f000 ff7b 	bl	8001a66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PEDE_LIGHT_B_Pin|LIGHT1_A_Pin, GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000b76:	4820      	ldr	r0, [pc, #128]	; (8000bf8 <MX_GPIO_Init+0xd8>)
 8000b78:	f000 ff75 	bl	8001a66 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEDE_BUTTON_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = PEDE_BUTTON_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000b7c:	2313      	movs	r3, #19
 8000b7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 0308 	add.w	r3, r7, #8
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	481a      	ldr	r0, [pc, #104]	; (8000bf8 <MX_GPIO_Init+0xd8>)
 8000b90:	f000 fdce 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8000b94:	2301      	movs	r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4813      	ldr	r0, [pc, #76]	; (8000bf4 <MX_GPIO_Init+0xd4>)
 8000ba8:	f000 fdc2 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDE_LIGHT_A_Pin LIGHT1_B_Pin LIGHT2_B_Pin LIGHT2_A_Pin */
  GPIO_InitStruct.Pin = PEDE_LIGHT_A_Pin|LIGHT1_B_Pin|LIGHT2_B_Pin|LIGHT2_A_Pin;
 8000bac:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000bb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480b      	ldr	r0, [pc, #44]	; (8000bf4 <MX_GPIO_Init+0xd4>)
 8000bc6:	f000 fdb3 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDE_LIGHT_B_Pin LIGHT1_A_Pin */
  GPIO_InitStruct.Pin = PEDE_LIGHT_B_Pin|LIGHT1_A_Pin;
 8000bca:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000bce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 0308 	add.w	r3, r7, #8
 8000be0:	4619      	mov	r1, r3
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_GPIO_Init+0xd8>)
 8000be4:	f000 fda4 	bl	8001730 <HAL_GPIO_Init>

}
 8000be8:	bf00      	nop
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40010c00 	.word	0x40010c00
 8000bf8:	40010800 	.word	0x40010800

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c04:	e7fe      	b.n	8000c04 <Error_Handler+0x8>
	...

08000c08 <setTimer1>:

// Add params for timer 5
int timer5_flag = 0;
int timer5_counter = 0;

void setTimer1(uint32_t duration){
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8000c10:	230a      	movs	r3, #10
 8000c12:	461a      	mov	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <setTimer1+0x28>)
 8000c1e:	601a      	str	r2, [r3, #0]
	timer1_flag = 0;
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <setTimer1+0x2c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	200001a4 	.word	0x200001a4
 8000c34:	200001a0 	.word	0x200001a0

08000c38 <setTimer2>:

void setTimer2(uint32_t duration){
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 8000c40:	230a      	movs	r3, #10
 8000c42:	461a      	mov	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <setTimer2+0x28>)
 8000c4e:	601a      	str	r2, [r3, #0]
	timer2_flag = 0;
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <setTimer2+0x2c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	200001ac 	.word	0x200001ac
 8000c64:	200001a8 	.word	0x200001a8

08000c68 <setTimer3>:

void setTimer3(uint32_t duration){
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 8000c70:	230a      	movs	r3, #10
 8000c72:	461a      	mov	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <setTimer3+0x28>)
 8000c7e:	601a      	str	r2, [r3, #0]
	timer3_flag = 0;
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <setTimer3+0x2c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	200001b4 	.word	0x200001b4
 8000c94:	200001b0 	.word	0x200001b0

08000c98 <setTimer4>:

void setTimer4(uint32_t duration)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TIMER_CYCLE;
 8000ca0:	230a      	movs	r3, #10
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	fbb3 f3f2 	udiv	r3, r3, r2
 8000caa:	461a      	mov	r2, r3
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <setTimer4+0x28>)
 8000cae:	601a      	str	r2, [r3, #0]
	timer4_flag = 0;
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <setTimer4+0x2c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	200001bc 	.word	0x200001bc
 8000cc4:	200001b8 	.word	0x200001b8

08000cc8 <timerRun>:
	timer5_counter = duration/TIMER_CYCLE;
	timer5_flag = 0;
}


void timerRun(){
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
	if(timer1_counter >0){
 8000ccc:	4b29      	ldr	r3, [pc, #164]	; (8000d74 <timerRun+0xac>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	dd0b      	ble.n	8000cec <timerRun+0x24>
		timer1_counter--;
 8000cd4:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <timerRun+0xac>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	4a26      	ldr	r2, [pc, #152]	; (8000d74 <timerRun+0xac>)
 8000cdc:	6013      	str	r3, [r2, #0]
		if(timer1_counter <=0){
 8000cde:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <timerRun+0xac>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	dc02      	bgt.n	8000cec <timerRun+0x24>
			timer1_flag =1;
 8000ce6:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <timerRun+0xb0>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter >0){
 8000cec:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <timerRun+0xb4>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	dd0b      	ble.n	8000d0c <timerRun+0x44>
			timer2_counter--;
 8000cf4:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <timerRun+0xb4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	4a20      	ldr	r2, [pc, #128]	; (8000d7c <timerRun+0xb4>)
 8000cfc:	6013      	str	r3, [r2, #0]
			if(timer2_counter <=0){
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <timerRun+0xb4>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	dc02      	bgt.n	8000d0c <timerRun+0x44>
				timer2_flag =1;
 8000d06:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <timerRun+0xb8>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer3_counter >0){
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <timerRun+0xbc>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	dd0b      	ble.n	8000d2c <timerRun+0x64>
			timer3_counter--;
 8000d14:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <timerRun+0xbc>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	4a1a      	ldr	r2, [pc, #104]	; (8000d84 <timerRun+0xbc>)
 8000d1c:	6013      	str	r3, [r2, #0]
			if(timer3_counter <=0){
 8000d1e:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <timerRun+0xbc>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	dc02      	bgt.n	8000d2c <timerRun+0x64>
				timer3_flag =1;
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <timerRun+0xc0>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	601a      	str	r2, [r3, #0]
			}
	}
	if(timer4_counter >0){
 8000d2c:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <timerRun+0xc4>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	dd0b      	ble.n	8000d4c <timerRun+0x84>
				timer4_counter--;
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <timerRun+0xc4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <timerRun+0xc4>)
 8000d3c:	6013      	str	r3, [r2, #0]
				if(timer4_counter <=0){
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <timerRun+0xc4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	dc02      	bgt.n	8000d4c <timerRun+0x84>
					timer4_flag =1;
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <timerRun+0xc8>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]
				}
		}
	if(timer5_counter >0){
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <timerRun+0xcc>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	dd0b      	ble.n	8000d6c <timerRun+0xa4>
				timer5_counter--;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <timerRun+0xcc>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	4a0e      	ldr	r2, [pc, #56]	; (8000d94 <timerRun+0xcc>)
 8000d5c:	6013      	str	r3, [r2, #0]
				if(timer5_counter <=0){
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <timerRun+0xcc>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	dc02      	bgt.n	8000d6c <timerRun+0xa4>
					timer5_flag =1;
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <timerRun+0xd0>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]
				}
		}
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	200001a4 	.word	0x200001a4
 8000d78:	200001a0 	.word	0x200001a0
 8000d7c:	200001ac 	.word	0x200001ac
 8000d80:	200001a8 	.word	0x200001a8
 8000d84:	200001b4 	.word	0x200001b4
 8000d88:	200001b0 	.word	0x200001b0
 8000d8c:	200001bc 	.word	0x200001bc
 8000d90:	200001b8 	.word	0x200001b8
 8000d94:	200001c4 	.word	0x200001c4
 8000d98:	200001c0 	.word	0x200001c0

08000d9c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	button_reading();
 8000da4:	f7ff f9da 	bl	800015c <button_reading>
	timerRun();
 8000da8:	f7ff ff8e 	bl	8000cc8 <timerRun>
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <HAL_MspInit+0x5c>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <HAL_MspInit+0x5c>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6193      	str	r3, [r2, #24]
 8000dc6:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_MspInit+0x5c>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <HAL_MspInit+0x5c>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <HAL_MspInit+0x5c>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	61d3      	str	r3, [r2, #28]
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <HAL_MspInit+0x5c>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_MspInit+0x60>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_MspInit+0x60>)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e06:	bf00      	nop
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40010000 	.word	0x40010000

08000e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e28:	d114      	bne.n	8000e54 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <HAL_TIM_Base_MspInit+0x78>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	4a18      	ldr	r2, [pc, #96]	; (8000e90 <HAL_TIM_Base_MspInit+0x78>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	61d3      	str	r3, [r2, #28]
 8000e36:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <HAL_TIM_Base_MspInit+0x78>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	201c      	movs	r0, #28
 8000e48:	f000 fb8b 	bl	8001562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e4c:	201c      	movs	r0, #28
 8000e4e:	f000 fba4 	bl	800159a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e52:	e018      	b.n	8000e86 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <HAL_TIM_Base_MspInit+0x7c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d113      	bne.n	8000e86 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <HAL_TIM_Base_MspInit+0x78>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <HAL_TIM_Base_MspInit+0x78>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	61d3      	str	r3, [r2, #28]
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_TIM_Base_MspInit+0x78>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2100      	movs	r1, #0
 8000e7a:	201d      	movs	r0, #29
 8000e7c:	f000 fb71 	bl	8001562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e80:	201d      	movs	r0, #29
 8000e82:	f000 fb8a 	bl	800159a <HAL_NVIC_EnableIRQ>
}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40000400 	.word	0x40000400

08000e98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ef0 <HAL_TIM_MspPostInit+0x58>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d117      	bne.n	8000ee8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <HAL_TIM_MspPostInit+0x5c>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <HAL_TIM_MspPostInit+0x5c>)
 8000ebe:	f043 0304 	orr.w	r3, r3, #4
 8000ec2:	6193      	str	r3, [r2, #24]
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_TIM_MspPostInit+0x5c>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f003 0304 	and.w	r3, r3, #4
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PEDE_BUZZER_Pin;
 8000ed0:	2340      	movs	r3, #64	; 0x40
 8000ed2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PEDE_BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <HAL_TIM_MspPostInit+0x60>)
 8000ee4:	f000 fc24 	bl	8001730 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ee8:	bf00      	nop
 8000eea:	3720      	adds	r7, #32
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40000400 	.word	0x40000400
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010800 	.word	0x40010800

08000efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a1f      	ldr	r2, [pc, #124]	; (8000f94 <HAL_UART_MspInit+0x98>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d137      	bne.n	8000f8c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <HAL_UART_MspInit+0x9c>)
 8000f1e:	69db      	ldr	r3, [r3, #28]
 8000f20:	4a1d      	ldr	r2, [pc, #116]	; (8000f98 <HAL_UART_MspInit+0x9c>)
 8000f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f26:	61d3      	str	r3, [r2, #28]
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <HAL_UART_MspInit+0x9c>)
 8000f2a:	69db      	ldr	r3, [r3, #28]
 8000f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <HAL_UART_MspInit+0x9c>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a17      	ldr	r2, [pc, #92]	; (8000f98 <HAL_UART_MspInit+0x9c>)
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_UART_MspInit+0x9c>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480f      	ldr	r0, [pc, #60]	; (8000f9c <HAL_UART_MspInit+0xa0>)
 8000f60:	f000 fbe6 	bl	8001730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f64:	2308      	movs	r3, #8
 8000f66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4619      	mov	r1, r3
 8000f76:	4809      	ldr	r0, [pc, #36]	; (8000f9c <HAL_UART_MspInit+0xa0>)
 8000f78:	f000 fbda 	bl	8001730 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2100      	movs	r1, #0
 8000f80:	2026      	movs	r0, #38	; 0x26
 8000f82:	f000 faee 	bl	8001562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f86:	2026      	movs	r0, #38	; 0x26
 8000f88:	f000 fb07 	bl	800159a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3720      	adds	r7, #32
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40004400 	.word	0x40004400
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010800 	.word	0x40010800

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr

08000fca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr

08000fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr

08000fe2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe6:	f000 f9c9 	bl	800137c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <TIM2_IRQHandler+0x10>)
 8000ff6:	f001 fb1d 	bl	8002634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000110 	.word	0x20000110

08001004 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <TIM3_IRQHandler+0x10>)
 800100a:	f001 fb13 	bl	8002634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000158 	.word	0x20000158

08001018 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <USART2_IRQHandler+0x10>)
 800101e:	f002 f9ab 	bl	8003378 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200000cc 	.word	0x200000cc

0800102c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001034:	4a14      	ldr	r2, [pc, #80]	; (8001088 <_sbrk+0x5c>)
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <_sbrk+0x60>)
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <_sbrk+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d102      	bne.n	800104e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <_sbrk+0x64>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <_sbrk+0x68>)
 800104c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	429a      	cmp	r2, r3
 800105a:	d207      	bcs.n	800106c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800105c:	f002 fd84 	bl	8003b68 <__errno>
 8001060:	4603      	mov	r3, r0
 8001062:	220c      	movs	r2, #12
 8001064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	e009      	b.n	8001080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <_sbrk+0x64>)
 800107c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20005000 	.word	0x20005000
 800108c:	00000400 	.word	0x00000400
 8001090:	200001c8 	.word	0x200001c8
 8001094:	200001f0 	.word	0x200001f0

08001098 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <green_blink>:
//	0	0	off
//	0	1	green
//	1	0	red
//	1	1	yellow
void green_blink()
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <green_blink+0x28>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d10b      	bne.n	80010c8 <green_blink+0x24>
		setTimer3(BLINK_TIME);
 80010b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010b4:	f7ff fdd8 	bl	8000c68 <setTimer3>
		HAL_GPIO_TogglePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin);
 80010b8:	2108      	movs	r1, #8
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <green_blink+0x2c>)
 80010bc:	f000 fceb 	bl	8001a96 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin);
 80010c0:	2110      	movs	r1, #16
 80010c2:	4803      	ldr	r0, [pc, #12]	; (80010d0 <green_blink+0x2c>)
 80010c4:	f000 fce7 	bl	8001a96 <HAL_GPIO_TogglePin>
	}
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200001b0 	.word	0x200001b0
 80010d0:	40010c00 	.word	0x40010c00

080010d4 <red_blink>:
void red_blink()
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <red_blink+0x2c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d10c      	bne.n	80010fa <red_blink+0x26>
		setTimer3(BLINK_TIME);
 80010e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010e4:	f7ff fdc0 	bl	8000c68 <setTimer3>
		HAL_GPIO_TogglePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin);
 80010e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <red_blink+0x30>)
 80010ee:	f000 fcd2 	bl	8001a96 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin);
 80010f2:	2120      	movs	r1, #32
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <red_blink+0x34>)
 80010f6:	f000 fcce 	bl	8001a96 <HAL_GPIO_TogglePin>
	}
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200001b0 	.word	0x200001b0
 8001104:	40010800 	.word	0x40010800
 8001108:	40010c00 	.word	0x40010c00

0800110c <yellow_blink>:

void yellow_blink()
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <yellow_blink+0x3c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d114      	bne.n	8001142 <yellow_blink+0x36>
		setTimer3(BLINK_TIME);
 8001118:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800111c:	f7ff fda4 	bl	8000c68 <setTimer3>
		HAL_GPIO_TogglePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin);
 8001120:	2108      	movs	r1, #8
 8001122:	480a      	ldr	r0, [pc, #40]	; (800114c <yellow_blink+0x40>)
 8001124:	f000 fcb7 	bl	8001a96 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin);
 8001128:	2110      	movs	r1, #16
 800112a:	4808      	ldr	r0, [pc, #32]	; (800114c <yellow_blink+0x40>)
 800112c:	f000 fcb3 	bl	8001a96 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin);
 8001130:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001134:	4806      	ldr	r0, [pc, #24]	; (8001150 <yellow_blink+0x44>)
 8001136:	f000 fcae 	bl	8001a96 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin);
 800113a:	2120      	movs	r1, #32
 800113c:	4803      	ldr	r0, [pc, #12]	; (800114c <yellow_blink+0x40>)
 800113e:	f000 fcaa 	bl	8001a96 <HAL_GPIO_TogglePin>
	}
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200001b0 	.word	0x200001b0
 800114c:	40010c00 	.word	0x40010c00
 8001150:	40010800 	.word	0x40010800

08001154 <red1_on>:

//turn the led corresponding to this road on
void red1_on()
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, SET);
 8001158:	2201      	movs	r2, #1
 800115a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <red1_on+0x20>)
 8001160:	f000 fc81 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	2108      	movs	r1, #8
 8001168:	4803      	ldr	r0, [pc, #12]	; (8001178 <red1_on+0x24>)
 800116a:	f000 fc7c 	bl	8001a66 <HAL_GPIO_WritePin>
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40010800 	.word	0x40010800
 8001178:	40010c00 	.word	0x40010c00

0800117c <red2_on>:
void red2_on()
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, SET);
 8001180:	2201      	movs	r2, #1
 8001182:	2120      	movs	r1, #32
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <red2_on+0x1c>)
 8001186:	f000 fc6e 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	2110      	movs	r1, #16
 800118e:	4802      	ldr	r0, [pc, #8]	; (8001198 <red2_on+0x1c>)
 8001190:	f000 fc69 	bl	8001a66 <HAL_GPIO_WritePin>
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40010c00 	.word	0x40010c00

0800119c <green1_on>:
void green1_on()
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <green1_on+0x20>)
 80011a8:	f000 fc5d 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	2108      	movs	r1, #8
 80011b0:	4803      	ldr	r0, [pc, #12]	; (80011c0 <green1_on+0x24>)
 80011b2:	f000 fc58 	bl	8001a66 <HAL_GPIO_WritePin>
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40010800 	.word	0x40010800
 80011c0:	40010c00 	.word	0x40010c00

080011c4 <green2_on>:
void green2_on()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2120      	movs	r1, #32
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <green2_on+0x1c>)
 80011ce:	f000 fc4a 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2110      	movs	r1, #16
 80011d6:	4802      	ldr	r0, [pc, #8]	; (80011e0 <green2_on+0x1c>)
 80011d8:	f000 fc45 	bl	8001a66 <HAL_GPIO_WritePin>
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40010c00 	.word	0x40010c00

080011e4 <yellow1_on>:
void yellow1_on()
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <yellow1_on+0x20>)
 80011f0:	f000 fc39 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, SET);
 80011f4:	2201      	movs	r2, #1
 80011f6:	2108      	movs	r1, #8
 80011f8:	4803      	ldr	r0, [pc, #12]	; (8001208 <yellow1_on+0x24>)
 80011fa:	f000 fc34 	bl	8001a66 <HAL_GPIO_WritePin>
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40010800 	.word	0x40010800
 8001208:	40010c00 	.word	0x40010c00

0800120c <yellow2_on>:
void yellow2_on()
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, SET);
 8001210:	2201      	movs	r2, #1
 8001212:	2120      	movs	r1, #32
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <yellow2_on+0x1c>)
 8001216:	f000 fc26 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, SET);
 800121a:	2201      	movs	r2, #1
 800121c:	2110      	movs	r1, #16
 800121e:	4802      	ldr	r0, [pc, #8]	; (8001228 <yellow2_on+0x1c>)
 8001220:	f000 fc21 	bl	8001a66 <HAL_GPIO_WritePin>
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40010c00 	.word	0x40010c00

0800122c <turn_all_led_off>:
}


//this function is used when error detected
void turn_all_led_off()
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT1_A_GPIO_Port, LIGHT1_A_Pin, RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001236:	480a      	ldr	r0, [pc, #40]	; (8001260 <turn_all_led_off+0x34>)
 8001238:	f000 fc15 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_B_GPIO_Port, LIGHT1_B_Pin, RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	2108      	movs	r1, #8
 8001240:	4808      	ldr	r0, [pc, #32]	; (8001264 <turn_all_led_off+0x38>)
 8001242:	f000 fc10 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_A_GPIO_Port, LIGHT2_A_Pin, RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	2120      	movs	r1, #32
 800124a:	4806      	ldr	r0, [pc, #24]	; (8001264 <turn_all_led_off+0x38>)
 800124c:	f000 fc0b 	bl	8001a66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_B_GPIO_Port, LIGHT2_B_Pin, RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	2110      	movs	r1, #16
 8001254:	4803      	ldr	r0, [pc, #12]	; (8001264 <turn_all_led_off+0x38>)
 8001256:	f000 fc06 	bl	8001a66 <HAL_GPIO_WritePin>
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40010800 	.word	0x40010800
 8001264:	40010c00 	.word	0x40010c00

08001268 <UART_Parse>:

// Add task for UART
char str[15];		//buffer store data to send
void UART_Parse()
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	sprintf(str, "!7SEG:%lu#\r\n", SEG_counter);
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <UART_Parse+0x2c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4909      	ldr	r1, [pc, #36]	; (8001298 <UART_Parse+0x30>)
 8001274:	4809      	ldr	r0, [pc, #36]	; (800129c <UART_Parse+0x34>)
 8001276:	f002 fca9 	bl	8003bcc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 2000);
 800127a:	4808      	ldr	r0, [pc, #32]	; (800129c <UART_Parse+0x34>)
 800127c:	f7fe ff66 	bl	800014c <strlen>
 8001280:	4603      	mov	r3, r0
 8001282:	b29a      	uxth	r2, r3
 8001284:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001288:	4904      	ldr	r1, [pc, #16]	; (800129c <UART_Parse+0x34>)
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <UART_Parse+0x38>)
 800128c:	f001 ffe1 	bl	8003252 <HAL_UART_Transmit>
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200000c4 	.word	0x200000c4
 8001298:	080044d8 	.word	0x080044d8
 800129c:	200001cc 	.word	0x200001cc
 80012a0:	200000cc 	.word	0x200000cc

080012a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a4:	480c      	ldr	r0, [pc, #48]	; (80012d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012a6:	490d      	ldr	r1, [pc, #52]	; (80012dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012a8:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ac:	e002      	b.n	80012b4 <LoopCopyDataInit>

080012ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b2:	3304      	adds	r3, #4

080012b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b8:	d3f9      	bcc.n	80012ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012bc:	4c0a      	ldr	r4, [pc, #40]	; (80012e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c0:	e001      	b.n	80012c6 <LoopFillZerobss>

080012c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c4:	3204      	adds	r2, #4

080012c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c8:	d3fb      	bcc.n	80012c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ca:	f7ff fee5 	bl	8001098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ce:	f002 fc51 	bl	8003b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012d2:	f7ff fad9 	bl	8000888 <main>
  bx lr
 80012d6:	4770      	bx	lr
  ldr r0, =_sdata
 80012d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012dc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80012e0:	0800454c 	.word	0x0800454c
  ldr r2, =_sbss
 80012e4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80012e8:	200001f0 	.word	0x200001f0

080012ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012ec:	e7fe      	b.n	80012ec <ADC1_2_IRQHandler>
	...

080012f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_Init+0x28>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a07      	ldr	r2, [pc, #28]	; (8001318 <HAL_Init+0x28>)
 80012fa:	f043 0310 	orr.w	r3, r3, #16
 80012fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001300:	2003      	movs	r0, #3
 8001302:	f000 f923 	bl	800154c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001306:	200f      	movs	r0, #15
 8001308:	f000 f808 	bl	800131c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800130c:	f7ff fd52 	bl	8000db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40022000 	.word	0x40022000

0800131c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_InitTick+0x54>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_InitTick+0x58>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001332:	fbb3 f3f1 	udiv	r3, r3, r1
 8001336:	fbb2 f3f3 	udiv	r3, r2, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f93b 	bl	80015b6 <HAL_SYSTICK_Config>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e00e      	b.n	8001368 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b0f      	cmp	r3, #15
 800134e:	d80a      	bhi.n	8001366 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001350:	2200      	movs	r2, #0
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	f000 f903 	bl	8001562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800135c:	4a06      	ldr	r2, [pc, #24]	; (8001378 <HAL_InitTick+0x5c>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	e000      	b.n	8001368 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000018 	.word	0x20000018
 8001374:	20000020 	.word	0x20000020
 8001378:	2000001c 	.word	0x2000001c

0800137c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_IncTick+0x1c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <HAL_IncTick+0x20>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4413      	add	r3, r2
 800138c:	4a03      	ldr	r2, [pc, #12]	; (800139c <HAL_IncTick+0x20>)
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	20000020 	.word	0x20000020
 800139c:	200001dc 	.word	0x200001dc

080013a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return uwTick;
 80013a4:	4b02      	ldr	r3, [pc, #8]	; (80013b0 <HAL_GetTick+0x10>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	200001dc 	.word	0x200001dc

080013b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d0:	4013      	ands	r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e6:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	60d3      	str	r3, [r2, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <__NVIC_GetPriorityGrouping+0x18>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	f003 0307 	and.w	r3, r3, #7
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	2b00      	cmp	r3, #0
 8001428:	db0b      	blt.n	8001442 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	f003 021f 	and.w	r2, r3, #31
 8001430:	4906      	ldr	r1, [pc, #24]	; (800144c <__NVIC_EnableIRQ+0x34>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	095b      	lsrs	r3, r3, #5
 8001438:	2001      	movs	r0, #1
 800143a:	fa00 f202 	lsl.w	r2, r0, r2
 800143e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	e000e100 	.word	0xe000e100

08001450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db0a      	blt.n	800147a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	490c      	ldr	r1, [pc, #48]	; (800149c <__NVIC_SetPriority+0x4c>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	440b      	add	r3, r1
 8001474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001478:	e00a      	b.n	8001490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <__NVIC_SetPriority+0x50>)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	3b04      	subs	r3, #4
 8001488:	0112      	lsls	r2, r2, #4
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	440b      	add	r3, r1
 800148e:	761a      	strb	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f1c3 0307 	rsb	r3, r3, #7
 80014be:	2b04      	cmp	r3, #4
 80014c0:	bf28      	it	cs
 80014c2:	2304      	movcs	r3, #4
 80014c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3304      	adds	r3, #4
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d902      	bls.n	80014d4 <NVIC_EncodePriority+0x30>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3b03      	subs	r3, #3
 80014d2:	e000      	b.n	80014d6 <NVIC_EncodePriority+0x32>
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	4313      	orrs	r3, r2
         );
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr

08001508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001518:	d301      	bcc.n	800151e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151a:	2301      	movs	r3, #1
 800151c:	e00f      	b.n	800153e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <SysTick_Config+0x40>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001526:	210f      	movs	r1, #15
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f7ff ff90 	bl	8001450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <SysTick_Config+0x40>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <SysTick_Config+0x40>)
 8001538:	2207      	movs	r2, #7
 800153a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	e000e010 	.word	0xe000e010

0800154c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ff2d 	bl	80013b4 <__NVIC_SetPriorityGrouping>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001574:	f7ff ff42 	bl	80013fc <__NVIC_GetPriorityGrouping>
 8001578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	6978      	ldr	r0, [r7, #20]
 8001580:	f7ff ff90 	bl	80014a4 <NVIC_EncodePriority>
 8001584:	4602      	mov	r2, r0
 8001586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff5f 	bl	8001450 <__NVIC_SetPriority>
}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff35 	bl	8001418 <__NVIC_EnableIRQ>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ffa2 	bl	8001508 <SysTick_Config>
 80015c4:	4603      	mov	r3, r0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b085      	sub	sp, #20
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d008      	beq.n	80015f6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2204      	movs	r2, #4
 80015e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e020      	b.n	8001638 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 020e 	bic.w	r2, r2, #14
 8001604:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0201 	bic.w	r2, r2, #1
 8001614:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800161e:	2101      	movs	r1, #1
 8001620:	fa01 f202 	lsl.w	r2, r1, r2
 8001624:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001636:	7bfb      	ldrb	r3, [r7, #15]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
	...

08001644 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001656:	2b02      	cmp	r3, #2
 8001658:	d005      	beq.n	8001666 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2204      	movs	r2, #4
 800165e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
 8001664:	e051      	b.n	800170a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 020e 	bic.w	r2, r2, #14
 8001674:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0201 	bic.w	r2, r2, #1
 8001684:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a22      	ldr	r2, [pc, #136]	; (8001714 <HAL_DMA_Abort_IT+0xd0>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d029      	beq.n	80016e4 <HAL_DMA_Abort_IT+0xa0>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a20      	ldr	r2, [pc, #128]	; (8001718 <HAL_DMA_Abort_IT+0xd4>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d022      	beq.n	80016e0 <HAL_DMA_Abort_IT+0x9c>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a1f      	ldr	r2, [pc, #124]	; (800171c <HAL_DMA_Abort_IT+0xd8>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d01a      	beq.n	80016da <HAL_DMA_Abort_IT+0x96>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a1d      	ldr	r2, [pc, #116]	; (8001720 <HAL_DMA_Abort_IT+0xdc>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d012      	beq.n	80016d4 <HAL_DMA_Abort_IT+0x90>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a1c      	ldr	r2, [pc, #112]	; (8001724 <HAL_DMA_Abort_IT+0xe0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d00a      	beq.n	80016ce <HAL_DMA_Abort_IT+0x8a>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a1a      	ldr	r2, [pc, #104]	; (8001728 <HAL_DMA_Abort_IT+0xe4>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d102      	bne.n	80016c8 <HAL_DMA_Abort_IT+0x84>
 80016c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016c6:	e00e      	b.n	80016e6 <HAL_DMA_Abort_IT+0xa2>
 80016c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016cc:	e00b      	b.n	80016e6 <HAL_DMA_Abort_IT+0xa2>
 80016ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016d2:	e008      	b.n	80016e6 <HAL_DMA_Abort_IT+0xa2>
 80016d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d8:	e005      	b.n	80016e6 <HAL_DMA_Abort_IT+0xa2>
 80016da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016de:	e002      	b.n	80016e6 <HAL_DMA_Abort_IT+0xa2>
 80016e0:	2310      	movs	r3, #16
 80016e2:	e000      	b.n	80016e6 <HAL_DMA_Abort_IT+0xa2>
 80016e4:	2301      	movs	r3, #1
 80016e6:	4a11      	ldr	r2, [pc, #68]	; (800172c <HAL_DMA_Abort_IT+0xe8>)
 80016e8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	4798      	blx	r3
    } 
  }
  return status;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40020008 	.word	0x40020008
 8001718:	4002001c 	.word	0x4002001c
 800171c:	40020030 	.word	0x40020030
 8001720:	40020044 	.word	0x40020044
 8001724:	40020058 	.word	0x40020058
 8001728:	4002006c 	.word	0x4002006c
 800172c:	40020000 	.word	0x40020000

08001730 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001730:	b480      	push	{r7}
 8001732:	b08b      	sub	sp, #44	; 0x2c
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800173a:	2300      	movs	r3, #0
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001742:	e169      	b.n	8001a18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001744:	2201      	movs	r2, #1
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	429a      	cmp	r2, r3
 800175e:	f040 8158 	bne.w	8001a12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4a9a      	ldr	r2, [pc, #616]	; (80019d0 <HAL_GPIO_Init+0x2a0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d05e      	beq.n	800182a <HAL_GPIO_Init+0xfa>
 800176c:	4a98      	ldr	r2, [pc, #608]	; (80019d0 <HAL_GPIO_Init+0x2a0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d875      	bhi.n	800185e <HAL_GPIO_Init+0x12e>
 8001772:	4a98      	ldr	r2, [pc, #608]	; (80019d4 <HAL_GPIO_Init+0x2a4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d058      	beq.n	800182a <HAL_GPIO_Init+0xfa>
 8001778:	4a96      	ldr	r2, [pc, #600]	; (80019d4 <HAL_GPIO_Init+0x2a4>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d86f      	bhi.n	800185e <HAL_GPIO_Init+0x12e>
 800177e:	4a96      	ldr	r2, [pc, #600]	; (80019d8 <HAL_GPIO_Init+0x2a8>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d052      	beq.n	800182a <HAL_GPIO_Init+0xfa>
 8001784:	4a94      	ldr	r2, [pc, #592]	; (80019d8 <HAL_GPIO_Init+0x2a8>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d869      	bhi.n	800185e <HAL_GPIO_Init+0x12e>
 800178a:	4a94      	ldr	r2, [pc, #592]	; (80019dc <HAL_GPIO_Init+0x2ac>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d04c      	beq.n	800182a <HAL_GPIO_Init+0xfa>
 8001790:	4a92      	ldr	r2, [pc, #584]	; (80019dc <HAL_GPIO_Init+0x2ac>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d863      	bhi.n	800185e <HAL_GPIO_Init+0x12e>
 8001796:	4a92      	ldr	r2, [pc, #584]	; (80019e0 <HAL_GPIO_Init+0x2b0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d046      	beq.n	800182a <HAL_GPIO_Init+0xfa>
 800179c:	4a90      	ldr	r2, [pc, #576]	; (80019e0 <HAL_GPIO_Init+0x2b0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d85d      	bhi.n	800185e <HAL_GPIO_Init+0x12e>
 80017a2:	2b12      	cmp	r3, #18
 80017a4:	d82a      	bhi.n	80017fc <HAL_GPIO_Init+0xcc>
 80017a6:	2b12      	cmp	r3, #18
 80017a8:	d859      	bhi.n	800185e <HAL_GPIO_Init+0x12e>
 80017aa:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <HAL_GPIO_Init+0x80>)
 80017ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b0:	0800182b 	.word	0x0800182b
 80017b4:	08001805 	.word	0x08001805
 80017b8:	08001817 	.word	0x08001817
 80017bc:	08001859 	.word	0x08001859
 80017c0:	0800185f 	.word	0x0800185f
 80017c4:	0800185f 	.word	0x0800185f
 80017c8:	0800185f 	.word	0x0800185f
 80017cc:	0800185f 	.word	0x0800185f
 80017d0:	0800185f 	.word	0x0800185f
 80017d4:	0800185f 	.word	0x0800185f
 80017d8:	0800185f 	.word	0x0800185f
 80017dc:	0800185f 	.word	0x0800185f
 80017e0:	0800185f 	.word	0x0800185f
 80017e4:	0800185f 	.word	0x0800185f
 80017e8:	0800185f 	.word	0x0800185f
 80017ec:	0800185f 	.word	0x0800185f
 80017f0:	0800185f 	.word	0x0800185f
 80017f4:	0800180d 	.word	0x0800180d
 80017f8:	08001821 	.word	0x08001821
 80017fc:	4a79      	ldr	r2, [pc, #484]	; (80019e4 <HAL_GPIO_Init+0x2b4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d013      	beq.n	800182a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001802:	e02c      	b.n	800185e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	623b      	str	r3, [r7, #32]
          break;
 800180a:	e029      	b.n	8001860 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	3304      	adds	r3, #4
 8001812:	623b      	str	r3, [r7, #32]
          break;
 8001814:	e024      	b.n	8001860 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	3308      	adds	r3, #8
 800181c:	623b      	str	r3, [r7, #32]
          break;
 800181e:	e01f      	b.n	8001860 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	330c      	adds	r3, #12
 8001826:	623b      	str	r3, [r7, #32]
          break;
 8001828:	e01a      	b.n	8001860 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d102      	bne.n	8001838 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001832:	2304      	movs	r3, #4
 8001834:	623b      	str	r3, [r7, #32]
          break;
 8001836:	e013      	b.n	8001860 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d105      	bne.n	800184c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001840:	2308      	movs	r3, #8
 8001842:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69fa      	ldr	r2, [r7, #28]
 8001848:	611a      	str	r2, [r3, #16]
          break;
 800184a:	e009      	b.n	8001860 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800184c:	2308      	movs	r3, #8
 800184e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	615a      	str	r2, [r3, #20]
          break;
 8001856:	e003      	b.n	8001860 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001858:	2300      	movs	r3, #0
 800185a:	623b      	str	r3, [r7, #32]
          break;
 800185c:	e000      	b.n	8001860 <HAL_GPIO_Init+0x130>
          break;
 800185e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	2bff      	cmp	r3, #255	; 0xff
 8001864:	d801      	bhi.n	800186a <HAL_GPIO_Init+0x13a>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	e001      	b.n	800186e <HAL_GPIO_Init+0x13e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3304      	adds	r3, #4
 800186e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2bff      	cmp	r3, #255	; 0xff
 8001874:	d802      	bhi.n	800187c <HAL_GPIO_Init+0x14c>
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	e002      	b.n	8001882 <HAL_GPIO_Init+0x152>
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	3b08      	subs	r3, #8
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	210f      	movs	r1, #15
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	fa01 f303 	lsl.w	r3, r1, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	401a      	ands	r2, r3
 8001894:	6a39      	ldr	r1, [r7, #32]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	fa01 f303 	lsl.w	r3, r1, r3
 800189c:	431a      	orrs	r2, r3
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 80b1 	beq.w	8001a12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018b0:	4b4d      	ldr	r3, [pc, #308]	; (80019e8 <HAL_GPIO_Init+0x2b8>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	4a4c      	ldr	r2, [pc, #304]	; (80019e8 <HAL_GPIO_Init+0x2b8>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6193      	str	r3, [r2, #24]
 80018bc:	4b4a      	ldr	r3, [pc, #296]	; (80019e8 <HAL_GPIO_Init+0x2b8>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018c8:	4a48      	ldr	r2, [pc, #288]	; (80019ec <HAL_GPIO_Init+0x2bc>)
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	3302      	adds	r3, #2
 80018d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	220f      	movs	r2, #15
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	4013      	ands	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a40      	ldr	r2, [pc, #256]	; (80019f0 <HAL_GPIO_Init+0x2c0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d013      	beq.n	800191c <HAL_GPIO_Init+0x1ec>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a3f      	ldr	r2, [pc, #252]	; (80019f4 <HAL_GPIO_Init+0x2c4>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d00d      	beq.n	8001918 <HAL_GPIO_Init+0x1e8>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a3e      	ldr	r2, [pc, #248]	; (80019f8 <HAL_GPIO_Init+0x2c8>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d007      	beq.n	8001914 <HAL_GPIO_Init+0x1e4>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a3d      	ldr	r2, [pc, #244]	; (80019fc <HAL_GPIO_Init+0x2cc>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d101      	bne.n	8001910 <HAL_GPIO_Init+0x1e0>
 800190c:	2303      	movs	r3, #3
 800190e:	e006      	b.n	800191e <HAL_GPIO_Init+0x1ee>
 8001910:	2304      	movs	r3, #4
 8001912:	e004      	b.n	800191e <HAL_GPIO_Init+0x1ee>
 8001914:	2302      	movs	r3, #2
 8001916:	e002      	b.n	800191e <HAL_GPIO_Init+0x1ee>
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <HAL_GPIO_Init+0x1ee>
 800191c:	2300      	movs	r3, #0
 800191e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001920:	f002 0203 	and.w	r2, r2, #3
 8001924:	0092      	lsls	r2, r2, #2
 8001926:	4093      	lsls	r3, r2
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800192e:	492f      	ldr	r1, [pc, #188]	; (80019ec <HAL_GPIO_Init+0x2bc>)
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	089b      	lsrs	r3, r3, #2
 8001934:	3302      	adds	r3, #2
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d006      	beq.n	8001956 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001948:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	492c      	ldr	r1, [pc, #176]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	600b      	str	r3, [r1, #0]
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001956:	4b2a      	ldr	r3, [pc, #168]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	43db      	mvns	r3, r3
 800195e:	4928      	ldr	r1, [pc, #160]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 8001960:	4013      	ands	r3, r2
 8001962:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d006      	beq.n	800197e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001970:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	4922      	ldr	r1, [pc, #136]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	604b      	str	r3, [r1, #4]
 800197c:	e006      	b.n	800198c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800197e:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	43db      	mvns	r3, r3
 8001986:	491e      	ldr	r1, [pc, #120]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 8001988:	4013      	ands	r3, r2
 800198a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d006      	beq.n	80019a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001998:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	4918      	ldr	r1, [pc, #96]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	608b      	str	r3, [r1, #8]
 80019a4:	e006      	b.n	80019b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019a6:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	4914      	ldr	r1, [pc, #80]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d021      	beq.n	8001a04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 80019c2:	68da      	ldr	r2, [r3, #12]
 80019c4:	490e      	ldr	r1, [pc, #56]	; (8001a00 <HAL_GPIO_Init+0x2d0>)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	60cb      	str	r3, [r1, #12]
 80019cc:	e021      	b.n	8001a12 <HAL_GPIO_Init+0x2e2>
 80019ce:	bf00      	nop
 80019d0:	10320000 	.word	0x10320000
 80019d4:	10310000 	.word	0x10310000
 80019d8:	10220000 	.word	0x10220000
 80019dc:	10210000 	.word	0x10210000
 80019e0:	10120000 	.word	0x10120000
 80019e4:	10110000 	.word	0x10110000
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40010000 	.word	0x40010000
 80019f0:	40010800 	.word	0x40010800
 80019f4:	40010c00 	.word	0x40010c00
 80019f8:	40011000 	.word	0x40011000
 80019fc:	40011400 	.word	0x40011400
 8001a00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_GPIO_Init+0x304>)
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	4909      	ldr	r1, [pc, #36]	; (8001a34 <HAL_GPIO_Init+0x304>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	3301      	adds	r3, #1
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f47f ae8e 	bne.w	8001744 <HAL_GPIO_Init+0x14>
  }
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	372c      	adds	r7, #44	; 0x2c
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	40010400 	.word	0x40010400

08001a38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	887b      	ldrh	r3, [r7, #2]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d002      	beq.n	8001a56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a50:	2301      	movs	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]
 8001a54:	e001      	b.n	8001a5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a56:	2300      	movs	r3, #0
 8001a58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr

08001a66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	807b      	strh	r3, [r7, #2]
 8001a72:	4613      	mov	r3, r2
 8001a74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a76:	787b      	ldrb	r3, [r7, #1]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a7c:	887a      	ldrh	r2, [r7, #2]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a82:	e003      	b.n	8001a8c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a84:	887b      	ldrh	r3, [r7, #2]
 8001a86:	041a      	lsls	r2, r3, #16
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	611a      	str	r2, [r3, #16]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b085      	sub	sp, #20
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aa8:	887a      	ldrh	r2, [r7, #2]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4013      	ands	r3, r2
 8001aae:	041a      	lsls	r2, r3, #16
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	43d9      	mvns	r1, r3
 8001ab4:	887b      	ldrh	r3, [r7, #2]
 8001ab6:	400b      	ands	r3, r1
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	611a      	str	r2, [r3, #16]
}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e272      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 8087 	beq.w	8001bf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ae8:	4b92      	ldr	r3, [pc, #584]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d00c      	beq.n	8001b0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001af4:	4b8f      	ldr	r3, [pc, #572]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d112      	bne.n	8001b26 <HAL_RCC_OscConfig+0x5e>
 8001b00:	4b8c      	ldr	r3, [pc, #560]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0c:	d10b      	bne.n	8001b26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0e:	4b89      	ldr	r3, [pc, #548]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d06c      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x12c>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d168      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e24c      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2e:	d106      	bne.n	8001b3e <HAL_RCC_OscConfig+0x76>
 8001b30:	4b80      	ldr	r3, [pc, #512]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a7f      	ldr	r2, [pc, #508]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	e02e      	b.n	8001b9c <HAL_RCC_OscConfig+0xd4>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10c      	bne.n	8001b60 <HAL_RCC_OscConfig+0x98>
 8001b46:	4b7b      	ldr	r3, [pc, #492]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a7a      	ldr	r2, [pc, #488]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	4b78      	ldr	r3, [pc, #480]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a77      	ldr	r2, [pc, #476]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e01d      	b.n	8001b9c <HAL_RCC_OscConfig+0xd4>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0xbc>
 8001b6a:	4b72      	ldr	r3, [pc, #456]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a71      	ldr	r2, [pc, #452]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	4b6f      	ldr	r3, [pc, #444]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a6e      	ldr	r2, [pc, #440]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e00b      	b.n	8001b9c <HAL_RCC_OscConfig+0xd4>
 8001b84:	4b6b      	ldr	r3, [pc, #428]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a6a      	ldr	r2, [pc, #424]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	4b68      	ldr	r3, [pc, #416]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a67      	ldr	r2, [pc, #412]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d013      	beq.n	8001bcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fbfc 	bl	80013a0 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff fbf8 	bl	80013a0 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	; 0x64
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e200      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	4b5d      	ldr	r3, [pc, #372]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0xe4>
 8001bca:	e014      	b.n	8001bf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fbe8 	bl	80013a0 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7ff fbe4 	bl	80013a0 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	; 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e1ec      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	4b53      	ldr	r3, [pc, #332]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x10c>
 8001bf2:	e000      	b.n	8001bf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d063      	beq.n	8001cca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c02:	4b4c      	ldr	r3, [pc, #304]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c0e:	4b49      	ldr	r3, [pc, #292]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d11c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x18c>
 8001c1a:	4b46      	ldr	r3, [pc, #280]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d116      	bne.n	8001c54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c26:	4b43      	ldr	r3, [pc, #268]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <HAL_RCC_OscConfig+0x176>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d001      	beq.n	8001c3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e1c0      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4939      	ldr	r1, [pc, #228]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c52:	e03a      	b.n	8001cca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c5c:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7ff fb9d 	bl	80013a0 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fb99 	bl	80013a0 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e1a1      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4927      	ldr	r1, [pc, #156]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
 8001c9c:	e015      	b.n	8001cca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9e:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fb7c 	bl	80013a0 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cac:	f7ff fb78 	bl	80013a0 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e180      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d03a      	beq.n	8001d4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d019      	beq.n	8001d12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce4:	f7ff fb5c 	bl	80013a0 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cec:	f7ff fb58 	bl	80013a0 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e160      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f000 fad8 	bl	80022c0 <RCC_Delay>
 8001d10:	e01c      	b.n	8001d4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d18:	f7ff fb42 	bl	80013a0 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1e:	e00f      	b.n	8001d40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d20:	f7ff fb3e 	bl	80013a0 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d908      	bls.n	8001d40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e146      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000
 8001d38:	42420000 	.word	0x42420000
 8001d3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d40:	4b92      	ldr	r3, [pc, #584]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1e9      	bne.n	8001d20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80a6 	beq.w	8001ea6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5e:	4b8b      	ldr	r3, [pc, #556]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10d      	bne.n	8001d86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	4b88      	ldr	r3, [pc, #544]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	4a87      	ldr	r2, [pc, #540]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d74:	61d3      	str	r3, [r2, #28]
 8001d76:	4b85      	ldr	r3, [pc, #532]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d82:	2301      	movs	r3, #1
 8001d84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d86:	4b82      	ldr	r3, [pc, #520]	; (8001f90 <HAL_RCC_OscConfig+0x4c8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d118      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d92:	4b7f      	ldr	r3, [pc, #508]	; (8001f90 <HAL_RCC_OscConfig+0x4c8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a7e      	ldr	r2, [pc, #504]	; (8001f90 <HAL_RCC_OscConfig+0x4c8>)
 8001d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9e:	f7ff faff 	bl	80013a0 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da6:	f7ff fafb 	bl	80013a0 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b64      	cmp	r3, #100	; 0x64
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e103      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db8:	4b75      	ldr	r3, [pc, #468]	; (8001f90 <HAL_RCC_OscConfig+0x4c8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d106      	bne.n	8001dda <HAL_RCC_OscConfig+0x312>
 8001dcc:	4b6f      	ldr	r3, [pc, #444]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4a6e      	ldr	r2, [pc, #440]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6213      	str	r3, [r2, #32]
 8001dd8:	e02d      	b.n	8001e36 <HAL_RCC_OscConfig+0x36e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x334>
 8001de2:	4b6a      	ldr	r3, [pc, #424]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	4a69      	ldr	r2, [pc, #420]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	f023 0301 	bic.w	r3, r3, #1
 8001dec:	6213      	str	r3, [r2, #32]
 8001dee:	4b67      	ldr	r3, [pc, #412]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4a66      	ldr	r2, [pc, #408]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	f023 0304 	bic.w	r3, r3, #4
 8001df8:	6213      	str	r3, [r2, #32]
 8001dfa:	e01c      	b.n	8001e36 <HAL_RCC_OscConfig+0x36e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	2b05      	cmp	r3, #5
 8001e02:	d10c      	bne.n	8001e1e <HAL_RCC_OscConfig+0x356>
 8001e04:	4b61      	ldr	r3, [pc, #388]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4a60      	ldr	r2, [pc, #384]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	6213      	str	r3, [r2, #32]
 8001e10:	4b5e      	ldr	r3, [pc, #376]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4a5d      	ldr	r2, [pc, #372]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6213      	str	r3, [r2, #32]
 8001e1c:	e00b      	b.n	8001e36 <HAL_RCC_OscConfig+0x36e>
 8001e1e:	4b5b      	ldr	r3, [pc, #364]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	4a5a      	ldr	r2, [pc, #360]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	6213      	str	r3, [r2, #32]
 8001e2a:	4b58      	ldr	r3, [pc, #352]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4a57      	ldr	r2, [pc, #348]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	f023 0304 	bic.w	r3, r3, #4
 8001e34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d015      	beq.n	8001e6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3e:	f7ff faaf 	bl	80013a0 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e44:	e00a      	b.n	8001e5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e46:	f7ff faab 	bl	80013a0 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e0b1      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5c:	4b4b      	ldr	r3, [pc, #300]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0ee      	beq.n	8001e46 <HAL_RCC_OscConfig+0x37e>
 8001e68:	e014      	b.n	8001e94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6a:	f7ff fa99 	bl	80013a0 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e70:	e00a      	b.n	8001e88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e72:	f7ff fa95 	bl	80013a0 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e09b      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e88:	4b40      	ldr	r3, [pc, #256]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1ee      	bne.n	8001e72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e94:	7dfb      	ldrb	r3, [r7, #23]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d105      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9a:	4b3c      	ldr	r3, [pc, #240]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	4a3b      	ldr	r2, [pc, #236]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8087 	beq.w	8001fbe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eb0:	4b36      	ldr	r3, [pc, #216]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 030c 	and.w	r3, r3, #12
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d061      	beq.n	8001f80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d146      	bne.n	8001f52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec4:	4b33      	ldr	r3, [pc, #204]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eca:	f7ff fa69 	bl	80013a0 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed2:	f7ff fa65 	bl	80013a0 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e06d      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee4:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f0      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef8:	d108      	bne.n	8001f0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001efa:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	4921      	ldr	r1, [pc, #132]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f0c:	4b1f      	ldr	r3, [pc, #124]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a19      	ldr	r1, [r3, #32]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	491b      	ldr	r1, [pc, #108]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f24:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2a:	f7ff fa39 	bl	80013a0 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f32:	f7ff fa35 	bl	80013a0 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e03d      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0x46a>
 8001f50:	e035      	b.n	8001fbe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7ff fa22 	bl	80013a0 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f60:	f7ff fa1e 	bl	80013a0 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e026      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x498>
 8001f7e:	e01e      	b.n	8001fbe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e019      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40007000 	.word	0x40007000
 8001f94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d106      	bne.n	8001fba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d001      	beq.n	8001fbe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40021000 	.word	0x40021000

08001fcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e0d0      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe0:	4b6a      	ldr	r3, [pc, #424]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d910      	bls.n	8002010 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fee:	4b67      	ldr	r3, [pc, #412]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 0207 	bic.w	r2, r3, #7
 8001ff6:	4965      	ldr	r1, [pc, #404]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	4b63      	ldr	r3, [pc, #396]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0b8      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d020      	beq.n	800205e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002028:	4b59      	ldr	r3, [pc, #356]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	4a58      	ldr	r2, [pc, #352]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002032:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002040:	4b53      	ldr	r3, [pc, #332]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4a52      	ldr	r2, [pc, #328]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800204a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800204c:	4b50      	ldr	r3, [pc, #320]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	494d      	ldr	r1, [pc, #308]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d040      	beq.n	80020ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	4b47      	ldr	r3, [pc, #284]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d115      	bne.n	80020aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e07f      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d107      	bne.n	800209a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208a:	4b41      	ldr	r3, [pc, #260]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d109      	bne.n	80020aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e073      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209a:	4b3d      	ldr	r3, [pc, #244]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e06b      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020aa:	4b39      	ldr	r3, [pc, #228]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f023 0203 	bic.w	r2, r3, #3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4936      	ldr	r1, [pc, #216]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020bc:	f7ff f970 	bl	80013a0 <HAL_GetTick>
 80020c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	e00a      	b.n	80020da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c4:	f7ff f96c 	bl	80013a0 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e053      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020da:	4b2d      	ldr	r3, [pc, #180]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 020c 	and.w	r2, r3, #12
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d1eb      	bne.n	80020c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020ec:	4b27      	ldr	r3, [pc, #156]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d210      	bcs.n	800211c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fa:	4b24      	ldr	r3, [pc, #144]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 0207 	bic.w	r2, r3, #7
 8002102:	4922      	ldr	r1, [pc, #136]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e032      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4916      	ldr	r1, [pc, #88]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	4313      	orrs	r3, r2
 8002138:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d009      	beq.n	800215a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	490e      	ldr	r1, [pc, #56]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	4313      	orrs	r3, r2
 8002158:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800215a:	f000 f821 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 800215e:	4602      	mov	r2, r0
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	490a      	ldr	r1, [pc, #40]	; (8002194 <HAL_RCC_ClockConfig+0x1c8>)
 800216c:	5ccb      	ldrb	r3, [r1, r3]
 800216e:	fa22 f303 	lsr.w	r3, r2, r3
 8002172:	4a09      	ldr	r2, [pc, #36]	; (8002198 <HAL_RCC_ClockConfig+0x1cc>)
 8002174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_RCC_ClockConfig+0x1d0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff f8ce 	bl	800131c <HAL_InitTick>

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40022000 	.word	0x40022000
 8002190:	40021000 	.word	0x40021000
 8002194:	080044f8 	.word	0x080044f8
 8002198:	20000018 	.word	0x20000018
 800219c:	2000001c 	.word	0x2000001c

080021a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a0:	b490      	push	{r4, r7}
 80021a2:	b08a      	sub	sp, #40	; 0x28
 80021a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021a6:	4b29      	ldr	r3, [pc, #164]	; (800224c <HAL_RCC_GetSysClockFreq+0xac>)
 80021a8:	1d3c      	adds	r4, r7, #4
 80021aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021b0:	f240 2301 	movw	r3, #513	; 0x201
 80021b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	2300      	movs	r3, #0
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021ca:	4b21      	ldr	r3, [pc, #132]	; (8002250 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d002      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x40>
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d003      	beq.n	80021e6 <HAL_RCC_GetSysClockFreq+0x46>
 80021de:	e02b      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021e0:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021e2:	623b      	str	r3, [r7, #32]
      break;
 80021e4:	e02b      	b.n	800223e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	0c9b      	lsrs	r3, r3, #18
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	3328      	adds	r3, #40	; 0x28
 80021f0:	443b      	add	r3, r7
 80021f2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021f6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d012      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002202:	4b13      	ldr	r3, [pc, #76]	; (8002250 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	0c5b      	lsrs	r3, r3, #17
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	3328      	adds	r3, #40	; 0x28
 800220e:	443b      	add	r3, r7
 8002210:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002214:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	4a0e      	ldr	r2, [pc, #56]	; (8002254 <HAL_RCC_GetSysClockFreq+0xb4>)
 800221a:	fb03 f202 	mul.w	r2, r3, r2
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	fbb2 f3f3 	udiv	r3, r2, r3
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
 8002226:	e004      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	4a0b      	ldr	r2, [pc, #44]	; (8002258 <HAL_RCC_GetSysClockFreq+0xb8>)
 800222c:	fb02 f303 	mul.w	r3, r2, r3
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	623b      	str	r3, [r7, #32]
      break;
 8002236:	e002      	b.n	800223e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_RCC_GetSysClockFreq+0xb4>)
 800223a:	623b      	str	r3, [r7, #32]
      break;
 800223c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800223e:	6a3b      	ldr	r3, [r7, #32]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3728      	adds	r7, #40	; 0x28
 8002244:	46bd      	mov	sp, r7
 8002246:	bc90      	pop	{r4, r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	080044e8 	.word	0x080044e8
 8002250:	40021000 	.word	0x40021000
 8002254:	007a1200 	.word	0x007a1200
 8002258:	003d0900 	.word	0x003d0900

0800225c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002260:	4b02      	ldr	r3, [pc, #8]	; (800226c <HAL_RCC_GetHCLKFreq+0x10>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	20000018 	.word	0x20000018

08002270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002274:	f7ff fff2 	bl	800225c <HAL_RCC_GetHCLKFreq>
 8002278:	4602      	mov	r2, r0
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	0a1b      	lsrs	r3, r3, #8
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	4903      	ldr	r1, [pc, #12]	; (8002294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002286:	5ccb      	ldrb	r3, [r1, r3]
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	08004508 	.word	0x08004508

08002298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800229c:	f7ff ffde 	bl	800225c <HAL_RCC_GetHCLKFreq>
 80022a0:	4602      	mov	r2, r0
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	0adb      	lsrs	r3, r3, #11
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	4903      	ldr	r1, [pc, #12]	; (80022bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ae:	5ccb      	ldrb	r3, [r1, r3]
 80022b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000
 80022bc:	08004508 	.word	0x08004508

080022c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <RCC_Delay+0x34>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <RCC_Delay+0x38>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0a5b      	lsrs	r3, r3, #9
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	fb02 f303 	mul.w	r3, r2, r3
 80022da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022dc:	bf00      	nop
  }
  while (Delay --);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1e5a      	subs	r2, r3, #1
 80022e2:	60fa      	str	r2, [r7, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1f9      	bne.n	80022dc <RCC_Delay+0x1c>
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	20000018 	.word	0x20000018
 80022f8:	10624dd3 	.word	0x10624dd3

080022fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e041      	b.n	8002392 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d106      	bne.n	8002328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7fe fd78 	bl	8000e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3304      	adds	r3, #4
 8002338:	4619      	mov	r1, r3
 800233a:	4610      	mov	r0, r2
 800233c:	f000 fc28 	bl	8002b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d001      	beq.n	80023b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e03a      	b.n	800242a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a18      	ldr	r2, [pc, #96]	; (8002434 <HAL_TIM_Base_Start_IT+0x98>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00e      	beq.n	80023f4 <HAL_TIM_Base_Start_IT+0x58>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023de:	d009      	beq.n	80023f4 <HAL_TIM_Base_Start_IT+0x58>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a14      	ldr	r2, [pc, #80]	; (8002438 <HAL_TIM_Base_Start_IT+0x9c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d004      	beq.n	80023f4 <HAL_TIM_Base_Start_IT+0x58>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a13      	ldr	r2, [pc, #76]	; (800243c <HAL_TIM_Base_Start_IT+0xa0>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d111      	bne.n	8002418 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2b06      	cmp	r3, #6
 8002404:	d010      	beq.n	8002428 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 0201 	orr.w	r2, r2, #1
 8002414:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002416:	e007      	b.n	8002428 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	40012c00 	.word	0x40012c00
 8002438:	40000400 	.word	0x40000400
 800243c:	40000800 	.word	0x40000800

08002440 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e041      	b.n	80024d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f839 	bl	80024de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3304      	adds	r3, #4
 800247c:	4619      	mov	r1, r3
 800247e:	4610      	mov	r0, r2
 8002480:	f000 fb86 	bl	8002b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d109      	bne.n	8002514 <HAL_TIM_PWM_Start+0x24>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b01      	cmp	r3, #1
 800250a:	bf14      	ite	ne
 800250c:	2301      	movne	r3, #1
 800250e:	2300      	moveq	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	e022      	b.n	800255a <HAL_TIM_PWM_Start+0x6a>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	2b04      	cmp	r3, #4
 8002518:	d109      	bne.n	800252e <HAL_TIM_PWM_Start+0x3e>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b01      	cmp	r3, #1
 8002524:	bf14      	ite	ne
 8002526:	2301      	movne	r3, #1
 8002528:	2300      	moveq	r3, #0
 800252a:	b2db      	uxtb	r3, r3
 800252c:	e015      	b.n	800255a <HAL_TIM_PWM_Start+0x6a>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b08      	cmp	r3, #8
 8002532:	d109      	bne.n	8002548 <HAL_TIM_PWM_Start+0x58>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b01      	cmp	r3, #1
 800253e:	bf14      	ite	ne
 8002540:	2301      	movne	r3, #1
 8002542:	2300      	moveq	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	e008      	b.n	800255a <HAL_TIM_PWM_Start+0x6a>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b01      	cmp	r3, #1
 8002552:	bf14      	ite	ne
 8002554:	2301      	movne	r3, #1
 8002556:	2300      	moveq	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e05e      	b.n	8002620 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d104      	bne.n	8002572 <HAL_TIM_PWM_Start+0x82>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002570:	e013      	b.n	800259a <HAL_TIM_PWM_Start+0xaa>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b04      	cmp	r3, #4
 8002576:	d104      	bne.n	8002582 <HAL_TIM_PWM_Start+0x92>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002580:	e00b      	b.n	800259a <HAL_TIM_PWM_Start+0xaa>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b08      	cmp	r3, #8
 8002586:	d104      	bne.n	8002592 <HAL_TIM_PWM_Start+0xa2>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002590:	e003      	b.n	800259a <HAL_TIM_PWM_Start+0xaa>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2202      	movs	r2, #2
 8002596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2201      	movs	r2, #1
 80025a0:	6839      	ldr	r1, [r7, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 fd74 	bl	8003090 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a1e      	ldr	r2, [pc, #120]	; (8002628 <HAL_TIM_PWM_Start+0x138>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d107      	bne.n	80025c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a18      	ldr	r2, [pc, #96]	; (8002628 <HAL_TIM_PWM_Start+0x138>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d00e      	beq.n	80025ea <HAL_TIM_PWM_Start+0xfa>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d4:	d009      	beq.n	80025ea <HAL_TIM_PWM_Start+0xfa>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a14      	ldr	r2, [pc, #80]	; (800262c <HAL_TIM_PWM_Start+0x13c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d004      	beq.n	80025ea <HAL_TIM_PWM_Start+0xfa>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a12      	ldr	r2, [pc, #72]	; (8002630 <HAL_TIM_PWM_Start+0x140>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d111      	bne.n	800260e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b06      	cmp	r3, #6
 80025fa:	d010      	beq.n	800261e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0201 	orr.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800260c:	e007      	b.n	800261e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0201 	orr.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40012c00 	.word	0x40012c00
 800262c:	40000400 	.word	0x40000400
 8002630:	40000800 	.word	0x40000800

08002634 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b02      	cmp	r3, #2
 8002648:	d122      	bne.n	8002690 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b02      	cmp	r3, #2
 8002656:	d11b      	bne.n	8002690 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0202 	mvn.w	r2, #2
 8002660:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 fa6f 	bl	8002b5a <HAL_TIM_IC_CaptureCallback>
 800267c:	e005      	b.n	800268a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 fa62 	bl	8002b48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 fa71 	bl	8002b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	2b04      	cmp	r3, #4
 800269c:	d122      	bne.n	80026e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d11b      	bne.n	80026e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0204 	mvn.w	r2, #4
 80026b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2202      	movs	r2, #2
 80026ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 fa45 	bl	8002b5a <HAL_TIM_IC_CaptureCallback>
 80026d0:	e005      	b.n	80026de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fa38 	bl	8002b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 fa47 	bl	8002b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d122      	bne.n	8002738 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d11b      	bne.n	8002738 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0208 	mvn.w	r2, #8
 8002708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2204      	movs	r2, #4
 800270e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 fa1b 	bl	8002b5a <HAL_TIM_IC_CaptureCallback>
 8002724:	e005      	b.n	8002732 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fa0e 	bl	8002b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 fa1d 	bl	8002b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b10      	cmp	r3, #16
 8002744:	d122      	bne.n	800278c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0310 	and.w	r3, r3, #16
 8002750:	2b10      	cmp	r3, #16
 8002752:	d11b      	bne.n	800278c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0210 	mvn.w	r2, #16
 800275c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2208      	movs	r2, #8
 8002762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f9f1 	bl	8002b5a <HAL_TIM_IC_CaptureCallback>
 8002778:	e005      	b.n	8002786 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f9e4 	bl	8002b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f9f3 	bl	8002b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b01      	cmp	r3, #1
 8002798:	d10e      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d107      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f06f 0201 	mvn.w	r2, #1
 80027b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7fe faf2 	bl	8000d9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c2:	2b80      	cmp	r3, #128	; 0x80
 80027c4:	d10e      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d0:	2b80      	cmp	r3, #128	; 0x80
 80027d2:	d107      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 fce1 	bl	80031a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ee:	2b40      	cmp	r3, #64	; 0x40
 80027f0:	d10e      	bne.n	8002810 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fc:	2b40      	cmp	r3, #64	; 0x40
 80027fe:	d107      	bne.n	8002810 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f9b7 	bl	8002b7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b20      	cmp	r3, #32
 800281c:	d10e      	bne.n	800283c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	2b20      	cmp	r3, #32
 800282a:	d107      	bne.n	800283c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0220 	mvn.w	r2, #32
 8002834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fcac 	bl	8003194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800283c:	bf00      	nop
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800285a:	2302      	movs	r3, #2
 800285c:	e0ac      	b.n	80029b8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b0c      	cmp	r3, #12
 800286a:	f200 809f 	bhi.w	80029ac <HAL_TIM_PWM_ConfigChannel+0x168>
 800286e:	a201      	add	r2, pc, #4	; (adr r2, 8002874 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002874:	080028a9 	.word	0x080028a9
 8002878:	080029ad 	.word	0x080029ad
 800287c:	080029ad 	.word	0x080029ad
 8002880:	080029ad 	.word	0x080029ad
 8002884:	080028e9 	.word	0x080028e9
 8002888:	080029ad 	.word	0x080029ad
 800288c:	080029ad 	.word	0x080029ad
 8002890:	080029ad 	.word	0x080029ad
 8002894:	0800292b 	.word	0x0800292b
 8002898:	080029ad 	.word	0x080029ad
 800289c:	080029ad 	.word	0x080029ad
 80028a0:	080029ad 	.word	0x080029ad
 80028a4:	0800296b 	.word	0x0800296b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 f9d0 	bl	8002c54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699a      	ldr	r2, [r3, #24]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0208 	orr.w	r2, r2, #8
 80028c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0204 	bic.w	r2, r2, #4
 80028d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6999      	ldr	r1, [r3, #24]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	691a      	ldr	r2, [r3, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	619a      	str	r2, [r3, #24]
      break;
 80028e6:	e062      	b.n	80029ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fa16 	bl	8002d20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699a      	ldr	r2, [r3, #24]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6999      	ldr	r1, [r3, #24]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	021a      	lsls	r2, r3, #8
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	619a      	str	r2, [r3, #24]
      break;
 8002928:	e041      	b.n	80029ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68b9      	ldr	r1, [r7, #8]
 8002930:	4618      	mov	r0, r3
 8002932:	f000 fa5f 	bl	8002df4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	69da      	ldr	r2, [r3, #28]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0208 	orr.w	r2, r2, #8
 8002944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	69da      	ldr	r2, [r3, #28]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0204 	bic.w	r2, r2, #4
 8002954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	69d9      	ldr	r1, [r3, #28]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	61da      	str	r2, [r3, #28]
      break;
 8002968:	e021      	b.n	80029ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68b9      	ldr	r1, [r7, #8]
 8002970:	4618      	mov	r0, r3
 8002972:	f000 faa9 	bl	8002ec8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	69da      	ldr	r2, [r3, #28]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	69da      	ldr	r2, [r3, #28]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	69d9      	ldr	r1, [r3, #28]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	021a      	lsls	r2, r3, #8
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	61da      	str	r2, [r3, #28]
      break;
 80029aa:	e000      	b.n	80029ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80029ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_TIM_ConfigClockSource+0x18>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e0b3      	b.n	8002b40 <HAL_TIM_ConfigClockSource+0x180>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a10:	d03e      	beq.n	8002a90 <HAL_TIM_ConfigClockSource+0xd0>
 8002a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a16:	f200 8087 	bhi.w	8002b28 <HAL_TIM_ConfigClockSource+0x168>
 8002a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a1e:	f000 8085 	beq.w	8002b2c <HAL_TIM_ConfigClockSource+0x16c>
 8002a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a26:	d87f      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x168>
 8002a28:	2b70      	cmp	r3, #112	; 0x70
 8002a2a:	d01a      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0xa2>
 8002a2c:	2b70      	cmp	r3, #112	; 0x70
 8002a2e:	d87b      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x168>
 8002a30:	2b60      	cmp	r3, #96	; 0x60
 8002a32:	d050      	beq.n	8002ad6 <HAL_TIM_ConfigClockSource+0x116>
 8002a34:	2b60      	cmp	r3, #96	; 0x60
 8002a36:	d877      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x168>
 8002a38:	2b50      	cmp	r3, #80	; 0x50
 8002a3a:	d03c      	beq.n	8002ab6 <HAL_TIM_ConfigClockSource+0xf6>
 8002a3c:	2b50      	cmp	r3, #80	; 0x50
 8002a3e:	d873      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x168>
 8002a40:	2b40      	cmp	r3, #64	; 0x40
 8002a42:	d058      	beq.n	8002af6 <HAL_TIM_ConfigClockSource+0x136>
 8002a44:	2b40      	cmp	r3, #64	; 0x40
 8002a46:	d86f      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x168>
 8002a48:	2b30      	cmp	r3, #48	; 0x30
 8002a4a:	d064      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0x156>
 8002a4c:	2b30      	cmp	r3, #48	; 0x30
 8002a4e:	d86b      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x168>
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	d060      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0x156>
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d867      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x168>
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d05c      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0x156>
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d05a      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a60:	e062      	b.n	8002b28 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6899      	ldr	r1, [r3, #8]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f000 faee 	bl	8003052 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a84:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	609a      	str	r2, [r3, #8]
      break;
 8002a8e:	e04e      	b.n	8002b2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	6899      	ldr	r1, [r3, #8]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f000 fad7 	bl	8003052 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ab2:	609a      	str	r2, [r3, #8]
      break;
 8002ab4:	e03b      	b.n	8002b2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6818      	ldr	r0, [r3, #0]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	6859      	ldr	r1, [r3, #4]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f000 fa4e 	bl	8002f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2150      	movs	r1, #80	; 0x50
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 faa5 	bl	800301e <TIM_ITRx_SetConfig>
      break;
 8002ad4:	e02b      	b.n	8002b2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6859      	ldr	r1, [r3, #4]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f000 fa6c 	bl	8002fc0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2160      	movs	r1, #96	; 0x60
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fa95 	bl	800301e <TIM_ITRx_SetConfig>
      break;
 8002af4:	e01b      	b.n	8002b2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6859      	ldr	r1, [r3, #4]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f000 fa2e 	bl	8002f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2140      	movs	r1, #64	; 0x40
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fa85 	bl	800301e <TIM_ITRx_SetConfig>
      break;
 8002b14:	e00b      	b.n	8002b2e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4610      	mov	r0, r2
 8002b22:	f000 fa7c 	bl	800301e <TIM_ITRx_SetConfig>
        break;
 8002b26:	e002      	b.n	8002b2e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b28:	bf00      	nop
 8002b2a:	e000      	b.n	8002b2e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b2c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr

08002b5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr

08002b6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a29      	ldr	r2, [pc, #164]	; (8002c48 <TIM_Base_SetConfig+0xb8>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d00b      	beq.n	8002bc0 <TIM_Base_SetConfig+0x30>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bae:	d007      	beq.n	8002bc0 <TIM_Base_SetConfig+0x30>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a26      	ldr	r2, [pc, #152]	; (8002c4c <TIM_Base_SetConfig+0xbc>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d003      	beq.n	8002bc0 <TIM_Base_SetConfig+0x30>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a25      	ldr	r2, [pc, #148]	; (8002c50 <TIM_Base_SetConfig+0xc0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d108      	bne.n	8002bd2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a1c      	ldr	r2, [pc, #112]	; (8002c48 <TIM_Base_SetConfig+0xb8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d00b      	beq.n	8002bf2 <TIM_Base_SetConfig+0x62>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be0:	d007      	beq.n	8002bf2 <TIM_Base_SetConfig+0x62>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a19      	ldr	r2, [pc, #100]	; (8002c4c <TIM_Base_SetConfig+0xbc>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d003      	beq.n	8002bf2 <TIM_Base_SetConfig+0x62>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a18      	ldr	r2, [pc, #96]	; (8002c50 <TIM_Base_SetConfig+0xc0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d108      	bne.n	8002c04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a07      	ldr	r2, [pc, #28]	; (8002c48 <TIM_Base_SetConfig+0xb8>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d103      	bne.n	8002c38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	615a      	str	r2, [r3, #20]
}
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr
 8002c48:	40012c00 	.word	0x40012c00
 8002c4c:	40000400 	.word	0x40000400
 8002c50:	40000800 	.word	0x40000800

08002c54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	f023 0201 	bic.w	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f023 0303 	bic.w	r3, r3, #3
 8002c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f023 0302 	bic.w	r3, r3, #2
 8002c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a1c      	ldr	r2, [pc, #112]	; (8002d1c <TIM_OC1_SetConfig+0xc8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d10c      	bne.n	8002cca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f023 0308 	bic.w	r3, r3, #8
 8002cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f023 0304 	bic.w	r3, r3, #4
 8002cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a13      	ldr	r2, [pc, #76]	; (8002d1c <TIM_OC1_SetConfig+0xc8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d111      	bne.n	8002cf6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	621a      	str	r2, [r3, #32]
}
 8002d10:	bf00      	nop
 8002d12:	371c      	adds	r7, #28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40012c00 	.word	0x40012c00

08002d20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f023 0210 	bic.w	r2, r3, #16
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f023 0320 	bic.w	r3, r3, #32
 8002d6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a1d      	ldr	r2, [pc, #116]	; (8002df0 <TIM_OC2_SetConfig+0xd0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d10d      	bne.n	8002d9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a14      	ldr	r2, [pc, #80]	; (8002df0 <TIM_OC2_SetConfig+0xd0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d113      	bne.n	8002dcc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002daa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002db2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	621a      	str	r2, [r3, #32]
}
 8002de6:	bf00      	nop
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr
 8002df0:	40012c00 	.word	0x40012c00

08002df4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f023 0303 	bic.w	r3, r3, #3
 8002e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	021b      	lsls	r3, r3, #8
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a1d      	ldr	r2, [pc, #116]	; (8002ec4 <TIM_OC3_SetConfig+0xd0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d10d      	bne.n	8002e6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	021b      	lsls	r3, r3, #8
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a14      	ldr	r2, [pc, #80]	; (8002ec4 <TIM_OC3_SetConfig+0xd0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d113      	bne.n	8002e9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	621a      	str	r2, [r3, #32]
}
 8002eb8:	bf00      	nop
 8002eba:	371c      	adds	r7, #28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40012c00 	.word	0x40012c00

08002ec8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	021b      	lsls	r3, r3, #8
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	031b      	lsls	r3, r3, #12
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a0f      	ldr	r2, [pc, #60]	; (8002f60 <TIM_OC4_SetConfig+0x98>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d109      	bne.n	8002f3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	019b      	lsls	r3, r3, #6
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	621a      	str	r2, [r3, #32]
}
 8002f56:	bf00      	nop
 8002f58:	371c      	adds	r7, #28
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr
 8002f60:	40012c00 	.word	0x40012c00

08002f64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	f023 0201 	bic.w	r2, r3, #1
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f023 030a 	bic.w	r3, r3, #10
 8002fa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	621a      	str	r2, [r3, #32]
}
 8002fb6:	bf00      	nop
 8002fb8:	371c      	adds	r7, #28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	f023 0210 	bic.w	r2, r3, #16
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	031b      	lsls	r3, r3, #12
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ffc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	621a      	str	r2, [r3, #32]
}
 8003014:	bf00      	nop
 8003016:	371c      	adds	r7, #28
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr

0800301e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800301e:	b480      	push	{r7}
 8003020:	b085      	sub	sp, #20
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003034:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	f043 0307 	orr.w	r3, r3, #7
 8003040:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	609a      	str	r2, [r3, #8]
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr

08003052 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003052:	b480      	push	{r7}
 8003054:	b087      	sub	sp, #28
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	607a      	str	r2, [r7, #4]
 800305e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800306c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	021a      	lsls	r2, r3, #8
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	431a      	orrs	r2, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	4313      	orrs	r3, r2
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	609a      	str	r2, [r3, #8]
}
 8003086:	bf00      	nop
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr

08003090 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	2201      	movs	r2, #1
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a1a      	ldr	r2, [r3, #32]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	43db      	mvns	r3, r3
 80030b2:	401a      	ands	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a1a      	ldr	r2, [r3, #32]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	fa01 f303 	lsl.w	r3, r1, r3
 80030c8:	431a      	orrs	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	621a      	str	r2, [r3, #32]
}
 80030ce:	bf00      	nop
 80030d0:	371c      	adds	r7, #28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr

080030d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e046      	b.n	800317e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003116:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a16      	ldr	r2, [pc, #88]	; (8003188 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d00e      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800313c:	d009      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a12      	ldr	r2, [pc, #72]	; (800318c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d004      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a10      	ldr	r2, [pc, #64]	; (8003190 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d10c      	bne.n	800316c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003158:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	4313      	orrs	r3, r2
 8003162:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr
 8003188:	40012c00 	.word	0x40012c00
 800318c:	40000400 	.word	0x40000400
 8003190:	40000800 	.word	0x40000800

08003194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr

080031a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr

080031b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e03f      	b.n	800324a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fd fe8c 	bl	8000efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2224      	movs	r2, #36	; 0x24
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fc25 	bl	8003a4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003210:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695a      	ldr	r2, [r3, #20]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003220:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003230:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b08a      	sub	sp, #40	; 0x28
 8003256:	af02      	add	r7, sp, #8
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	603b      	str	r3, [r7, #0]
 800325e:	4613      	mov	r3, r2
 8003260:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b20      	cmp	r3, #32
 8003270:	d17c      	bne.n	800336c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <HAL_UART_Transmit+0x2c>
 8003278:	88fb      	ldrh	r3, [r7, #6]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e075      	b.n	800336e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_UART_Transmit+0x3e>
 800328c:	2302      	movs	r3, #2
 800328e:	e06e      	b.n	800336e <HAL_UART_Transmit+0x11c>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2221      	movs	r2, #33	; 0x21
 80032a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032a6:	f7fe f87b 	bl	80013a0 <HAL_GetTick>
 80032aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	88fa      	ldrh	r2, [r7, #6]
 80032b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	88fa      	ldrh	r2, [r7, #6]
 80032b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c0:	d108      	bne.n	80032d4 <HAL_UART_Transmit+0x82>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d104      	bne.n	80032d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	61bb      	str	r3, [r7, #24]
 80032d2:	e003      	b.n	80032dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80032e4:	e02a      	b.n	800333c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2200      	movs	r2, #0
 80032ee:	2180      	movs	r1, #128	; 0x80
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 fa11 	bl	8003718 <UART_WaitOnFlagUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e036      	b.n	800336e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10b      	bne.n	800331e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	461a      	mov	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003314:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	3302      	adds	r3, #2
 800331a:	61bb      	str	r3, [r7, #24]
 800331c:	e007      	b.n	800332e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	781a      	ldrb	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	3301      	adds	r3, #1
 800332c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003332:	b29b      	uxth	r3, r3
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1cf      	bne.n	80032e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2200      	movs	r2, #0
 800334e:	2140      	movs	r1, #64	; 0x40
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 f9e1 	bl	8003718 <UART_WaitOnFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e006      	b.n	800336e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	e000      	b.n	800336e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800336c:	2302      	movs	r3, #2
  }
}
 800336e:	4618      	mov	r0, r3
 8003370:	3720      	adds	r7, #32
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08a      	sub	sp, #40	; 0x28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003398:	2300      	movs	r3, #0
 800339a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10d      	bne.n	80033ca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	f003 0320 	and.w	r3, r3, #32
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <HAL_UART_IRQHandler+0x52>
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fa99 	bl	80038fa <UART_Receive_IT>
      return;
 80033c8:	e17b      	b.n	80036c2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 80b1 	beq.w	8003534 <HAL_UART_IRQHandler+0x1bc>
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <HAL_UART_IRQHandler+0x70>
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 80a6 	beq.w	8003534 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <HAL_UART_IRQHandler+0x90>
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	f043 0201 	orr.w	r2, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HAL_UART_IRQHandler+0xb0>
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d005      	beq.n	8003428 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	f043 0202 	orr.w	r2, r3, #2
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <HAL_UART_IRQHandler+0xd0>
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	f043 0204 	orr.w	r2, r3, #4
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00f      	beq.n	8003472 <HAL_UART_IRQHandler+0xfa>
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	2b00      	cmp	r3, #0
 800345a:	d104      	bne.n	8003466 <HAL_UART_IRQHandler+0xee>
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d005      	beq.n	8003472 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f043 0208 	orr.w	r2, r3, #8
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 811e 	beq.w	80036b8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	f003 0320 	and.w	r3, r3, #32
 8003482:	2b00      	cmp	r3, #0
 8003484:	d007      	beq.n	8003496 <HAL_UART_IRQHandler+0x11e>
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fa32 	bl	80038fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bf14      	ite	ne
 80034a4:	2301      	movne	r3, #1
 80034a6:	2300      	moveq	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d102      	bne.n	80034be <HAL_UART_IRQHandler+0x146>
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d031      	beq.n	8003522 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f974 	bl	80037ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d023      	beq.n	800351a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034e0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d013      	beq.n	8003512 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ee:	4a76      	ldr	r2, [pc, #472]	; (80036c8 <HAL_UART_IRQHandler+0x350>)
 80034f0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fe f8a4 	bl	8001644 <HAL_DMA_Abort_IT>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d016      	beq.n	8003530 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800350c:	4610      	mov	r0, r2
 800350e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003510:	e00e      	b.n	8003530 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f8ec 	bl	80036f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003518:	e00a      	b.n	8003530 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f8e8 	bl	80036f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003520:	e006      	b.n	8003530 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f8e4 	bl	80036f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800352e:	e0c3      	b.n	80036b8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003530:	bf00      	nop
    return;
 8003532:	e0c1      	b.n	80036b8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003538:	2b01      	cmp	r3, #1
 800353a:	f040 80a1 	bne.w	8003680 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 809b 	beq.w	8003680 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	f003 0310 	and.w	r3, r3, #16
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 8095 	beq.w	8003680 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	d04e      	beq.n	8003618 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003584:	8a3b      	ldrh	r3, [r7, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 8098 	beq.w	80036bc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003590:	8a3a      	ldrh	r2, [r7, #16]
 8003592:	429a      	cmp	r2, r3
 8003594:	f080 8092 	bcs.w	80036bc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	8a3a      	ldrh	r2, [r7, #16]
 800359c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	d02b      	beq.n	8003600 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035b6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695a      	ldr	r2, [r3, #20]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695a      	ldr	r2, [r3, #20]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035d6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2220      	movs	r2, #32
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0210 	bic.w	r2, r2, #16
 80035f4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fd ffe7 	bl	80015ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003608:	b29b      	uxth	r3, r3
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	b29b      	uxth	r3, r3
 800360e:	4619      	mov	r1, r3
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f876 	bl	8003702 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003616:	e051      	b.n	80036bc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003620:	b29b      	uxth	r3, r3
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d047      	beq.n	80036c0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003630:	8a7b      	ldrh	r3, [r7, #18]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d044      	beq.n	80036c0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003644:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695a      	ldr	r2, [r3, #20]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0201 	bic.w	r2, r2, #1
 8003654:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2220      	movs	r2, #32
 800365a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0210 	bic.w	r2, r2, #16
 8003672:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003674:	8a7b      	ldrh	r3, [r7, #18]
 8003676:	4619      	mov	r1, r3
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f842 	bl	8003702 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800367e:	e01f      	b.n	80036c0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	2b00      	cmp	r3, #0
 8003688:	d008      	beq.n	800369c <HAL_UART_IRQHandler+0x324>
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f8c9 	bl	800382c <UART_Transmit_IT>
    return;
 800369a:	e012      	b.n	80036c2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00d      	beq.n	80036c2 <HAL_UART_IRQHandler+0x34a>
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f90a 	bl	80038ca <UART_EndTransmit_IT>
    return;
 80036b6:	e004      	b.n	80036c2 <HAL_UART_IRQHandler+0x34a>
    return;
 80036b8:	bf00      	nop
 80036ba:	e002      	b.n	80036c2 <HAL_UART_IRQHandler+0x34a>
      return;
 80036bc:	bf00      	nop
 80036be:	e000      	b.n	80036c2 <HAL_UART_IRQHandler+0x34a>
      return;
 80036c0:	bf00      	nop
  }
}
 80036c2:	3728      	adds	r7, #40	; 0x28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	08003805 	.word	0x08003805

080036cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr

080036de <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr

08003702 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr

08003718 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003728:	e02c      	b.n	8003784 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003730:	d028      	beq.n	8003784 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d007      	beq.n	8003748 <UART_WaitOnFlagUntilTimeout+0x30>
 8003738:	f7fd fe32 	bl	80013a0 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	429a      	cmp	r2, r3
 8003746:	d21d      	bcs.n	8003784 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003756:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695a      	ldr	r2, [r3, #20]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0201 	bic.w	r2, r2, #1
 8003766:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e00f      	b.n	80037a4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	4013      	ands	r3, r2
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	429a      	cmp	r2, r3
 8003792:	bf0c      	ite	eq
 8003794:	2301      	moveq	r3, #1
 8003796:	2300      	movne	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	79fb      	ldrb	r3, [r7, #7]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d0c3      	beq.n	800372a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037c2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0201 	bic.w	r2, r2, #1
 80037d2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d107      	bne.n	80037ec <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0210 	bic.w	r2, r2, #16
 80037ea:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr

08003804 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f7ff ff66 	bl	80036f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003824:	bf00      	nop
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b21      	cmp	r3, #33	; 0x21
 800383e:	d13e      	bne.n	80038be <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003848:	d114      	bne.n	8003874 <UART_Transmit_IT+0x48>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d110      	bne.n	8003874 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003866:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	1c9a      	adds	r2, r3, #2
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	621a      	str	r2, [r3, #32]
 8003872:	e008      	b.n	8003886 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	1c59      	adds	r1, r3, #1
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6211      	str	r1, [r2, #32]
 800387e:	781a      	ldrb	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800388a:	b29b      	uxth	r3, r3
 800388c:	3b01      	subs	r3, #1
 800388e:	b29b      	uxth	r3, r3
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	4619      	mov	r1, r3
 8003894:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10f      	bne.n	80038ba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	e000      	b.n	80038c0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038be:	2302      	movs	r3, #2
  }
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr

080038ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff feee 	bl	80036cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b086      	sub	sp, #24
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b22      	cmp	r3, #34	; 0x22
 800390c:	f040 8099 	bne.w	8003a42 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003918:	d117      	bne.n	800394a <UART_Receive_IT+0x50>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d113      	bne.n	800394a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	b29b      	uxth	r3, r3
 8003934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003938:	b29a      	uxth	r2, r3
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003942:	1c9a      	adds	r2, r3, #2
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	629a      	str	r2, [r3, #40]	; 0x28
 8003948:	e026      	b.n	8003998 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395c:	d007      	beq.n	800396e <UART_Receive_IT+0x74>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10a      	bne.n	800397c <UART_Receive_IT+0x82>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d106      	bne.n	800397c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	b2da      	uxtb	r2, r3
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	701a      	strb	r2, [r3, #0]
 800397a:	e008      	b.n	800398e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	b2db      	uxtb	r3, r3
 8003984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003988:	b2da      	uxtb	r2, r3
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4619      	mov	r1, r3
 80039a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d148      	bne.n	8003a3e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0220 	bic.w	r2, r2, #32
 80039ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d123      	bne.n	8003a34 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0210 	bic.w	r2, r2, #16
 8003a00:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	2b10      	cmp	r3, #16
 8003a0e:	d10a      	bne.n	8003a26 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff fe68 	bl	8003702 <HAL_UARTEx_RxEventCallback>
 8003a32:	e002      	b.n	8003a3a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff fe52 	bl	80036de <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e002      	b.n	8003a44 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	e000      	b.n	8003a44 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003a42:	2302      	movs	r3, #2
  }
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a86:	f023 030c 	bic.w	r3, r3, #12
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6812      	ldr	r2, [r2, #0]
 8003a8e:	68b9      	ldr	r1, [r7, #8]
 8003a90:	430b      	orrs	r3, r1
 8003a92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a2c      	ldr	r2, [pc, #176]	; (8003b60 <UART_SetConfig+0x114>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d103      	bne.n	8003abc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ab4:	f7fe fbf0 	bl	8002298 <HAL_RCC_GetPCLK2Freq>
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	e002      	b.n	8003ac2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003abc:	f7fe fbd8 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 8003ac0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	009a      	lsls	r2, r3, #2
 8003acc:	441a      	add	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad8:	4a22      	ldr	r2, [pc, #136]	; (8003b64 <UART_SetConfig+0x118>)
 8003ada:	fba2 2303 	umull	r2, r3, r2, r3
 8003ade:	095b      	lsrs	r3, r3, #5
 8003ae0:	0119      	lsls	r1, r3, #4
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	009a      	lsls	r2, r3, #2
 8003aec:	441a      	add	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003af8:	4b1a      	ldr	r3, [pc, #104]	; (8003b64 <UART_SetConfig+0x118>)
 8003afa:	fba3 0302 	umull	r0, r3, r3, r2
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	2064      	movs	r0, #100	; 0x64
 8003b02:	fb00 f303 	mul.w	r3, r0, r3
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	3332      	adds	r3, #50	; 0x32
 8003b0c:	4a15      	ldr	r2, [pc, #84]	; (8003b64 <UART_SetConfig+0x118>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b18:	4419      	add	r1, r3
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	009a      	lsls	r2, r3, #2
 8003b24:	441a      	add	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b30:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <UART_SetConfig+0x118>)
 8003b32:	fba3 0302 	umull	r0, r3, r3, r2
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	2064      	movs	r0, #100	; 0x64
 8003b3a:	fb00 f303 	mul.w	r3, r0, r3
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	3332      	adds	r3, #50	; 0x32
 8003b44:	4a07      	ldr	r2, [pc, #28]	; (8003b64 <UART_SetConfig+0x118>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	f003 020f 	and.w	r2, r3, #15
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	440a      	add	r2, r1
 8003b56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b58:	bf00      	nop
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40013800 	.word	0x40013800
 8003b64:	51eb851f 	.word	0x51eb851f

08003b68 <__errno>:
 8003b68:	4b01      	ldr	r3, [pc, #4]	; (8003b70 <__errno+0x8>)
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	20000024 	.word	0x20000024

08003b74 <__libc_init_array>:
 8003b74:	b570      	push	{r4, r5, r6, lr}
 8003b76:	2600      	movs	r6, #0
 8003b78:	4d0c      	ldr	r5, [pc, #48]	; (8003bac <__libc_init_array+0x38>)
 8003b7a:	4c0d      	ldr	r4, [pc, #52]	; (8003bb0 <__libc_init_array+0x3c>)
 8003b7c:	1b64      	subs	r4, r4, r5
 8003b7e:	10a4      	asrs	r4, r4, #2
 8003b80:	42a6      	cmp	r6, r4
 8003b82:	d109      	bne.n	8003b98 <__libc_init_array+0x24>
 8003b84:	f000 fc9c 	bl	80044c0 <_init>
 8003b88:	2600      	movs	r6, #0
 8003b8a:	4d0a      	ldr	r5, [pc, #40]	; (8003bb4 <__libc_init_array+0x40>)
 8003b8c:	4c0a      	ldr	r4, [pc, #40]	; (8003bb8 <__libc_init_array+0x44>)
 8003b8e:	1b64      	subs	r4, r4, r5
 8003b90:	10a4      	asrs	r4, r4, #2
 8003b92:	42a6      	cmp	r6, r4
 8003b94:	d105      	bne.n	8003ba2 <__libc_init_array+0x2e>
 8003b96:	bd70      	pop	{r4, r5, r6, pc}
 8003b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b9c:	4798      	blx	r3
 8003b9e:	3601      	adds	r6, #1
 8003ba0:	e7ee      	b.n	8003b80 <__libc_init_array+0xc>
 8003ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ba6:	4798      	blx	r3
 8003ba8:	3601      	adds	r6, #1
 8003baa:	e7f2      	b.n	8003b92 <__libc_init_array+0x1e>
 8003bac:	08004544 	.word	0x08004544
 8003bb0:	08004544 	.word	0x08004544
 8003bb4:	08004544 	.word	0x08004544
 8003bb8:	08004548 	.word	0x08004548

08003bbc <memset>:
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	4402      	add	r2, r0
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d100      	bne.n	8003bc6 <memset+0xa>
 8003bc4:	4770      	bx	lr
 8003bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bca:	e7f9      	b.n	8003bc0 <memset+0x4>

08003bcc <siprintf>:
 8003bcc:	b40e      	push	{r1, r2, r3}
 8003bce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bd2:	b500      	push	{lr}
 8003bd4:	b09c      	sub	sp, #112	; 0x70
 8003bd6:	ab1d      	add	r3, sp, #116	; 0x74
 8003bd8:	9002      	str	r0, [sp, #8]
 8003bda:	9006      	str	r0, [sp, #24]
 8003bdc:	9107      	str	r1, [sp, #28]
 8003bde:	9104      	str	r1, [sp, #16]
 8003be0:	4808      	ldr	r0, [pc, #32]	; (8003c04 <siprintf+0x38>)
 8003be2:	4909      	ldr	r1, [pc, #36]	; (8003c08 <siprintf+0x3c>)
 8003be4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003be8:	9105      	str	r1, [sp, #20]
 8003bea:	6800      	ldr	r0, [r0, #0]
 8003bec:	a902      	add	r1, sp, #8
 8003bee:	9301      	str	r3, [sp, #4]
 8003bf0:	f000 f868 	bl	8003cc4 <_svfiprintf_r>
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	9b02      	ldr	r3, [sp, #8]
 8003bf8:	701a      	strb	r2, [r3, #0]
 8003bfa:	b01c      	add	sp, #112	; 0x70
 8003bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c00:	b003      	add	sp, #12
 8003c02:	4770      	bx	lr
 8003c04:	20000024 	.word	0x20000024
 8003c08:	ffff0208 	.word	0xffff0208

08003c0c <__ssputs_r>:
 8003c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c10:	688e      	ldr	r6, [r1, #8]
 8003c12:	4682      	mov	sl, r0
 8003c14:	429e      	cmp	r6, r3
 8003c16:	460c      	mov	r4, r1
 8003c18:	4690      	mov	r8, r2
 8003c1a:	461f      	mov	r7, r3
 8003c1c:	d838      	bhi.n	8003c90 <__ssputs_r+0x84>
 8003c1e:	898a      	ldrh	r2, [r1, #12]
 8003c20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c24:	d032      	beq.n	8003c8c <__ssputs_r+0x80>
 8003c26:	6825      	ldr	r5, [r4, #0]
 8003c28:	6909      	ldr	r1, [r1, #16]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	eba5 0901 	sub.w	r9, r5, r1
 8003c30:	6965      	ldr	r5, [r4, #20]
 8003c32:	444b      	add	r3, r9
 8003c34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c3c:	106d      	asrs	r5, r5, #1
 8003c3e:	429d      	cmp	r5, r3
 8003c40:	bf38      	it	cc
 8003c42:	461d      	movcc	r5, r3
 8003c44:	0553      	lsls	r3, r2, #21
 8003c46:	d531      	bpl.n	8003cac <__ssputs_r+0xa0>
 8003c48:	4629      	mov	r1, r5
 8003c4a:	f000 fb6f 	bl	800432c <_malloc_r>
 8003c4e:	4606      	mov	r6, r0
 8003c50:	b950      	cbnz	r0, 8003c68 <__ssputs_r+0x5c>
 8003c52:	230c      	movs	r3, #12
 8003c54:	f04f 30ff 	mov.w	r0, #4294967295
 8003c58:	f8ca 3000 	str.w	r3, [sl]
 8003c5c:	89a3      	ldrh	r3, [r4, #12]
 8003c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c62:	81a3      	strh	r3, [r4, #12]
 8003c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c68:	464a      	mov	r2, r9
 8003c6a:	6921      	ldr	r1, [r4, #16]
 8003c6c:	f000 face 	bl	800420c <memcpy>
 8003c70:	89a3      	ldrh	r3, [r4, #12]
 8003c72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c7a:	81a3      	strh	r3, [r4, #12]
 8003c7c:	6126      	str	r6, [r4, #16]
 8003c7e:	444e      	add	r6, r9
 8003c80:	6026      	str	r6, [r4, #0]
 8003c82:	463e      	mov	r6, r7
 8003c84:	6165      	str	r5, [r4, #20]
 8003c86:	eba5 0509 	sub.w	r5, r5, r9
 8003c8a:	60a5      	str	r5, [r4, #8]
 8003c8c:	42be      	cmp	r6, r7
 8003c8e:	d900      	bls.n	8003c92 <__ssputs_r+0x86>
 8003c90:	463e      	mov	r6, r7
 8003c92:	4632      	mov	r2, r6
 8003c94:	4641      	mov	r1, r8
 8003c96:	6820      	ldr	r0, [r4, #0]
 8003c98:	f000 fac6 	bl	8004228 <memmove>
 8003c9c:	68a3      	ldr	r3, [r4, #8]
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	1b9b      	subs	r3, r3, r6
 8003ca2:	60a3      	str	r3, [r4, #8]
 8003ca4:	6823      	ldr	r3, [r4, #0]
 8003ca6:	4433      	add	r3, r6
 8003ca8:	6023      	str	r3, [r4, #0]
 8003caa:	e7db      	b.n	8003c64 <__ssputs_r+0x58>
 8003cac:	462a      	mov	r2, r5
 8003cae:	f000 fbb1 	bl	8004414 <_realloc_r>
 8003cb2:	4606      	mov	r6, r0
 8003cb4:	2800      	cmp	r0, #0
 8003cb6:	d1e1      	bne.n	8003c7c <__ssputs_r+0x70>
 8003cb8:	4650      	mov	r0, sl
 8003cba:	6921      	ldr	r1, [r4, #16]
 8003cbc:	f000 face 	bl	800425c <_free_r>
 8003cc0:	e7c7      	b.n	8003c52 <__ssputs_r+0x46>
	...

08003cc4 <_svfiprintf_r>:
 8003cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cc8:	4698      	mov	r8, r3
 8003cca:	898b      	ldrh	r3, [r1, #12]
 8003ccc:	4607      	mov	r7, r0
 8003cce:	061b      	lsls	r3, r3, #24
 8003cd0:	460d      	mov	r5, r1
 8003cd2:	4614      	mov	r4, r2
 8003cd4:	b09d      	sub	sp, #116	; 0x74
 8003cd6:	d50e      	bpl.n	8003cf6 <_svfiprintf_r+0x32>
 8003cd8:	690b      	ldr	r3, [r1, #16]
 8003cda:	b963      	cbnz	r3, 8003cf6 <_svfiprintf_r+0x32>
 8003cdc:	2140      	movs	r1, #64	; 0x40
 8003cde:	f000 fb25 	bl	800432c <_malloc_r>
 8003ce2:	6028      	str	r0, [r5, #0]
 8003ce4:	6128      	str	r0, [r5, #16]
 8003ce6:	b920      	cbnz	r0, 8003cf2 <_svfiprintf_r+0x2e>
 8003ce8:	230c      	movs	r3, #12
 8003cea:	603b      	str	r3, [r7, #0]
 8003cec:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf0:	e0d1      	b.n	8003e96 <_svfiprintf_r+0x1d2>
 8003cf2:	2340      	movs	r3, #64	; 0x40
 8003cf4:	616b      	str	r3, [r5, #20]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8003cfa:	2320      	movs	r3, #32
 8003cfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d00:	2330      	movs	r3, #48	; 0x30
 8003d02:	f04f 0901 	mov.w	r9, #1
 8003d06:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003eb0 <_svfiprintf_r+0x1ec>
 8003d0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d12:	4623      	mov	r3, r4
 8003d14:	469a      	mov	sl, r3
 8003d16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d1a:	b10a      	cbz	r2, 8003d20 <_svfiprintf_r+0x5c>
 8003d1c:	2a25      	cmp	r2, #37	; 0x25
 8003d1e:	d1f9      	bne.n	8003d14 <_svfiprintf_r+0x50>
 8003d20:	ebba 0b04 	subs.w	fp, sl, r4
 8003d24:	d00b      	beq.n	8003d3e <_svfiprintf_r+0x7a>
 8003d26:	465b      	mov	r3, fp
 8003d28:	4622      	mov	r2, r4
 8003d2a:	4629      	mov	r1, r5
 8003d2c:	4638      	mov	r0, r7
 8003d2e:	f7ff ff6d 	bl	8003c0c <__ssputs_r>
 8003d32:	3001      	adds	r0, #1
 8003d34:	f000 80aa 	beq.w	8003e8c <_svfiprintf_r+0x1c8>
 8003d38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d3a:	445a      	add	r2, fp
 8003d3c:	9209      	str	r2, [sp, #36]	; 0x24
 8003d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 80a2 	beq.w	8003e8c <_svfiprintf_r+0x1c8>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d52:	f10a 0a01 	add.w	sl, sl, #1
 8003d56:	9304      	str	r3, [sp, #16]
 8003d58:	9307      	str	r3, [sp, #28]
 8003d5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d5e:	931a      	str	r3, [sp, #104]	; 0x68
 8003d60:	4654      	mov	r4, sl
 8003d62:	2205      	movs	r2, #5
 8003d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d68:	4851      	ldr	r0, [pc, #324]	; (8003eb0 <_svfiprintf_r+0x1ec>)
 8003d6a:	f000 fa41 	bl	80041f0 <memchr>
 8003d6e:	9a04      	ldr	r2, [sp, #16]
 8003d70:	b9d8      	cbnz	r0, 8003daa <_svfiprintf_r+0xe6>
 8003d72:	06d0      	lsls	r0, r2, #27
 8003d74:	bf44      	itt	mi
 8003d76:	2320      	movmi	r3, #32
 8003d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d7c:	0711      	lsls	r1, r2, #28
 8003d7e:	bf44      	itt	mi
 8003d80:	232b      	movmi	r3, #43	; 0x2b
 8003d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d86:	f89a 3000 	ldrb.w	r3, [sl]
 8003d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d8c:	d015      	beq.n	8003dba <_svfiprintf_r+0xf6>
 8003d8e:	4654      	mov	r4, sl
 8003d90:	2000      	movs	r0, #0
 8003d92:	f04f 0c0a 	mov.w	ip, #10
 8003d96:	9a07      	ldr	r2, [sp, #28]
 8003d98:	4621      	mov	r1, r4
 8003d9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d9e:	3b30      	subs	r3, #48	; 0x30
 8003da0:	2b09      	cmp	r3, #9
 8003da2:	d94e      	bls.n	8003e42 <_svfiprintf_r+0x17e>
 8003da4:	b1b0      	cbz	r0, 8003dd4 <_svfiprintf_r+0x110>
 8003da6:	9207      	str	r2, [sp, #28]
 8003da8:	e014      	b.n	8003dd4 <_svfiprintf_r+0x110>
 8003daa:	eba0 0308 	sub.w	r3, r0, r8
 8003dae:	fa09 f303 	lsl.w	r3, r9, r3
 8003db2:	4313      	orrs	r3, r2
 8003db4:	46a2      	mov	sl, r4
 8003db6:	9304      	str	r3, [sp, #16]
 8003db8:	e7d2      	b.n	8003d60 <_svfiprintf_r+0x9c>
 8003dba:	9b03      	ldr	r3, [sp, #12]
 8003dbc:	1d19      	adds	r1, r3, #4
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	9103      	str	r1, [sp, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	bfbb      	ittet	lt
 8003dc6:	425b      	neglt	r3, r3
 8003dc8:	f042 0202 	orrlt.w	r2, r2, #2
 8003dcc:	9307      	strge	r3, [sp, #28]
 8003dce:	9307      	strlt	r3, [sp, #28]
 8003dd0:	bfb8      	it	lt
 8003dd2:	9204      	strlt	r2, [sp, #16]
 8003dd4:	7823      	ldrb	r3, [r4, #0]
 8003dd6:	2b2e      	cmp	r3, #46	; 0x2e
 8003dd8:	d10c      	bne.n	8003df4 <_svfiprintf_r+0x130>
 8003dda:	7863      	ldrb	r3, [r4, #1]
 8003ddc:	2b2a      	cmp	r3, #42	; 0x2a
 8003dde:	d135      	bne.n	8003e4c <_svfiprintf_r+0x188>
 8003de0:	9b03      	ldr	r3, [sp, #12]
 8003de2:	3402      	adds	r4, #2
 8003de4:	1d1a      	adds	r2, r3, #4
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	9203      	str	r2, [sp, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bfb8      	it	lt
 8003dee:	f04f 33ff 	movlt.w	r3, #4294967295
 8003df2:	9305      	str	r3, [sp, #20]
 8003df4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003eb4 <_svfiprintf_r+0x1f0>
 8003df8:	2203      	movs	r2, #3
 8003dfa:	4650      	mov	r0, sl
 8003dfc:	7821      	ldrb	r1, [r4, #0]
 8003dfe:	f000 f9f7 	bl	80041f0 <memchr>
 8003e02:	b140      	cbz	r0, 8003e16 <_svfiprintf_r+0x152>
 8003e04:	2340      	movs	r3, #64	; 0x40
 8003e06:	eba0 000a 	sub.w	r0, r0, sl
 8003e0a:	fa03 f000 	lsl.w	r0, r3, r0
 8003e0e:	9b04      	ldr	r3, [sp, #16]
 8003e10:	3401      	adds	r4, #1
 8003e12:	4303      	orrs	r3, r0
 8003e14:	9304      	str	r3, [sp, #16]
 8003e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e1a:	2206      	movs	r2, #6
 8003e1c:	4826      	ldr	r0, [pc, #152]	; (8003eb8 <_svfiprintf_r+0x1f4>)
 8003e1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e22:	f000 f9e5 	bl	80041f0 <memchr>
 8003e26:	2800      	cmp	r0, #0
 8003e28:	d038      	beq.n	8003e9c <_svfiprintf_r+0x1d8>
 8003e2a:	4b24      	ldr	r3, [pc, #144]	; (8003ebc <_svfiprintf_r+0x1f8>)
 8003e2c:	bb1b      	cbnz	r3, 8003e76 <_svfiprintf_r+0x1b2>
 8003e2e:	9b03      	ldr	r3, [sp, #12]
 8003e30:	3307      	adds	r3, #7
 8003e32:	f023 0307 	bic.w	r3, r3, #7
 8003e36:	3308      	adds	r3, #8
 8003e38:	9303      	str	r3, [sp, #12]
 8003e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e3c:	4433      	add	r3, r6
 8003e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e40:	e767      	b.n	8003d12 <_svfiprintf_r+0x4e>
 8003e42:	460c      	mov	r4, r1
 8003e44:	2001      	movs	r0, #1
 8003e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e4a:	e7a5      	b.n	8003d98 <_svfiprintf_r+0xd4>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f04f 0c0a 	mov.w	ip, #10
 8003e52:	4619      	mov	r1, r3
 8003e54:	3401      	adds	r4, #1
 8003e56:	9305      	str	r3, [sp, #20]
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e5e:	3a30      	subs	r2, #48	; 0x30
 8003e60:	2a09      	cmp	r2, #9
 8003e62:	d903      	bls.n	8003e6c <_svfiprintf_r+0x1a8>
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0c5      	beq.n	8003df4 <_svfiprintf_r+0x130>
 8003e68:	9105      	str	r1, [sp, #20]
 8003e6a:	e7c3      	b.n	8003df4 <_svfiprintf_r+0x130>
 8003e6c:	4604      	mov	r4, r0
 8003e6e:	2301      	movs	r3, #1
 8003e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e74:	e7f0      	b.n	8003e58 <_svfiprintf_r+0x194>
 8003e76:	ab03      	add	r3, sp, #12
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	462a      	mov	r2, r5
 8003e7c:	4638      	mov	r0, r7
 8003e7e:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <_svfiprintf_r+0x1fc>)
 8003e80:	a904      	add	r1, sp, #16
 8003e82:	f3af 8000 	nop.w
 8003e86:	1c42      	adds	r2, r0, #1
 8003e88:	4606      	mov	r6, r0
 8003e8a:	d1d6      	bne.n	8003e3a <_svfiprintf_r+0x176>
 8003e8c:	89ab      	ldrh	r3, [r5, #12]
 8003e8e:	065b      	lsls	r3, r3, #25
 8003e90:	f53f af2c 	bmi.w	8003cec <_svfiprintf_r+0x28>
 8003e94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e96:	b01d      	add	sp, #116	; 0x74
 8003e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e9c:	ab03      	add	r3, sp, #12
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	462a      	mov	r2, r5
 8003ea2:	4638      	mov	r0, r7
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <_svfiprintf_r+0x1fc>)
 8003ea6:	a904      	add	r1, sp, #16
 8003ea8:	f000 f87c 	bl	8003fa4 <_printf_i>
 8003eac:	e7eb      	b.n	8003e86 <_svfiprintf_r+0x1c2>
 8003eae:	bf00      	nop
 8003eb0:	08004510 	.word	0x08004510
 8003eb4:	08004516 	.word	0x08004516
 8003eb8:	0800451a 	.word	0x0800451a
 8003ebc:	00000000 	.word	0x00000000
 8003ec0:	08003c0d 	.word	0x08003c0d

08003ec4 <_printf_common>:
 8003ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ec8:	4616      	mov	r6, r2
 8003eca:	4699      	mov	r9, r3
 8003ecc:	688a      	ldr	r2, [r1, #8]
 8003ece:	690b      	ldr	r3, [r1, #16]
 8003ed0:	4607      	mov	r7, r0
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	bfb8      	it	lt
 8003ed6:	4613      	movlt	r3, r2
 8003ed8:	6033      	str	r3, [r6, #0]
 8003eda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ede:	460c      	mov	r4, r1
 8003ee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ee4:	b10a      	cbz	r2, 8003eea <_printf_common+0x26>
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	6033      	str	r3, [r6, #0]
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	0699      	lsls	r1, r3, #26
 8003eee:	bf42      	ittt	mi
 8003ef0:	6833      	ldrmi	r3, [r6, #0]
 8003ef2:	3302      	addmi	r3, #2
 8003ef4:	6033      	strmi	r3, [r6, #0]
 8003ef6:	6825      	ldr	r5, [r4, #0]
 8003ef8:	f015 0506 	ands.w	r5, r5, #6
 8003efc:	d106      	bne.n	8003f0c <_printf_common+0x48>
 8003efe:	f104 0a19 	add.w	sl, r4, #25
 8003f02:	68e3      	ldr	r3, [r4, #12]
 8003f04:	6832      	ldr	r2, [r6, #0]
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	42ab      	cmp	r3, r5
 8003f0a:	dc28      	bgt.n	8003f5e <_printf_common+0x9a>
 8003f0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f10:	1e13      	subs	r3, r2, #0
 8003f12:	6822      	ldr	r2, [r4, #0]
 8003f14:	bf18      	it	ne
 8003f16:	2301      	movne	r3, #1
 8003f18:	0692      	lsls	r2, r2, #26
 8003f1a:	d42d      	bmi.n	8003f78 <_printf_common+0xb4>
 8003f1c:	4649      	mov	r1, r9
 8003f1e:	4638      	mov	r0, r7
 8003f20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f24:	47c0      	blx	r8
 8003f26:	3001      	adds	r0, #1
 8003f28:	d020      	beq.n	8003f6c <_printf_common+0xa8>
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	68e5      	ldr	r5, [r4, #12]
 8003f2e:	f003 0306 	and.w	r3, r3, #6
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	bf18      	it	ne
 8003f36:	2500      	movne	r5, #0
 8003f38:	6832      	ldr	r2, [r6, #0]
 8003f3a:	f04f 0600 	mov.w	r6, #0
 8003f3e:	68a3      	ldr	r3, [r4, #8]
 8003f40:	bf08      	it	eq
 8003f42:	1aad      	subeq	r5, r5, r2
 8003f44:	6922      	ldr	r2, [r4, #16]
 8003f46:	bf08      	it	eq
 8003f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	bfc4      	itt	gt
 8003f50:	1a9b      	subgt	r3, r3, r2
 8003f52:	18ed      	addgt	r5, r5, r3
 8003f54:	341a      	adds	r4, #26
 8003f56:	42b5      	cmp	r5, r6
 8003f58:	d11a      	bne.n	8003f90 <_printf_common+0xcc>
 8003f5a:	2000      	movs	r0, #0
 8003f5c:	e008      	b.n	8003f70 <_printf_common+0xac>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	4652      	mov	r2, sl
 8003f62:	4649      	mov	r1, r9
 8003f64:	4638      	mov	r0, r7
 8003f66:	47c0      	blx	r8
 8003f68:	3001      	adds	r0, #1
 8003f6a:	d103      	bne.n	8003f74 <_printf_common+0xb0>
 8003f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f74:	3501      	adds	r5, #1
 8003f76:	e7c4      	b.n	8003f02 <_printf_common+0x3e>
 8003f78:	2030      	movs	r0, #48	; 0x30
 8003f7a:	18e1      	adds	r1, r4, r3
 8003f7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f86:	4422      	add	r2, r4
 8003f88:	3302      	adds	r3, #2
 8003f8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f8e:	e7c5      	b.n	8003f1c <_printf_common+0x58>
 8003f90:	2301      	movs	r3, #1
 8003f92:	4622      	mov	r2, r4
 8003f94:	4649      	mov	r1, r9
 8003f96:	4638      	mov	r0, r7
 8003f98:	47c0      	blx	r8
 8003f9a:	3001      	adds	r0, #1
 8003f9c:	d0e6      	beq.n	8003f6c <_printf_common+0xa8>
 8003f9e:	3601      	adds	r6, #1
 8003fa0:	e7d9      	b.n	8003f56 <_printf_common+0x92>
	...

08003fa4 <_printf_i>:
 8003fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa8:	7e0f      	ldrb	r7, [r1, #24]
 8003faa:	4691      	mov	r9, r2
 8003fac:	2f78      	cmp	r7, #120	; 0x78
 8003fae:	4680      	mov	r8, r0
 8003fb0:	460c      	mov	r4, r1
 8003fb2:	469a      	mov	sl, r3
 8003fb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fba:	d807      	bhi.n	8003fcc <_printf_i+0x28>
 8003fbc:	2f62      	cmp	r7, #98	; 0x62
 8003fbe:	d80a      	bhi.n	8003fd6 <_printf_i+0x32>
 8003fc0:	2f00      	cmp	r7, #0
 8003fc2:	f000 80d9 	beq.w	8004178 <_printf_i+0x1d4>
 8003fc6:	2f58      	cmp	r7, #88	; 0x58
 8003fc8:	f000 80a4 	beq.w	8004114 <_printf_i+0x170>
 8003fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fd4:	e03a      	b.n	800404c <_printf_i+0xa8>
 8003fd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fda:	2b15      	cmp	r3, #21
 8003fdc:	d8f6      	bhi.n	8003fcc <_printf_i+0x28>
 8003fde:	a101      	add	r1, pc, #4	; (adr r1, 8003fe4 <_printf_i+0x40>)
 8003fe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fe4:	0800403d 	.word	0x0800403d
 8003fe8:	08004051 	.word	0x08004051
 8003fec:	08003fcd 	.word	0x08003fcd
 8003ff0:	08003fcd 	.word	0x08003fcd
 8003ff4:	08003fcd 	.word	0x08003fcd
 8003ff8:	08003fcd 	.word	0x08003fcd
 8003ffc:	08004051 	.word	0x08004051
 8004000:	08003fcd 	.word	0x08003fcd
 8004004:	08003fcd 	.word	0x08003fcd
 8004008:	08003fcd 	.word	0x08003fcd
 800400c:	08003fcd 	.word	0x08003fcd
 8004010:	0800415f 	.word	0x0800415f
 8004014:	08004081 	.word	0x08004081
 8004018:	08004141 	.word	0x08004141
 800401c:	08003fcd 	.word	0x08003fcd
 8004020:	08003fcd 	.word	0x08003fcd
 8004024:	08004181 	.word	0x08004181
 8004028:	08003fcd 	.word	0x08003fcd
 800402c:	08004081 	.word	0x08004081
 8004030:	08003fcd 	.word	0x08003fcd
 8004034:	08003fcd 	.word	0x08003fcd
 8004038:	08004149 	.word	0x08004149
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	1d1a      	adds	r2, r3, #4
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	602a      	str	r2, [r5, #0]
 8004044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800404c:	2301      	movs	r3, #1
 800404e:	e0a4      	b.n	800419a <_printf_i+0x1f6>
 8004050:	6820      	ldr	r0, [r4, #0]
 8004052:	6829      	ldr	r1, [r5, #0]
 8004054:	0606      	lsls	r6, r0, #24
 8004056:	f101 0304 	add.w	r3, r1, #4
 800405a:	d50a      	bpl.n	8004072 <_printf_i+0xce>
 800405c:	680e      	ldr	r6, [r1, #0]
 800405e:	602b      	str	r3, [r5, #0]
 8004060:	2e00      	cmp	r6, #0
 8004062:	da03      	bge.n	800406c <_printf_i+0xc8>
 8004064:	232d      	movs	r3, #45	; 0x2d
 8004066:	4276      	negs	r6, r6
 8004068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800406c:	230a      	movs	r3, #10
 800406e:	485e      	ldr	r0, [pc, #376]	; (80041e8 <_printf_i+0x244>)
 8004070:	e019      	b.n	80040a6 <_printf_i+0x102>
 8004072:	680e      	ldr	r6, [r1, #0]
 8004074:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004078:	602b      	str	r3, [r5, #0]
 800407a:	bf18      	it	ne
 800407c:	b236      	sxthne	r6, r6
 800407e:	e7ef      	b.n	8004060 <_printf_i+0xbc>
 8004080:	682b      	ldr	r3, [r5, #0]
 8004082:	6820      	ldr	r0, [r4, #0]
 8004084:	1d19      	adds	r1, r3, #4
 8004086:	6029      	str	r1, [r5, #0]
 8004088:	0601      	lsls	r1, r0, #24
 800408a:	d501      	bpl.n	8004090 <_printf_i+0xec>
 800408c:	681e      	ldr	r6, [r3, #0]
 800408e:	e002      	b.n	8004096 <_printf_i+0xf2>
 8004090:	0646      	lsls	r6, r0, #25
 8004092:	d5fb      	bpl.n	800408c <_printf_i+0xe8>
 8004094:	881e      	ldrh	r6, [r3, #0]
 8004096:	2f6f      	cmp	r7, #111	; 0x6f
 8004098:	bf0c      	ite	eq
 800409a:	2308      	moveq	r3, #8
 800409c:	230a      	movne	r3, #10
 800409e:	4852      	ldr	r0, [pc, #328]	; (80041e8 <_printf_i+0x244>)
 80040a0:	2100      	movs	r1, #0
 80040a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040a6:	6865      	ldr	r5, [r4, #4]
 80040a8:	2d00      	cmp	r5, #0
 80040aa:	bfa8      	it	ge
 80040ac:	6821      	ldrge	r1, [r4, #0]
 80040ae:	60a5      	str	r5, [r4, #8]
 80040b0:	bfa4      	itt	ge
 80040b2:	f021 0104 	bicge.w	r1, r1, #4
 80040b6:	6021      	strge	r1, [r4, #0]
 80040b8:	b90e      	cbnz	r6, 80040be <_printf_i+0x11a>
 80040ba:	2d00      	cmp	r5, #0
 80040bc:	d04d      	beq.n	800415a <_printf_i+0x1b6>
 80040be:	4615      	mov	r5, r2
 80040c0:	fbb6 f1f3 	udiv	r1, r6, r3
 80040c4:	fb03 6711 	mls	r7, r3, r1, r6
 80040c8:	5dc7      	ldrb	r7, [r0, r7]
 80040ca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040ce:	4637      	mov	r7, r6
 80040d0:	42bb      	cmp	r3, r7
 80040d2:	460e      	mov	r6, r1
 80040d4:	d9f4      	bls.n	80040c0 <_printf_i+0x11c>
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d10b      	bne.n	80040f2 <_printf_i+0x14e>
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	07de      	lsls	r6, r3, #31
 80040de:	d508      	bpl.n	80040f2 <_printf_i+0x14e>
 80040e0:	6923      	ldr	r3, [r4, #16]
 80040e2:	6861      	ldr	r1, [r4, #4]
 80040e4:	4299      	cmp	r1, r3
 80040e6:	bfde      	ittt	le
 80040e8:	2330      	movle	r3, #48	; 0x30
 80040ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040f2:	1b52      	subs	r2, r2, r5
 80040f4:	6122      	str	r2, [r4, #16]
 80040f6:	464b      	mov	r3, r9
 80040f8:	4621      	mov	r1, r4
 80040fa:	4640      	mov	r0, r8
 80040fc:	f8cd a000 	str.w	sl, [sp]
 8004100:	aa03      	add	r2, sp, #12
 8004102:	f7ff fedf 	bl	8003ec4 <_printf_common>
 8004106:	3001      	adds	r0, #1
 8004108:	d14c      	bne.n	80041a4 <_printf_i+0x200>
 800410a:	f04f 30ff 	mov.w	r0, #4294967295
 800410e:	b004      	add	sp, #16
 8004110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004114:	4834      	ldr	r0, [pc, #208]	; (80041e8 <_printf_i+0x244>)
 8004116:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800411a:	6829      	ldr	r1, [r5, #0]
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004122:	6029      	str	r1, [r5, #0]
 8004124:	061d      	lsls	r5, r3, #24
 8004126:	d514      	bpl.n	8004152 <_printf_i+0x1ae>
 8004128:	07df      	lsls	r7, r3, #31
 800412a:	bf44      	itt	mi
 800412c:	f043 0320 	orrmi.w	r3, r3, #32
 8004130:	6023      	strmi	r3, [r4, #0]
 8004132:	b91e      	cbnz	r6, 800413c <_printf_i+0x198>
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	f023 0320 	bic.w	r3, r3, #32
 800413a:	6023      	str	r3, [r4, #0]
 800413c:	2310      	movs	r3, #16
 800413e:	e7af      	b.n	80040a0 <_printf_i+0xfc>
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	f043 0320 	orr.w	r3, r3, #32
 8004146:	6023      	str	r3, [r4, #0]
 8004148:	2378      	movs	r3, #120	; 0x78
 800414a:	4828      	ldr	r0, [pc, #160]	; (80041ec <_printf_i+0x248>)
 800414c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004150:	e7e3      	b.n	800411a <_printf_i+0x176>
 8004152:	0659      	lsls	r1, r3, #25
 8004154:	bf48      	it	mi
 8004156:	b2b6      	uxthmi	r6, r6
 8004158:	e7e6      	b.n	8004128 <_printf_i+0x184>
 800415a:	4615      	mov	r5, r2
 800415c:	e7bb      	b.n	80040d6 <_printf_i+0x132>
 800415e:	682b      	ldr	r3, [r5, #0]
 8004160:	6826      	ldr	r6, [r4, #0]
 8004162:	1d18      	adds	r0, r3, #4
 8004164:	6961      	ldr	r1, [r4, #20]
 8004166:	6028      	str	r0, [r5, #0]
 8004168:	0635      	lsls	r5, r6, #24
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	d501      	bpl.n	8004172 <_printf_i+0x1ce>
 800416e:	6019      	str	r1, [r3, #0]
 8004170:	e002      	b.n	8004178 <_printf_i+0x1d4>
 8004172:	0670      	lsls	r0, r6, #25
 8004174:	d5fb      	bpl.n	800416e <_printf_i+0x1ca>
 8004176:	8019      	strh	r1, [r3, #0]
 8004178:	2300      	movs	r3, #0
 800417a:	4615      	mov	r5, r2
 800417c:	6123      	str	r3, [r4, #16]
 800417e:	e7ba      	b.n	80040f6 <_printf_i+0x152>
 8004180:	682b      	ldr	r3, [r5, #0]
 8004182:	2100      	movs	r1, #0
 8004184:	1d1a      	adds	r2, r3, #4
 8004186:	602a      	str	r2, [r5, #0]
 8004188:	681d      	ldr	r5, [r3, #0]
 800418a:	6862      	ldr	r2, [r4, #4]
 800418c:	4628      	mov	r0, r5
 800418e:	f000 f82f 	bl	80041f0 <memchr>
 8004192:	b108      	cbz	r0, 8004198 <_printf_i+0x1f4>
 8004194:	1b40      	subs	r0, r0, r5
 8004196:	6060      	str	r0, [r4, #4]
 8004198:	6863      	ldr	r3, [r4, #4]
 800419a:	6123      	str	r3, [r4, #16]
 800419c:	2300      	movs	r3, #0
 800419e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041a2:	e7a8      	b.n	80040f6 <_printf_i+0x152>
 80041a4:	462a      	mov	r2, r5
 80041a6:	4649      	mov	r1, r9
 80041a8:	4640      	mov	r0, r8
 80041aa:	6923      	ldr	r3, [r4, #16]
 80041ac:	47d0      	blx	sl
 80041ae:	3001      	adds	r0, #1
 80041b0:	d0ab      	beq.n	800410a <_printf_i+0x166>
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	079b      	lsls	r3, r3, #30
 80041b6:	d413      	bmi.n	80041e0 <_printf_i+0x23c>
 80041b8:	68e0      	ldr	r0, [r4, #12]
 80041ba:	9b03      	ldr	r3, [sp, #12]
 80041bc:	4298      	cmp	r0, r3
 80041be:	bfb8      	it	lt
 80041c0:	4618      	movlt	r0, r3
 80041c2:	e7a4      	b.n	800410e <_printf_i+0x16a>
 80041c4:	2301      	movs	r3, #1
 80041c6:	4632      	mov	r2, r6
 80041c8:	4649      	mov	r1, r9
 80041ca:	4640      	mov	r0, r8
 80041cc:	47d0      	blx	sl
 80041ce:	3001      	adds	r0, #1
 80041d0:	d09b      	beq.n	800410a <_printf_i+0x166>
 80041d2:	3501      	adds	r5, #1
 80041d4:	68e3      	ldr	r3, [r4, #12]
 80041d6:	9903      	ldr	r1, [sp, #12]
 80041d8:	1a5b      	subs	r3, r3, r1
 80041da:	42ab      	cmp	r3, r5
 80041dc:	dcf2      	bgt.n	80041c4 <_printf_i+0x220>
 80041de:	e7eb      	b.n	80041b8 <_printf_i+0x214>
 80041e0:	2500      	movs	r5, #0
 80041e2:	f104 0619 	add.w	r6, r4, #25
 80041e6:	e7f5      	b.n	80041d4 <_printf_i+0x230>
 80041e8:	08004521 	.word	0x08004521
 80041ec:	08004532 	.word	0x08004532

080041f0 <memchr>:
 80041f0:	4603      	mov	r3, r0
 80041f2:	b510      	push	{r4, lr}
 80041f4:	b2c9      	uxtb	r1, r1
 80041f6:	4402      	add	r2, r0
 80041f8:	4293      	cmp	r3, r2
 80041fa:	4618      	mov	r0, r3
 80041fc:	d101      	bne.n	8004202 <memchr+0x12>
 80041fe:	2000      	movs	r0, #0
 8004200:	e003      	b.n	800420a <memchr+0x1a>
 8004202:	7804      	ldrb	r4, [r0, #0]
 8004204:	3301      	adds	r3, #1
 8004206:	428c      	cmp	r4, r1
 8004208:	d1f6      	bne.n	80041f8 <memchr+0x8>
 800420a:	bd10      	pop	{r4, pc}

0800420c <memcpy>:
 800420c:	440a      	add	r2, r1
 800420e:	4291      	cmp	r1, r2
 8004210:	f100 33ff 	add.w	r3, r0, #4294967295
 8004214:	d100      	bne.n	8004218 <memcpy+0xc>
 8004216:	4770      	bx	lr
 8004218:	b510      	push	{r4, lr}
 800421a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800421e:	4291      	cmp	r1, r2
 8004220:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004224:	d1f9      	bne.n	800421a <memcpy+0xe>
 8004226:	bd10      	pop	{r4, pc}

08004228 <memmove>:
 8004228:	4288      	cmp	r0, r1
 800422a:	b510      	push	{r4, lr}
 800422c:	eb01 0402 	add.w	r4, r1, r2
 8004230:	d902      	bls.n	8004238 <memmove+0x10>
 8004232:	4284      	cmp	r4, r0
 8004234:	4623      	mov	r3, r4
 8004236:	d807      	bhi.n	8004248 <memmove+0x20>
 8004238:	1e43      	subs	r3, r0, #1
 800423a:	42a1      	cmp	r1, r4
 800423c:	d008      	beq.n	8004250 <memmove+0x28>
 800423e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004242:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004246:	e7f8      	b.n	800423a <memmove+0x12>
 8004248:	4601      	mov	r1, r0
 800424a:	4402      	add	r2, r0
 800424c:	428a      	cmp	r2, r1
 800424e:	d100      	bne.n	8004252 <memmove+0x2a>
 8004250:	bd10      	pop	{r4, pc}
 8004252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004256:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800425a:	e7f7      	b.n	800424c <memmove+0x24>

0800425c <_free_r>:
 800425c:	b538      	push	{r3, r4, r5, lr}
 800425e:	4605      	mov	r5, r0
 8004260:	2900      	cmp	r1, #0
 8004262:	d040      	beq.n	80042e6 <_free_r+0x8a>
 8004264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004268:	1f0c      	subs	r4, r1, #4
 800426a:	2b00      	cmp	r3, #0
 800426c:	bfb8      	it	lt
 800426e:	18e4      	addlt	r4, r4, r3
 8004270:	f000 f910 	bl	8004494 <__malloc_lock>
 8004274:	4a1c      	ldr	r2, [pc, #112]	; (80042e8 <_free_r+0x8c>)
 8004276:	6813      	ldr	r3, [r2, #0]
 8004278:	b933      	cbnz	r3, 8004288 <_free_r+0x2c>
 800427a:	6063      	str	r3, [r4, #4]
 800427c:	6014      	str	r4, [r2, #0]
 800427e:	4628      	mov	r0, r5
 8004280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004284:	f000 b90c 	b.w	80044a0 <__malloc_unlock>
 8004288:	42a3      	cmp	r3, r4
 800428a:	d908      	bls.n	800429e <_free_r+0x42>
 800428c:	6820      	ldr	r0, [r4, #0]
 800428e:	1821      	adds	r1, r4, r0
 8004290:	428b      	cmp	r3, r1
 8004292:	bf01      	itttt	eq
 8004294:	6819      	ldreq	r1, [r3, #0]
 8004296:	685b      	ldreq	r3, [r3, #4]
 8004298:	1809      	addeq	r1, r1, r0
 800429a:	6021      	streq	r1, [r4, #0]
 800429c:	e7ed      	b.n	800427a <_free_r+0x1e>
 800429e:	461a      	mov	r2, r3
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	b10b      	cbz	r3, 80042a8 <_free_r+0x4c>
 80042a4:	42a3      	cmp	r3, r4
 80042a6:	d9fa      	bls.n	800429e <_free_r+0x42>
 80042a8:	6811      	ldr	r1, [r2, #0]
 80042aa:	1850      	adds	r0, r2, r1
 80042ac:	42a0      	cmp	r0, r4
 80042ae:	d10b      	bne.n	80042c8 <_free_r+0x6c>
 80042b0:	6820      	ldr	r0, [r4, #0]
 80042b2:	4401      	add	r1, r0
 80042b4:	1850      	adds	r0, r2, r1
 80042b6:	4283      	cmp	r3, r0
 80042b8:	6011      	str	r1, [r2, #0]
 80042ba:	d1e0      	bne.n	800427e <_free_r+0x22>
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	4401      	add	r1, r0
 80042c2:	6011      	str	r1, [r2, #0]
 80042c4:	6053      	str	r3, [r2, #4]
 80042c6:	e7da      	b.n	800427e <_free_r+0x22>
 80042c8:	d902      	bls.n	80042d0 <_free_r+0x74>
 80042ca:	230c      	movs	r3, #12
 80042cc:	602b      	str	r3, [r5, #0]
 80042ce:	e7d6      	b.n	800427e <_free_r+0x22>
 80042d0:	6820      	ldr	r0, [r4, #0]
 80042d2:	1821      	adds	r1, r4, r0
 80042d4:	428b      	cmp	r3, r1
 80042d6:	bf01      	itttt	eq
 80042d8:	6819      	ldreq	r1, [r3, #0]
 80042da:	685b      	ldreq	r3, [r3, #4]
 80042dc:	1809      	addeq	r1, r1, r0
 80042de:	6021      	streq	r1, [r4, #0]
 80042e0:	6063      	str	r3, [r4, #4]
 80042e2:	6054      	str	r4, [r2, #4]
 80042e4:	e7cb      	b.n	800427e <_free_r+0x22>
 80042e6:	bd38      	pop	{r3, r4, r5, pc}
 80042e8:	200001e0 	.word	0x200001e0

080042ec <sbrk_aligned>:
 80042ec:	b570      	push	{r4, r5, r6, lr}
 80042ee:	4e0e      	ldr	r6, [pc, #56]	; (8004328 <sbrk_aligned+0x3c>)
 80042f0:	460c      	mov	r4, r1
 80042f2:	6831      	ldr	r1, [r6, #0]
 80042f4:	4605      	mov	r5, r0
 80042f6:	b911      	cbnz	r1, 80042fe <sbrk_aligned+0x12>
 80042f8:	f000 f8bc 	bl	8004474 <_sbrk_r>
 80042fc:	6030      	str	r0, [r6, #0]
 80042fe:	4621      	mov	r1, r4
 8004300:	4628      	mov	r0, r5
 8004302:	f000 f8b7 	bl	8004474 <_sbrk_r>
 8004306:	1c43      	adds	r3, r0, #1
 8004308:	d00a      	beq.n	8004320 <sbrk_aligned+0x34>
 800430a:	1cc4      	adds	r4, r0, #3
 800430c:	f024 0403 	bic.w	r4, r4, #3
 8004310:	42a0      	cmp	r0, r4
 8004312:	d007      	beq.n	8004324 <sbrk_aligned+0x38>
 8004314:	1a21      	subs	r1, r4, r0
 8004316:	4628      	mov	r0, r5
 8004318:	f000 f8ac 	bl	8004474 <_sbrk_r>
 800431c:	3001      	adds	r0, #1
 800431e:	d101      	bne.n	8004324 <sbrk_aligned+0x38>
 8004320:	f04f 34ff 	mov.w	r4, #4294967295
 8004324:	4620      	mov	r0, r4
 8004326:	bd70      	pop	{r4, r5, r6, pc}
 8004328:	200001e4 	.word	0x200001e4

0800432c <_malloc_r>:
 800432c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004330:	1ccd      	adds	r5, r1, #3
 8004332:	f025 0503 	bic.w	r5, r5, #3
 8004336:	3508      	adds	r5, #8
 8004338:	2d0c      	cmp	r5, #12
 800433a:	bf38      	it	cc
 800433c:	250c      	movcc	r5, #12
 800433e:	2d00      	cmp	r5, #0
 8004340:	4607      	mov	r7, r0
 8004342:	db01      	blt.n	8004348 <_malloc_r+0x1c>
 8004344:	42a9      	cmp	r1, r5
 8004346:	d905      	bls.n	8004354 <_malloc_r+0x28>
 8004348:	230c      	movs	r3, #12
 800434a:	2600      	movs	r6, #0
 800434c:	603b      	str	r3, [r7, #0]
 800434e:	4630      	mov	r0, r6
 8004350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004354:	4e2e      	ldr	r6, [pc, #184]	; (8004410 <_malloc_r+0xe4>)
 8004356:	f000 f89d 	bl	8004494 <__malloc_lock>
 800435a:	6833      	ldr	r3, [r6, #0]
 800435c:	461c      	mov	r4, r3
 800435e:	bb34      	cbnz	r4, 80043ae <_malloc_r+0x82>
 8004360:	4629      	mov	r1, r5
 8004362:	4638      	mov	r0, r7
 8004364:	f7ff ffc2 	bl	80042ec <sbrk_aligned>
 8004368:	1c43      	adds	r3, r0, #1
 800436a:	4604      	mov	r4, r0
 800436c:	d14d      	bne.n	800440a <_malloc_r+0xde>
 800436e:	6834      	ldr	r4, [r6, #0]
 8004370:	4626      	mov	r6, r4
 8004372:	2e00      	cmp	r6, #0
 8004374:	d140      	bne.n	80043f8 <_malloc_r+0xcc>
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	4631      	mov	r1, r6
 800437a:	4638      	mov	r0, r7
 800437c:	eb04 0803 	add.w	r8, r4, r3
 8004380:	f000 f878 	bl	8004474 <_sbrk_r>
 8004384:	4580      	cmp	r8, r0
 8004386:	d13a      	bne.n	80043fe <_malloc_r+0xd2>
 8004388:	6821      	ldr	r1, [r4, #0]
 800438a:	3503      	adds	r5, #3
 800438c:	1a6d      	subs	r5, r5, r1
 800438e:	f025 0503 	bic.w	r5, r5, #3
 8004392:	3508      	adds	r5, #8
 8004394:	2d0c      	cmp	r5, #12
 8004396:	bf38      	it	cc
 8004398:	250c      	movcc	r5, #12
 800439a:	4638      	mov	r0, r7
 800439c:	4629      	mov	r1, r5
 800439e:	f7ff ffa5 	bl	80042ec <sbrk_aligned>
 80043a2:	3001      	adds	r0, #1
 80043a4:	d02b      	beq.n	80043fe <_malloc_r+0xd2>
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	442b      	add	r3, r5
 80043aa:	6023      	str	r3, [r4, #0]
 80043ac:	e00e      	b.n	80043cc <_malloc_r+0xa0>
 80043ae:	6822      	ldr	r2, [r4, #0]
 80043b0:	1b52      	subs	r2, r2, r5
 80043b2:	d41e      	bmi.n	80043f2 <_malloc_r+0xc6>
 80043b4:	2a0b      	cmp	r2, #11
 80043b6:	d916      	bls.n	80043e6 <_malloc_r+0xba>
 80043b8:	1961      	adds	r1, r4, r5
 80043ba:	42a3      	cmp	r3, r4
 80043bc:	6025      	str	r5, [r4, #0]
 80043be:	bf18      	it	ne
 80043c0:	6059      	strne	r1, [r3, #4]
 80043c2:	6863      	ldr	r3, [r4, #4]
 80043c4:	bf08      	it	eq
 80043c6:	6031      	streq	r1, [r6, #0]
 80043c8:	5162      	str	r2, [r4, r5]
 80043ca:	604b      	str	r3, [r1, #4]
 80043cc:	4638      	mov	r0, r7
 80043ce:	f104 060b 	add.w	r6, r4, #11
 80043d2:	f000 f865 	bl	80044a0 <__malloc_unlock>
 80043d6:	f026 0607 	bic.w	r6, r6, #7
 80043da:	1d23      	adds	r3, r4, #4
 80043dc:	1af2      	subs	r2, r6, r3
 80043de:	d0b6      	beq.n	800434e <_malloc_r+0x22>
 80043e0:	1b9b      	subs	r3, r3, r6
 80043e2:	50a3      	str	r3, [r4, r2]
 80043e4:	e7b3      	b.n	800434e <_malloc_r+0x22>
 80043e6:	6862      	ldr	r2, [r4, #4]
 80043e8:	42a3      	cmp	r3, r4
 80043ea:	bf0c      	ite	eq
 80043ec:	6032      	streq	r2, [r6, #0]
 80043ee:	605a      	strne	r2, [r3, #4]
 80043f0:	e7ec      	b.n	80043cc <_malloc_r+0xa0>
 80043f2:	4623      	mov	r3, r4
 80043f4:	6864      	ldr	r4, [r4, #4]
 80043f6:	e7b2      	b.n	800435e <_malloc_r+0x32>
 80043f8:	4634      	mov	r4, r6
 80043fa:	6876      	ldr	r6, [r6, #4]
 80043fc:	e7b9      	b.n	8004372 <_malloc_r+0x46>
 80043fe:	230c      	movs	r3, #12
 8004400:	4638      	mov	r0, r7
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	f000 f84c 	bl	80044a0 <__malloc_unlock>
 8004408:	e7a1      	b.n	800434e <_malloc_r+0x22>
 800440a:	6025      	str	r5, [r4, #0]
 800440c:	e7de      	b.n	80043cc <_malloc_r+0xa0>
 800440e:	bf00      	nop
 8004410:	200001e0 	.word	0x200001e0

08004414 <_realloc_r>:
 8004414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004418:	4680      	mov	r8, r0
 800441a:	4614      	mov	r4, r2
 800441c:	460e      	mov	r6, r1
 800441e:	b921      	cbnz	r1, 800442a <_realloc_r+0x16>
 8004420:	4611      	mov	r1, r2
 8004422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004426:	f7ff bf81 	b.w	800432c <_malloc_r>
 800442a:	b92a      	cbnz	r2, 8004438 <_realloc_r+0x24>
 800442c:	f7ff ff16 	bl	800425c <_free_r>
 8004430:	4625      	mov	r5, r4
 8004432:	4628      	mov	r0, r5
 8004434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004438:	f000 f838 	bl	80044ac <_malloc_usable_size_r>
 800443c:	4284      	cmp	r4, r0
 800443e:	4607      	mov	r7, r0
 8004440:	d802      	bhi.n	8004448 <_realloc_r+0x34>
 8004442:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004446:	d812      	bhi.n	800446e <_realloc_r+0x5a>
 8004448:	4621      	mov	r1, r4
 800444a:	4640      	mov	r0, r8
 800444c:	f7ff ff6e 	bl	800432c <_malloc_r>
 8004450:	4605      	mov	r5, r0
 8004452:	2800      	cmp	r0, #0
 8004454:	d0ed      	beq.n	8004432 <_realloc_r+0x1e>
 8004456:	42bc      	cmp	r4, r7
 8004458:	4622      	mov	r2, r4
 800445a:	4631      	mov	r1, r6
 800445c:	bf28      	it	cs
 800445e:	463a      	movcs	r2, r7
 8004460:	f7ff fed4 	bl	800420c <memcpy>
 8004464:	4631      	mov	r1, r6
 8004466:	4640      	mov	r0, r8
 8004468:	f7ff fef8 	bl	800425c <_free_r>
 800446c:	e7e1      	b.n	8004432 <_realloc_r+0x1e>
 800446e:	4635      	mov	r5, r6
 8004470:	e7df      	b.n	8004432 <_realloc_r+0x1e>
	...

08004474 <_sbrk_r>:
 8004474:	b538      	push	{r3, r4, r5, lr}
 8004476:	2300      	movs	r3, #0
 8004478:	4d05      	ldr	r5, [pc, #20]	; (8004490 <_sbrk_r+0x1c>)
 800447a:	4604      	mov	r4, r0
 800447c:	4608      	mov	r0, r1
 800447e:	602b      	str	r3, [r5, #0]
 8004480:	f7fc fdd4 	bl	800102c <_sbrk>
 8004484:	1c43      	adds	r3, r0, #1
 8004486:	d102      	bne.n	800448e <_sbrk_r+0x1a>
 8004488:	682b      	ldr	r3, [r5, #0]
 800448a:	b103      	cbz	r3, 800448e <_sbrk_r+0x1a>
 800448c:	6023      	str	r3, [r4, #0]
 800448e:	bd38      	pop	{r3, r4, r5, pc}
 8004490:	200001e8 	.word	0x200001e8

08004494 <__malloc_lock>:
 8004494:	4801      	ldr	r0, [pc, #4]	; (800449c <__malloc_lock+0x8>)
 8004496:	f000 b811 	b.w	80044bc <__retarget_lock_acquire_recursive>
 800449a:	bf00      	nop
 800449c:	200001ec 	.word	0x200001ec

080044a0 <__malloc_unlock>:
 80044a0:	4801      	ldr	r0, [pc, #4]	; (80044a8 <__malloc_unlock+0x8>)
 80044a2:	f000 b80c 	b.w	80044be <__retarget_lock_release_recursive>
 80044a6:	bf00      	nop
 80044a8:	200001ec 	.word	0x200001ec

080044ac <_malloc_usable_size_r>:
 80044ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044b0:	1f18      	subs	r0, r3, #4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	bfbc      	itt	lt
 80044b6:	580b      	ldrlt	r3, [r1, r0]
 80044b8:	18c0      	addlt	r0, r0, r3
 80044ba:	4770      	bx	lr

080044bc <__retarget_lock_acquire_recursive>:
 80044bc:	4770      	bx	lr

080044be <__retarget_lock_release_recursive>:
 80044be:	4770      	bx	lr

080044c0 <_init>:
 80044c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c2:	bf00      	nop
 80044c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c6:	bc08      	pop	{r3}
 80044c8:	469e      	mov	lr, r3
 80044ca:	4770      	bx	lr

080044cc <_fini>:
 80044cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ce:	bf00      	nop
 80044d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044d2:	bc08      	pop	{r3}
 80044d4:	469e      	mov	lr, r3
 80044d6:	4770      	bx	lr
